#region Gnus
//$color 14

class BrimstoneSelected : Inventory { Default { Inventory.MaxAmount 1; } }
class BrimstoneConnect : BrimstoneSelected {} // A short pause each time you hit a wall to give it oomph.
class BrimstoneHeld : BrimstoneSelected {} // This is used if you are doing climbing while having sword ready so you won't end up having to get into swing again.
class BrimstoneSide : BrimstoneSelected {} // Attack swing side.

class BrimstoneDrop : RandomSpawner
{
	Default
	{
		DropItem "Brimstone",256,1;
	}
}

#include "zscript/guns/projectile/Brimstone.txt"

class Brimstone : GuncasterWeapon
{
	Default
	{
		Inventory.PickupMessage "$GOTBRIMSTONE";
		Obituary "$KILLBRIMSTONE";
		Weapon.UpSound "Brimstone/Up";
		Weapon.SelectionOrder 7;
		Weapon.SlotNumber 1;
		Weapon.BobStyle 'InverseSmooth';
		Weapon.BobSpeed 1.0;
		Weapon.BobRangeY 0.8;
		Weapon.BobRangeX 1.2;
		GuncasterWeapon.twoHandedWeapon TRUE;
		Scale 0.6;
		+WEAPON.NOALERT
		+FLOATBOB
	}
	
	//Odd bugs require odd solutions. In this case - dinosaur solutions.
	int MechaMakerSwordIndex;
	int DeadMakerSwordIndex;
	int DreadMakerSwordIndex;
	int PowerSwordIndex;
	int EnviroSwordIndex;
	int DraughSwordIndex;
	
	//Strat drop.
	override void PostBeginPlay()
	{
		if(!bDROPPED && random(0,20) == 0)
		{
			A_DropItem("BrimstoneStratGiver",-1,256);
		}
		Super.PostBeginPlay();
		Return;
	}
	
	float				projangle;
	
	Gc_CleaveScan		scanner;
	Gc_SwordCleave		cleave;
	bool				is_cleaving;
	
	//int swordside; // Swinging side.
	
	override void Tick () {
		super.Tick();
		
		if(owner && is_cleaving) {
			// console.printf("lul");
			scanner.NextBatch();
			cleave.CleaveOnBrother(scanner);
			
			if(scanner.IsDone()) {
				is_cleaving = false;
			}
		}
	}
	
	// kd: Basically A_FireProjectile but the projectiles scatter correctly
	// when looking up and down.
	action void A_ProperProjectile (class <Actor> proj, double offset_ang = 0) {
		let mo = A_FireProjectile(proj, 0, 0, 0, 0, FPF_AIMATANGLE);
		
		if(mo) {
			let forw	= Gc_Vec.Forward(angle, pitch);
			let right	= Gc_Vec.Right(angle);
			let offset	= forw - tan(offset_ang) * right;
			mo.vel		= mo.default.speed * offset;
		}
	}
	
	States
	{
	Spawn:
		GINX ABCDEF 2 Bright;
		Loop;
		
	SelectStuff:
		TNT1 A 0 {
			//A_Overlay(199,"Debug");
			A_GiveInventory("BrimstoneSelected",1);
			A_TakeInventory("BrimstoneConnect",1);
			A_SetCrosshair(56);
			ACS_NamedExecuteAlways("SbarinfoFix",0,0,1,2);
		}
        Goto SelectLoop;

	DeselectStuff:
		TNT1 A 0 {
			If(CountInv("BrimstoneStratActive") && ((CountInv("PowerTomeEffect") && CountInv("Mana") >= 30) || CountInv("Mana") >= 60)) { A_Overlay(6,"StratDeactivate"); }
			A_TakeInventory("BrimstoneSelected",1);
			ACS_NamedExecuteAlways("SbarinfoFix",0,1,1,2);
		}
        Goto DeselectLoop;
		
	Ready: 
		TNT1 A 0 {
			A_Overlay(-3,"RightActive"); // Because lol map change causes oddities.
		}
		Goto Super::Ready;
	Fire: // So the playerpawn doesn't react when you hold fire, else you can just go sneaky-sneaky while holding the sword and it's odd.
    ReadyLoop:
		TNT1 A 0 A_JumpIf(CountInv("MastersOfPain"),2); //SCREW GUN ACTIONS, I AM GUN SPEED.
		TNT1 A 0 A_JumpIf((invoker.WeapAction > 0 || invoker.LeftHand && !(Invoker.DeadSwapInterrupt)) || invoker.WeaponInUse, 2); //If the gun actions are involved, cancel out ability for weapon change.
        TNT1 A 1 A_WeaponReady(WRF_NOFIRE);
        Loop;
		TNT1 A 1 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH); 
		Loop;
		
	/*Debug:
		TNT1 A 1 A_LogInt(Invoker.LeftHand);
		Loop;*/

	//RIGHT SIDE.

	RightActive:
		"####" A 0 A_JumpIf(CountInv("BrimstoneHeld"),"HolderInterrupted");
		GONG A 0 { invoker.MechaMakerSwordIndex = player.FindPSprite(OverlayID()).Sprite; }
		GDNG A 0 { invoker.DreadMakerSwordIndex = player.FindPSprite(OverlayID()).Sprite; }
		GNNG A 0 { invoker.DeadMakerSwordIndex = player.FindPSprite(OverlayID()).Sprite; }
		GCNG A 0 { invoker.PowerSwordIndex = player.FindPSprite(OverlayID()).Sprite; }
		GUNG A 0 { invoker.EnviroSwordIndex = player.FindPSprite(OverlayID()).Sprite; }
		GYNG A 0 { invoker.DraughSwordIndex = player.FindPSprite(OverlayID()).Sprite; }
		GING A 0;
		"####" A 0 {
			If(CountInv("BrimstoneStratActive") && ((CountInv("PowerTomeEffect") && CountInv("Mana") >= 100) || CountInv("Mana") >= 200)) { A_Overlay(6,"StratActivate",1); }
		} // Yes I know this whole ordeal could be done better. Fug you too.
		"####" AABBCCDDEEFF 1 {
			if(CountInv("PowerDeadMaker") && CountInv("PowerSuitToken")) { player.FindPSprite(OverlayID()).Sprite = invoker.MechaMakerSwordIndex; }
			else if(CountInv("PowerDeadMaker") && CountInv("PowerSuitDraugh")) { player.FindPSprite(OverlayID()).Sprite = invoker.DreadMakerSwordIndex; }
			else if(CountInv("PowerDeadMaker")) { player.FindPSprite(OverlayID()).Sprite = invoker.DeadMakerSwordIndex; }
			else if(CountInv("PowerSuitToken")) { player.FindPSprite(OverlayID()).Sprite = invoker.PowerSwordIndex; }
			else if(CountInv("PowerSuitProtect")) { player.FindPSprite(OverlayID()).Sprite = invoker.EnviroSwordIndex; }
			else if(CountInv("PowerSuitDraugh")) { player.FindPSprite(OverlayID()).Sprite = invoker.DraughSwordIndex; }
			
			//Strat switch.
			If(CountInv("BrimstoneStrat") &&
				!invoker.weapSwitch && !CountInv("GCCantFire") && !invoker.LeftHand &&
				GetPlayerInput(INPUT_BUTTONS) & BT_RELOAD) {
				Return ResolveState("StratSwitch");
			}
			
			//Fire.
			If(!invoker.weapSwitch && !CountInv("GCCantFire") && (!invoker.LeftHand || CountInv("PowerDeadmaker")) &&
				GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) {
				Return ResolveState("EnterSwing");
			}
			Return ResolveState(Null);
		}
		Loop;

	//STRAT JUNK.
	
	StratActivate:
		GGNL A 0 A_PlaySound("Brimstone/StratActivate",5);
		GGNL AABBCCDDEEFFGGHHII 1 Bright A_OverlayOffset(OverlayID(),OverlayX(-3),OverlayY(-3),WOF_INTERPOLATE);
	StratActive:
		GGNG AABBCCDDCCBB 1 Bright A_OverlayOffset(OverlayID(),OverlayX(-3),OverlayY(-3),WOF_INTERPOLATE);
		GGNG A 0 A_JumpIf(!CountInv("BrimstoneStratActive"),"StratDeactivate");
		Loop;
	StratActiveReturn:
		GGNG B 1 Bright A_OverlayOffset(OverlayID(),OverlayX(-3),OverlayY(-3));
		GGNG BCCDDCCBB 1 Bright A_OverlayOffset(OverlayID(),OverlayX(-3),OverlayY(-3),WOF_INTERPOLATE);
		Goto StratActive;
	StratDeactivate:
		GGNI EEDDCCBBAA 1 Bright A_OverlayOffset(OverlayID(),OverlayX(-3),OverlayY(-3),WOF_INTERPOLATE);
		Stop;
		
	StratSwitch:
		GONG A 0 A_JumpIf(CountInv("PowerDeadmaker") && CountInv("PowerSuitToken"),7);
		GDNG A 0 A_JumpIf(CountInv("PowerDeadmaker") && CountInv("PowerSuitDraugh"),6);
		GNNG A 0 A_JumpIf(CountInv("PowerDeadmaker"),5);
		GCNG A 0 A_JumpIf(CountInv("PowerSuitToken"),4);
		GUNG A 0 A_JumpIf(CountInv("PowerSuitProtect"),3);
		GYNG A 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		GING A 0;
		"####" A 0 A_JumpIf(CountInv("BrimstoneStratActive"),"StratSwitchOff");
		/*"####" A 1 A_OverlayOffset(OverlayID(),1,1,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),2,3,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),4,7,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),5,12,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),7,18,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),9,22,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),11,24,WOF_INTERPOLATE);
		"####" EFF 1 A_OverlayOffset(OverlayID(),12,25,WOF_INTERPOLATE);
		
		"####" A 1 A_OverlayOffset(OverlayID(),14,23,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),16,20,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),18,16,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),19,10,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),20,8,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),21,6,WOF_INTERPOLATE);
		"####" DDEE 1 A_OverlayOffset(OverlayID(),22,5,WOF_INTERPOLATE);*/
		
		"####" A 0 {
			A_Overlay(6,"StratActivate");
			A_PlaySound("Brimstone/StratActivate",5);
			A_GiveInventory("BrimstoneStratActive",1);
		}
		"####" F 1 A_OverlayOffset(OverlayID(),1,3,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),2,7,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),3,13,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),5,19,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),7,25,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),5,28,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),4,29,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),3,30,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),2,31,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),1,32,WOF_INTERPOLATE);
		
		"####" D 1 A_OverlayOffset(OverlayID(),2,31,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),3,30,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),5,28,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),9,21,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),11,23,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),12,25,WOF_INTERPOLATE);
		
		"####" A 1 A_OverlayOffset(OverlayID(),11,24,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),9,22,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),7,18,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),5,12,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),4,7,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),2,3,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),1,1,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),0,0,WOF_INTERPOLATE);
		Goto RightActive;
		
	StratSwitchOff:
		"####" A 0 {
			A_Overlay(6,"StratDeactivate");
			A_TakeInventory("BrimstoneStratActive",1);
		}
		"####" AABBCCDDEEFF 1;
		Goto RightActive;
		
	//LEFT SIDE.
			
	LeftActive:
		TNT1 A 1;
		TNT1 A 0 {
				If(!invoker.WeapSwitch && !CountInv("GCCantFire") && ((!invoker.LeftHand) || CountInv("PowerDeadmaker")) &&
				GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) {
					Return ResolveState("Cast");
				}
				If(!invoker.WeapSwitch && !CountInv("GCCantFire") && ((!invoker.LeftHand) || CountInv("PowerDeadmaker")) &&
				GetCvar("GC_Trogdor") && GetPlayerInput(INPUT_BUTTONS) & BT_ZOOM) {
					Return ResolveState("DeadPunchStart");
				}
				Return ResolveState(Null);
		}
		Loop;
		
	//ATTACK.
		
	EnterSwing:
		"####" A 0 { invoker.WeapAction++;
			if(!CountInv("PowerDeadmaker")) { invoker.LeftHand = 1; }
			Return A_JumpIf(CountInv("PowerBerserkDamage") || CountInv("PowerDeadmaker") || CountInv("PowersuitToken"),3);
		}
		"####" A 1 A_OverlayOffset(OverlayID(),1,1,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),3,7,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),6,16,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),11,28,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),21,50,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),32,74,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),45,114,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),57,142,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),69,196,WOF_INTERPOLATE);
		TNT1 A 3 {
			 A_Overlay(6,"None");
			 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
			 A_GiveInventory("BrimstoneSide",1); //invoker.swordside = 1;
		}
		TNT1 A 0 A_JumpIf(!invoker.weapSwitch && !CountInv("GCCantFire") &&
						GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK,"HolderShorter");
		Goto MainFire;
	Holder:
		TNT1 A 0; // Add delay here if needed.
	HolderShorter:
		TNT1 A 2 A_GiveInventory("BrimstoneHeld",1);
		GONS A 0 A_JumpIf(CountInv("PowerDeadmaker") && CountInv("PowerSuitToken"),7);
		GDNS A 0 A_JumpIf(CountInv("PowerDeadmaker") && CountInv("PowerSuitDraugh"),6);
		GNNS A 0 A_JumpIf(CountInv("PowerDeadmaker"),5);
		GCNS A 0 A_JumpIf(CountInv("PowerSuitToken"),4);
		GUNS A 0 A_JumpIf(CountInv("PowerSuitProtect"),3);
		GYNS A 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		GINS A 0;
		"####" A 1 { A_OverlayOffset(OverlayID(),-259,-134); if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.99); } }
		"####" A 1 { A_OverlayOffset(OverlayID(),-265,-149,WOF_INTERPOLATE); if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.98); } }
		"####" A 1 { A_OverlayOffset(OverlayID(),-271,-163,WOF_INTERPOLATE); if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.97); } }
		"####" A 1 { A_OverlayOffset(OverlayID(),-282,-180,WOF_INTERPOLATE); if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.96); } }
		"####" A 1 { A_OverlayOffset(OverlayID(),-283,-182,WOF_INTERPOLATE); if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.95); } }
		Goto HolderMain;
	HolderInterrupted:
		"####" A 0 {
			invoker.WeapAction++;
			if(CountInv("BrimstoneSide")) {
				A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
				A_GiveInventory("BrimstoneSide",1);
			}
		}
		GONS A 0 A_JumpIf(CountInv("PowerDeadmaker") && CountInv("PowerSuitToken"),7);
		GDNS A 0 A_JumpIf(CountInv("PowerDeadmaker") && CountInv("PowerSuitDraugh"),6);
		GNNS A 0 A_JumpIf(CountInv("PowerDeadmaker"),5);
		GCNS A 0 A_JumpIf(CountInv("PowerSuitToken"),4);
		GUNS A 0 A_JumpIf(CountInv("PowerSuitProtect"),3);
		GYNS A 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		GINS A 0;
		"####" A 0 A_OverlayOffset(OverlayID(),-283,-182);
	HolderMain:
		"####" A 1 { if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.95); } }
		"####" A 0 A_JumpIf( /*!invoker.weapSwitch && !CountInv("GCCantFire") &&*/
						GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK, "HolderMain");
		//"####" A 0 A_JumpIf(invoker.LeftHand, "HolderMain");
	HolderRelease:
		"####" A 1 { A_OverlayOffset(OverlayID(),-282,-180,WOF_INTERPOLATE); if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.96); } }
		"####" A 1 { A_OverlayOffset(OverlayID(),-271,-163,WOF_INTERPOLATE); if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.98); } }
		"####" A 1 { A_OverlayOffset(OverlayID(),-265,-149,WOF_INTERPOLATE); if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.99); } }
		"####" A 1 { A_OverlayOffset(OverlayID(),-259,-134,WOF_INTERPOLATE); if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(1.0); } }
		TNT1 A 1;
	MainFire:
		TNT1 A 3 {
			If(CountInv("PowerBerserkDamage") || CountInv("PowerDeadmaker") || CountInv("PowersuitToken")) { A_SetTics(0); }
			A_PlaySound("Brimstone/Woosh",5,0.9);
			A_TakeInventory("BrimstoneHeld",1);
			if(CountInv("BrimstoneStratActive") && ((CountInv("PowerTomeEffect") && CountInv("Mana") >= 30) || CountInv("Mana") >= 60)) { A_Overlay(6,"StratSlash"); }
			
			invoker.scanner.AttachTo(invoker.owner.player);
			invoker.is_cleaving = false;
			
			let dergBoi = Guncaster(invoker.owner);
			if(!dergBoi.RW_ACTIVE) { DergBoi.alpha_goal = 1.0; }
			
			if(CountInv("BrimstoneSide")) {
				invoker.scanner.RightToLeft(
					angle_covered:	110,
					pitch_covered:	30,
					swing_tics:		15,
					distance:		250 + (CountInv("PowerSuitToken") * 25) + (CountInv("PowerDeadmaker") * 50));
			}
			
			else {
				invoker.scanner.LeftToRight(
					angle_covered:	100,
					pitch_covered:	30,
					swing_tics:		15,
					distance:		250 + (CountInv("PowerSuitToken") * 25) + (CountInv("PowerDeadmaker") * 50));
			}
			
			invoker.cleave.Begin(
				puff:					"BrimstonePuff",
				squishy_hit_class:		"BrimstoneSquishySounder",
				bloodless_hit_class:	"BrimstoneBloodlessSounder");
			
			// invoker.scanner.Print();
			invoker.is_cleaving = true;
		}
		TNT1 A 0 A_PlaySound("Brimstone/Swing",1);
		GONS A 0 A_JumpIf(CountInv("PowerDeadmaker") && CountInv("PowerSuitToken"),7);
		GDNS A 0 A_JumpIf(CountInv("PowerDeadmaker") && CountInv("PowerSuitDraugh"),6);
		GNNS A 0 A_JumpIf(CountInv("PowerDeadmaker"),5);
		GCNS A 0 A_JumpIf(CountInv("PowerSuitToken"),4);
		GUNS A 0 A_JumpIf(CountInv("PowerSuitProtect"),3);
		GYNS A 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		GINS A 0;
		//"####" A 1 { A_OverlayOffset(OverlayID(),-525,-157); }
		"####" A 0 { If(CountInv("BrimstoneStratActive") &&
					  ((CountInv("PowerTomeEffect") && CountInv("Mana") >= 30) || CountInv("Mana") >= 60)) { A_Overlay(5,"BrimstoneStratSlash"); } }
		"####" B 1 { A_OverlayOffset(OverlayID(),-514,-167); 				 A_SetPitch(pitch + 0.125 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE); A_SetAngle(angle + GetCVar("GC_WeaponRecoil") * (CountInv("BrimstoneSide") ? 0.5 : -0.5), SPF_INTERPOLATE); }
		"####" B 1 { A_OverlayOffset(OverlayID(),-495,-178,WOF_INTERPOLATE); A_SetPitch(pitch + 0.125 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE); A_SetAngle(angle + GetCVar("GC_WeaponRecoil") * (CountInv("BrimstoneSide") ? 0.5 : -0.5), SPF_INTERPOLATE); }
		"####" C 1 { A_OverlayOffset(OverlayID(),-484,-180,WOF_INTERPOLATE); A_SetPitch(pitch + 0.125 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE); A_SetAngle(angle + GetCVar("GC_WeaponRecoil") * (CountInv("BrimstoneSide") ? 1.0 : -1.0), SPF_INTERPOLATE); }
		"####" C 1 { A_OverlayOffset(OverlayID(),-459,-182,WOF_INTERPOLATE); A_SetPitch(pitch + 0.125 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE); A_SetAngle(angle + GetCVar("GC_WeaponRecoil") * (CountInv("BrimstoneSide") ? 1.0 : -1.0), SPF_INTERPOLATE); }
		"####" D 1 { A_OverlayOffset(OverlayID(),-451,-182,WOF_INTERPOLATE); A_SetPitch(pitch + 0.25  * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE); A_SetAngle(angle + GetCVar("GC_WeaponRecoil") * (CountInv("BrimstoneSide") ? 1.5 : -1.5), SPF_INTERPOLATE); }
		"####" D 1 { A_OverlayOffset(OverlayID(),-413,-177,WOF_INTERPOLATE); A_SetPitch(pitch + 0.25  * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE); A_SetAngle(angle + GetCVar("GC_WeaponRecoil") * (CountInv("BrimstoneSide") ? 1.5 : -1.5), SPF_INTERPOLATE); }
		"####" E 1 { A_OverlayOffset(OverlayID(),-387,-176,WOF_INTERPOLATE); A_SetPitch(pitch + 0.25  * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE); A_SetAngle(angle + GetCVar("GC_WeaponRecoil") * (CountInv("BrimstoneSide") ? 2.0 : -2.0), SPF_INTERPOLATE); }
		"####" E 1 { A_OverlayOffset(OverlayID(),-356,-157,WOF_INTERPOLATE); A_SetPitch(pitch + 0.25  * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE); A_SetAngle(angle + GetCVar("GC_WeaponRecoil") * (CountInv("BrimstoneSide") ? 2.5 : -2.5), SPF_INTERPOLATE); }
		GINS A 0;
		"####" F 1 {
			A_OverlayOffset(OverlayID(),-352,-166);
			A_SetPitch(pitch + 0.5  * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetAngle(angle + GetCVar("GC_WeaponRecoil") * (CountInv("BrimstoneSide") ? 1.5 : -1.5), SPF_INTERPOLATE);
			if(CountInv("BrimstoneSide")) {
				A_CustomPunch(0,1,CPF_NOTURN,"BrimstonePuffWallRight", 250 + (CountInv("PowerSuitToken") * 25) + (CountInv("PowerDeadmaker") * 50));
			} else {
				A_CustomPunch(0,1,CPF_NOTURN,"BrimstonePuffWall", 250 + (CountInv("PowerSuitToken") * 25) + (CountInv("PowerDeadmaker") * 50));
			}
			A_CustomPunch(0,1,CPF_NOTURN,"BrimstonePuffEffect", 250 + (CountInv("PowerSuitToken") * 25) + (CountInv("PowerDeadmaker") * 50));
		} 
	GottaNutBack: //AIDS! AAAAAIDS! AAAAAAEEEEEIDDDSSSSS! - Rich Evans, Red Letter Media.
		"####" G 1 { A_OverlayOffset(OverlayID(),-275,-136,WOF_INTERPOLATE); A_SetPitch(pitch + 0.25  * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE); A_SetAngle(angle + GetCVar("GC_WeaponRecoil") * (CountInv("BrimstoneSide") ? 2.0 : -2.0), SPF_INTERPOLATE); Return A_JumpIf(CountInv("BrimstoneConnect"),"HighImpactSexualViolence"); }
		"####" H 1 { A_OverlayOffset(OverlayID(),-265,-145,WOF_INTERPOLATE); A_SetPitch(pitch + 0.125 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE); A_SetAngle(angle + GetCVar("GC_WeaponRecoil") * (CountInv("BrimstoneSide") ? 1.5 : -1.5), SPF_INTERPOLATE); }
		"####" I 1 { A_OverlayOffset(OverlayID(),-233,-145,WOF_INTERPOLATE); A_SetPitch(pitch + 0.125 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE); A_SetAngle(angle + GetCVar("GC_WeaponRecoil") * (CountInv("BrimstoneSide") ? 1.0 : -1.0), SPF_INTERPOLATE); }
		"####" I 1 { A_OverlayOffset(OverlayID(),-180,-138,WOF_INTERPOLATE); A_SetPitch(pitch + 0.125 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE); A_SetAngle(angle + GetCVar("GC_WeaponRecoil") * (CountInv("BrimstoneSide") ? 0.5 : -0.5), SPF_INTERPOLATE); }
		"####" I 1 { A_OverlayOffset(OverlayID(),-135,-130,WOF_INTERPOLATE); If(CountInv("PowerBerserkDamage") || CountInv("PowerDeadmaker") || CountInv("PowersuitToken")) { A_SetTics(0); } }
		"####" I 1 { A_OverlayOffset(OverlayID(),-97 ,-125,WOF_INTERPOLATE); If(CountInv("PowerBerserkDamage") || CountInv("PowerDeadmaker") || CountInv("PowersuitToken")) { A_SetTics(0); } }
		"####" A 0 {
			if(CountInv("BrimstoneSide")) {
				A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,0);
				A_TakeInventory("BrimstoneSide",1);
			} else {
				A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
				A_GiveInventory("BrimstoneSide",1);
			}
		}
		TNT1 A 0 { invoker.Loopler = 0; }
		TNT1 AAAAAAAAAAAAAAAAAAAAAAA 1 {
			if(!invoker.weapSwitch && !CountInv("GCCantFire")) {
				if(GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) { invoker.Loopler++; }
				if(invoker.Loopler >= 6) {
					Return ResolveState("Holder");
				}
				else if(invoker.Loopler && !(GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK)) {
					Return ResolveState("AnotherOne");
				}
				if(!CountInv("PowerDeadmaker") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) {
					Return ResolveState("ReturnTheSlab");
				}
			}
			Return ResolveState(Null);
		}
		Goto ReturnTheSlab;

	HighImpactSexualViolence:
		"####" F 0 {
			A_TakeInventory("BrimstoneConnect",1);
			if(CountInv("BrimstoneStratActive")) {
				if(CountInv("PowerTomeEffect") && (CountInv("Mana") >= 30 || CountInv("Mana") >= 60)) { A_Overlay(6,"StratNutte"); }
				else { A_Overlay(6,"None"); }
			}
		}
		"####" F 1 { A_OverlayOffset(OverlayID(),-352+frandom(5,-5),-166+frandom(5,-5)); A_OverlayOffset(-2,OverlayX(-3),OverlayY(-3)); }
		"####" F 1 { A_OverlayOffset(OverlayID(),-352+frandom(5,-5),-166+frandom(5,-5)); A_OverlayOffset(-2,OverlayX(-3),OverlayY(-3)); }
		Goto GottaNutBack;
	AnotherOne:
		TNT1 A 2;
		Goto MainFire;
	
	//Animation stuff.
	StratSlash:
		TNT1 A 3 {
			if(CountInv("BrimstoneSide")) {
				A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
			} else {
				A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,0);
			}
		}
		GGNS B 1 Bright A_OverlayOffset(OverlayID(),OverlayX(-3),OverlayY(-3));
		GGNS BCCDDEE 1 Bright A_OverlayOffset(OverlayID(),OverlayX(-3),OverlayY(-3),WOF_INTERPOLATE);
		GGNS F 1 Bright A_OverlayOffset(OverlayID(),OverlayX(-3),OverlayY(-3));
	StratSlashRest:
		GGNS GHIIII 1 Bright { A_OverlayOffset(OverlayID(),OverlayX(-3),OverlayY(-3),WOF_INTERPOLATE); }
		Stop;
	StratNutte:
		TNT1 A 0 {
			if(CountInv("BrimstoneSide")) {
				A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
			} else {
				A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,0);
			}
		}
		GGNS FF 1 Bright;
		Goto StratSlashRest;
	
	//Projectile stuff.
	BrimstoneStratSlash:
		TNT1 A 0 {
			A_AlertMonsters();
			if(CountInv("PowerTomeEffect")) { A_TakeInventory("Mana",30,TIF_NOTAKEINFINITE); }
			else 			 				{ A_TakeInventory("Mana",60,TIF_NOTAKEINFINITE); }
			invoker.projangle = -45.0 * (CountInv("BrimstoneSide") ? 1.0 : -1.0);
		}
		TNT1 AAAAAAAAAA 1 {
			invoker.projangle = invoker.projangle + (10.0 * (CountInv("BrimstoneSide") ? 1.0 : -1.0));
			A_ProperProjectile("BrimstoneBlaster", invoker.projangle);
			// A_FireProjectile("BrimstoneBlaster",invoker.projangle,0,0,0,FPF_AIMATANGLE);
		}
		Stop;
		
	ReturnTheSlab:
		TNT1 A 2 {
			 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,0);
			 A_TakeInventory("BrimstoneSide",1);
		}
		GONG A 0 A_JumpIf(CountInv("PowerDeadmaker") && CountInv("PowerSuitToken"),7);
		GDNG A 0 A_JumpIf(CountInv("PowerDeadmaker") && CountInv("PowerSuitDraugh"),6);
		GNNG A 0 A_JumpIf(CountInv("PowerDeadmaker"),5);
		GCNG A 0 A_JumpIf(CountInv("PowerSuitToken"),4);
		GUNG A 0 A_JumpIf(CountInv("PowerSuitProtect"),3);
		GYNG A 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		GING A 0;
		"####" B 1 { A_OverlayOffset(OverlayID(),69,196); If(CountInv("BrimstoneStratActive") && ((CountInv("PowerTomeEffect") && CountInv("Mana") >= 30) || CountInv("Mana") >= 60)) { A_Overlay(6,"StratActiveReturn"); } }
		"####" B 1 A_OverlayOffset(OverlayID(),57,142,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),45,114,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),32,74,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),21,50,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),11,28,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),6,16,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),3,7,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),1,1,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),0,0,WOF_INTERPOLATE);
		"####" F 0 { invoker.WeapAction--; if(!CountInv("PowerDeadmaker")) { invoker.LeftHand = 0; } }
		Goto RightActive;
	}
}

#endregion
