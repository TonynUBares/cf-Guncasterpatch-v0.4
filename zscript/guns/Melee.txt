/*
fun fact: Uhhh... Ducks. Something.
*/

class DergfistSelected : Inventory { Default { Inventory.MaxAmount 1; } }

//class DualcastMode : Inventory { Default { Inventory.MaxAmount 1; } } //I could just use a variable, but consistency reasons. Also, this proved to be too much of an asspain to pull off.
class PunchConnected : DergfistSelected {}

class BarrelGrabbed : Inventory { Default { Inventory.MaxAmount 1; } } //In case I'd want to add more to grab.
class PodGrabbed : BarrelGrabbed {}

#include "zscript/guns/projectile/Melee.txt"
#include "zscript/guns/projectile/MidasMelee.txt"
#include "zscript/guns/projectile/SuitMelee.txt"

class Dergfist : GuncasterWeapon
{
	Default
	{
		Inventory.PickupSound "";
		Inventory.PickupMessage "You picked up the fists!... How the fuck did you do that? Don't you ever dare doing that again.";
		Obituary "$KILLDERGFIST";
		Weapon.UpSound "";
		Weapon.SelectionOrder 8;
		Weapon.SlotNumber 1;
		/*Weapon.AmmoType1 "Mana"
		Weapon.AmmoGive1 0
		Weapon.AmmoUse1 35*/
		Weapon.BobStyle 'InverseSmooth';
		Weapon.BobSpeed 2.2;
		Weapon.BobRangeY 0.5;
		Weapon.BobRangeX 1.5;
		GuncasterWeapon.twoHandedWeapon TRUE;
		Tag "Knuckle sandwich";
		+INVENTORY.UNDROPPABLE
		+WEAPON.NOAUTOFIRE
		+WEAPON.AMMO_OPTIONAL
	} 
	//General stuff
	Int FistsSide; //Alternate sides for punching.

	//Powersuit stuff
	Int PunchCycle;			//Length of the hit shock.
	
	Int UzziCounter; 		//The punch charging token.
	Int UzziCharge;			//The punch token.
	Int PunchRandom; 		//Rapid punch randomize position.
	Int PowerType;			 //Since both punch types in the powersuit punching use same animation, I might as well just flick the switch for decals.
	
	Int PunchCannonMode;	//Armcannons mode token.
	
	States
	{
	Spawn:
		CYGM X -1;
		Stop;
		
	SelectStuff:
		TNT1 A 0 {
			//A_Overlay(199,"Debug");
			invoker.PunchCycle = 0;
			invoker.UzziCounter = 0;
			invoker.UzziCharge = 0;
			A_GiveInventory("DergfistSelected",1);
			A_SetCrosshair(56);
			If(invoker.PunchCannonMode && CountInv("PowerSuitToken")) {
				 A_SetCrosshair(59);
			ACS_NamedExecuteAlways("SbarinfoFix",0,0,1,2);
			}
		}
	SelectLoop:
        TNT1 A 1 A_Raise(18);
        Loop;

	DeselectStuff:
		TNT1 A 0 {
			A_TakeInventory("DergfistSelected",1);
			ACS_NamedExecuteAlways("SbarinfoFix",0,1,1,2);
		}
    DeselectLoop:
        TNT1 A 1 A_Lower(18);
        Loop;
		
	/*Debug:
		TNT1 A 25 A_LogInt(invoker.HandCast);
		Loop;*/
	
	LeftActive:
		"####" A 0 A_OverlayFlags(3,PSPF_MIRROR|PSPF_FLIP,1);
		"####" A 0 A_JumpIf(invoker.PunchCannonMode && CountInv("PowerSuitToken"),"CannonLeftActive");
		//"####" A 0 A_JumpIf(CountInv("DualcastMode"),"DualcastRightActive");
		C1CP A 0 A_JumpIfInventory("PowerSuitToken",1,5);
		C1UP A 0 A_JumpIfInventory("PowerSuitProtect",1,4);
		C1YP A 0 A_JumpIfInventory("PowerSuitDraugh",1,3);
		C1MP A 0 A_JumpIfInventory("PowerMidasMode",1,2);
		C1GP A 0;
		"####" A 1 A_OverlayOffset(3,185,129);
		"####" A 0 A_JumpIf(!invoker.WeaponInUse && !CountInv("GCCantFire") &&
							!invoker.WeapSwitch && !invoker.HandCast &&
							GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK, "HandCast");
		Loop;
	RightActive:
		"####" A 0 A_OverlayFlags(-3,PSPF_MIRROR|PSPF_FLIP,0);
		"####" A 0 A_JumpIf(invoker.PunchCannonMode && CountInv("PowerSuitToken"),"CannonRightActive");
		//"####" A 0 A_JumpIf(CountInv("DualcastMode"),"DualcastRightActive");
		C1CP A 0 A_JumpIfInventory("PowerSuitToken",1,5);
		C1UP A 0 A_JumpIfInventory("PowerSuitProtect",1,4);
		C1YP A 0 A_JumpIfInventory("PowerSuitDraugh",1,3);
		C1MP A 0 A_JumpIfInventory("PowerMidasMode",1,2);
		C1GP A 0;
		//"####" A 0 A_Overlay(3,"LeftActive");
		"####" A 1 A_OverlayOffset(-3,185,129);
		"####" A 0 A_JumpIf(!invoker.HandCast && !CountInv("GCCantFire") && !invoker.WeapSwitch &&
							GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK) &&
							GetPlayerInput(INPUT_BUTTONS) & (BT_CROUCH), "GoingToUppercut"); //Insert Shao-kahn's laugh track here.
		"####" A 0 A_JumpIf(!CountInv("PowerSuitToken") && !invoker.HandCast &&
							!invoker.WeapSwitch && !CountInv("GCCantFire") &&
							GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK, "GoingToPunch"); //Regular punch.
		"####" A 0 A_JumpIf(CountInv("PowerSuitToken") && !invoker.HandCast && 
						  !invoker.WeapSwitch && !CountInv("GCCantFire") &&
						  GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK, "GoingToPowerPunch"); //Powersuit punch.
		/*"####" A 0 A_JumpIf(!invoker.HandCast && !invoker.WeapSwitch &&
						  GetPlayerInput(INPUT_BUTTONS) & BT_RELOAD, "GoingForDualcast");*/ //Switch to dual cast.
		"####" A 0 A_JumpIf(!CountInv("PowerSuitToken") && !invoker.HandCast &&
						  !invoker.WeapSwitch && !CountInv("GCCantFire") &&
						  GetPlayerInput(INPUT_BUTTONS) & BT_RELOAD, "GoingForCrack"); //KNUCKLE TIME!
		"####" A 0 A_JumpIf(CountInv("PowerSuitToken") && !invoker.HandCast &&
						  !invoker.WeapSwitch && !CountInv("GCCantFire") &&
						  GetPlayerInput(INPUT_BUTTONS) & BT_RELOAD, "GoingForCannons"); //Switch to cannons.
		/*"####" A 0 A_JumpIf(!invoker.HandCast && !CountInv("GCCantFire") && !invoker.WeapSwitch &&
							GetPlayerInput(INPUT_BUTTONS) & (BT_USE) && A_JumpIfTargetInLOS("Null",0,0,100) &&
							(CheckClass("PopBarrel", AAPTR_PLAYER_GETTARGET) ||
							CheckClass("PodZwei", AAPTR_PLAYER_GETTARGET)), "GoingToGrab");*/ //Added universal method for that.
		Loop;
		
	GoingForCrack:
		CYCK A 0 A_JumpIfInventory("PowerSuitToken",1,5);
		SUKN A 0 A_JumpIfInventory("PowerSuitProtect",1,4);
		CYYK A 0 A_JumpIfInventory("PowerSuitDraugh",1,3);
		MNKN A 0 A_JumpIfInventory("PowerMidasMode",1,2);
		CYGK A 0;
		"####" A 0 { invoker.WeapAction++; A_Overlay(3,"null"); A_PlaySound("Melee/Crack",5); A_OverlayOffset(OverlayID(),0,0); }
		"####" ABCDDDCB 2;
		"####" A 0 { A_PlaySound("Melee/Crack",5); A_OverlayFlags(-3,PSPF_MIRROR|PSPF_FLIP,1); }
		"####" ABCDDDCB 2;
		"####" A 0 A_OverlayFlags(-3,PSPF_MIRROR|PSPF_FLIP,0);
		"####" A 0 { invoker.WeapAction--; A_Overlay(3,"LeftActive"); }
		Goto RightActive;
		
	GoingToPunch:
		"####" A 0 { invoker.WeapAction++; invoker.WeaponInUse = 1; }
	GoingToPunchStillActive:
		"####" A 0 A_Overlay(3,"LeftGoingToPunch");
		"####" A 1 A_OverlayOffset(-3,192,134,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(-3,206,148,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(-3,217,163,WOF_INTERPOLATE);
		TNT1 A 2;
		Goto Punching;
	LeftGoingToPunch:
		C1UP A 0 A_JumpIfInventory("PowerSuitProtect",1,4);
		C1YP A 0 A_JumpIfInventory("PowerSuitDraugh",1,3);
		C1MP A 0 A_JumpIfInventory("PowerMidasMode",1,2);
		C1GP A 0;
		"####" A 0 { A_OverlayOffset(3,185,129); A_OverlayFlags(3,PSPF_MIRROR|PSPF_FLIP,1); }
		
		"####" A 1 A_OverlayOffset(3,192,134,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(3,206,148,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(3,217,163,WOF_INTERPOLATE);
		TNT1 A 2;
		Stop;
		
	Punching:
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & (BT_CROUCH), "Uppercut");
		TNT1 A 0 {
			let CurrentTarget = AimTarget();
			if(CurrentTarget && CurrentTarget.Health <= 125 && Distance3D(CurrentTarget) <= 128 &&
			   CurrentTarget.GetSpawnHealth() > 150) { Return ResolveState("Uppercut"); }
			Return State(null);
		}
		TNT1 A 0 {
			invoker.WeaponInUse = 1;
			A_PlaySound("Melee/Swing",0,0.7);
			if(!player.OnGround && GetPlayerInput(INPUT_BUTTONS) & BT_JUMP) { A_ChangeVelocity (/*Cos(Pitch) * 3*/0, 0, 2/*+ Sin(Pitch) * 3*/, CVF_RELATIVE); }
			A_Overlay(3,Null);
			if(invoker.FistsSide > 0)
			{
				invoker.FistsSide = -1;
				A_OverlayFlags(-3,PSPF_MIRROR|PSPF_FLIP,1);
			}
			else
			{
				invoker.FistsSide = 1;
				A_OverlayFlags(-3,PSPF_MIRROR|PSPF_FLIP,0);
			}
		}
		TNT1 A 0 A_Jump(256,"Punch1","Punch2","Punch3","Punch4","Punch5","Punch6","Punch7");
		
	Punch1:
		C1UP A 0 A_JumpIfInventory("PowerSuitProtect",1,4);
		C1YP A 0 A_JumpIfInventory("PowerSuitDraugh",1,3);
		C1MP A 0 A_JumpIfInventory("PowerMidasMode",1,2);
		C1GP A 0;
		"####" B 0 A_Overlay(4,"PunchRecoil");
		"####" B 1 A_OverlayOffset(-3,186,152);
		//"####" B 1 A_OverlayOffset(3,168,113,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(-3,150,81,WOF_INTERPOLATE);
		"####" B 0 {
			If(CountInv("PowerBerserkDamage"))
			{
				If(CountInv("PowerMidasMode"))
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperMidasPawnchPuff2",125,0.125); }
					Else { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperMidasPawnchPuffLeft2",125,0.125); }
					Return ResolveState(Null);
				}
				Else
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperPawnchPuff2",125,0.125); }
					Else { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperPawnchPuffLeft2",125,0.125); }
					Return ResolveState(Null);
				}
			}
			Else
			{
				If(CountInv("PowerMidasMode"))
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(12*frandom(1.0,3.0),1,0,"MidasPawnchPuff2",125); }
					Else { A_CustomPunch(12*frandom(1.0,3.0),1,0,"MidasPawnchPuffLeft2",125); }
					Return ResolveState(Null);
				}
				Else
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(12*frandom(1.0,3.0),1,0,"PawnchPuff2",125); }
					Else { A_CustomPunch(12*frandom(1.0,3.0),1,0,"PawnchPuffLeft2",125); }
					Return ResolveState(Null);
				}
			}
			Return ResolveState(Null);
		}
	  //"####" C 1 A_OverlayOffset(-3,132,56,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(-3,125,48,WOF_INTERPOLATE);
	  //"####" A 1 A_OverlayOffset(-3,121,47,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(-3,119,46,WOF_INTERPOLATE);
	  //"####" A 1 A_OverlayOffset(-3,117,48,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(-3,119,53,WOF_INTERPOLATE);
	  //"####" C 1 A_OverlayOffset(-3,123,65,WOF_INTERPOLATE);
		"####" C 1 { A_OverlayOffset(-3,134,88,WOF_INTERPOLATE); If(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK) { Return ResolveState("Punching"); } Return ResolveState(Null); }
	  //"####" B 1 { A_OverlayOffset(-3,146,113,WOF_INTERPOLATE); If(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK) { Return ResolveState("Punching"); } Return ResolveState(Null); }
		"####" B 1 { A_OverlayOffset(-3,159,135,WOF_INTERPOLATE); If(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK) { Return ResolveState("Punching"); } Return ResolveState(Null); }
	  //"####" B 1 { A_OverlayOffset(-3,171,154,WOF_INTERPOLATE); If(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK) { Return ResolveState("Punching"); } Return ResolveState(Null); }
		Goto PunchStop;
		
	Punch2:
		C2UP A 0 A_JumpIfInventory("PowerSuitProtect",1,4);
		C2YP A 0 A_JumpIfInventory("PowerSuitDraugh",1,3);
		C2MP A 0 A_JumpIfInventory("PowerMidasMode",1,2);
		C2GP A 0;
		"####" B 0 A_Overlay(4,"PunchRecoil");
		"####" B 1 A_OverlayOffset(-3,243,152);
		//"####" B 1 A_OverlayOffset(-3,206,115,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(-3,171,84,WOF_INTERPOLATE);
		"####" B 0 {
			If(CountInv("PowerBerserkDamage"))
			{
				If(CountInv("PowerMidasMode"))
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperMidasPawnchPuff",125,0.125); }
					Else { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperMidasPawnchPuffLeft",125,0.125); }
					Return ResolveState(Null);
				}
				Else
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperPawnchPuff",125,0.125); }
					Else { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperPawnchPuffLeft",125,0.125); }
					Return ResolveState(Null);
				}
			}
			Else
			{
				If(CountInv("PowerMidasMode"))
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(12*frandom(1.0,3.0),1,0,"MidasPawnchPuff",125); }
					Else { A_CustomPunch(12*frandom(1.0,3.0),1,0,"MidasPawnchPuffLeft",125); }
					Return ResolveState(Null);
				}
				Else
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(12*frandom(1.0,3.0),1,0,"PawnchPuff",125); }
					Else { A_CustomPunch(12*frandom(1.0,3.0),1,0,"PawnchPuffLeft",125); }
					Return ResolveState(Null);
				}
			}
			Return ResolveState(Null);
		}
	  //"####" B 1 A_OverlayOffset(-3,141,66,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(-3,123,65,WOF_INTERPOLATE);
	  //"####" A 1 A_OverlayOffset(-3,117,68,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(-3,106,67,WOF_INTERPOLATE);
	  //"####" A 1 A_OverlayOffset(-3,109,70,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(-3,102,73,WOF_INTERPOLATE);
	  //"####" A 1 A_OverlayOffset(-3,89,85,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(-3,74,102,WOF_INTERPOLATE);
	  //"####" C 1 { A_OverlayOffset(-3,63,123,WOF_INTERPOLATE); If(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK) { Return ResolveState("Punching"); } Return ResolveState(Null); }
		"####" C 1 { A_OverlayOffset(-3,55,138,WOF_INTERPOLATE); If(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK) { Return ResolveState("Punching"); } Return ResolveState(Null); }
	  //"####" B 1 { A_OverlayOffset(-3,47,153,WOF_INTERPOLATE); If(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK) { Return ResolveState("Punching"); } Return ResolveState(Null); }
		"####" B 1 { A_OverlayOffset(-3,47,164,WOF_INTERPOLATE); If(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK) { Return ResolveState("Punching"); } Return ResolveState(Null); }
		Goto PunchStop;
	
	Punch3: //Clawing
		"####" A 0 A_Jump(64,"Punch1","Punch2","Punch4","Punch5"); //Preference for punching.
		C3UP A 0 A_JumpIfInventory("PowerSuitProtect",1,4);
		C3YP A 0 A_JumpIfInventory("PowerSuitDraugh",1,3);
		C3MP A 0 A_JumpIfInventory("PowerMidasMode",1,2);
		C3GP A 0;
		"####" A 0 A_Overlay(4,"PunchRecoil2");
	  //"####" A 1 A_OverlayOffset(-3,297,130);
	  //"####" A 1 A_OverlayOffset(-3,258,103,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(-3,225,81);
	  //"####" A 1 A_OverlayOffset(-3,181,66,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(-3,172,53,WOF_INTERPOLATE);
		"####" A 0 {
			If(CountInv("PowerBerserkDamage"))
			{
				If(CountInv("PowerMidasMode"))
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperMidasScratchPuffRight",125,0.125); }
					Else { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperMidasScratchPuffLeft",125,0.125); }
					Return ResolveState(Null);
				}
				Else
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperScratchPuffRight",125,0.125); }
					Else { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperScratchPuffLeft",125,0.125); }
					Return ResolveState(Null);
				}
			}
			Else
			{
				If(CountInv("PowerMidasMode"))
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(12*frandom(1.0,3.0),1,0,"MidasScratchPuffRight",125); }
					Else { A_CustomPunch(12*frandom(1.0,3.0),1,0,"MidasScratchPuffLeft",125); }
					Return ResolveState(Null);
				}
				Else
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(12*frandom(1.0,3.0),1,0,"ScratchPuffRight",125); }
					Else { A_CustomPunch(12*frandom(1.0,3.0),1,0,"ScratchPuffLeft",125); }
					Return ResolveState(Null);
				}
			}
			Return ResolveState(Null);
		}
		"####" A 1 A_OverlayOffset(-3,115,63,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(-3,68,71,WOF_INTERPOLATE);
		"####" A 1 { A_OverlayOffset(-3,12,85,WOF_INTERPOLATE); If(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK) { Return ResolveState("Punching"); } Return ResolveState(Null); }
		//"####" A 1 { A_OverlayOffset(-3,-50,123,WOF_INTERPOLATE); If(GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK) { Return ResolveState("Punching"); } Return ResolveState(Null); }
		"####" A 1 { A_OverlayOffset(-3,-35,92,WOF_INTERPOLATE); If(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK) { Return ResolveState("Punching"); } Return ResolveState(Null); }
		Goto PunchStop;
		
	Punch4:
		C4UP A 0 A_JumpIfInventory("PowerSuitProtect",1,4);
		C4YP A 0 A_JumpIfInventory("PowerSuitDraugh",1,3);
		C4MP A 0 A_JumpIfInventory("PowerMidasMode",1,2);
		C4GP A 0;
		"####" B 0 A_Overlay(4,"PunchRecoil");
		"####" A 1 A_OverlayOffset(OverlayID(),187,110);
		"####" B 1 A_OverlayOffset(OverlayID(),152,83,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),123,63,WOF_INTERPOLATE);
		"####" B 0 {
			If(CountInv("PowerBerserkDamage"))
			{
				If(CountInv("PowerMidasMode"))
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperMidasPawnchPuff",125,0.125); }
					Else { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperMidasPawnchPuffLeft",125,0.125); }
					Return ResolveState(Null);
				}
				Else
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperPawnchPuff",125,0.125); }
					Else { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperPawnchPuffLeft",125,0.125); }
					Return ResolveState(Null);
				}
			}
			Else
			{
				If(CountInv("PowerMidasMode"))
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(12*frandom(1.0,3.0),1,0,"MidasPawnchPuff",125); }
					Else { A_CustomPunch(12*frandom(1.0,3.0),1,0,"MidasPawnchPuffLeft",125); }
					Return ResolveState(Null);
				}
				Else
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(12*frandom(1.0,3.0),1,0,"PawnchPuff",125); }
					Else { A_CustomPunch(12*frandom(1.0,3.0),1,0,"PawnchPuffLeft",125); }
					Return ResolveState(Null);
				}
			}
			Return ResolveState(Null);
		}
		"####" D 1 A_OverlayOffset(OverlayID(),112,63,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),119,65,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),123,63,WOF_INTERPOLATE);
		"####" B 1 { A_OverlayOffset(OverlayID(),152,83,WOF_INTERPOLATE); If(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK) { Return ResolveState("Punching"); } Return ResolveState(Null); }
		"####" A 1 { A_OverlayOffset(OverlayID(),187,110,WOF_INTERPOLATE); If(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK) { Return ResolveState("Punching"); } Return ResolveState(Null); }
		Goto PunchStop;
		
	Punch5:
		C4UP A 0 A_JumpIfInventory("PowerSuitProtect",1,4);
		C4YP A 0 A_JumpIfInventory("PowerSuitDraugh",1,3);
		C4MP A 0 A_JumpIfInventory("PowerMidasMode",1,2);
		C4GP A 0;
		"####" B 0 A_Overlay(4,"PunchRecoil");
		"####" A 1 A_OverlayOffset(OverlayID(),215,110);
		"####" B 1 A_OverlayOffset(OverlayID(),174,76,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),143,53,WOF_INTERPOLATE);
		"####" B 0 {
			If(CountInv("PowerBerserkDamage"))
			{
				If(CountInv("PowerMidasMode"))
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperMidasPawnchPuff",125,0.125); }
					Else { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperMidasPawnchPuffLeft",125,0.125); }
					Return ResolveState(Null);
				}
				Else
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperPawnchPuff",125,0.125); }
					Else { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperPawnchPuffLeft",125,0.125); }
					Return ResolveState(Null);
				}
			}
			Else
			{
				If(CountInv("PowerMidasMode"))
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(12*frandom(1.0,3.0),1,0,"MidasPawnchPuff",125); }
					Else { A_CustomPunch(12*frandom(1.0,3.0),1,0,"MidasPawnchPuffLeft",125); }
					Return ResolveState(Null);
				}
				Else
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(12*frandom(1.0,3.0),1,0,"PawnchPuff",125); }
					Else { A_CustomPunch(12*frandom(1.0,3.0),1,0,"PawnchPuffLeft",125); }
					Return ResolveState(Null);
				}
			}
			Return ResolveState(Null);
		}
		"####" C 1 A_OverlayOffset(OverlayID(),107,59,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),76,77,WOF_INTERPOLATE);
		"####" C 1 { A_OverlayOffset(OverlayID(),41,101,WOF_INTERPOLATE); If(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK) { Return ResolveState("Punching"); } Return ResolveState(Null); }
		"####" C 1 { A_OverlayOffset(OverlayID(),19,133,WOF_INTERPOLATE); If(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK) { Return ResolveState("Punching"); } Return ResolveState(Null); }
		Goto PunchStop;
	Punch6: //Clawing
		"####" A 0 A_Jump(64,"Punch1","Punch2","Punch4","Punch5"); //Preference for punching.
		C5UP A 0 A_JumpIfInventory("PowerSuitProtect",1,4);
		C5YP A 0 A_JumpIfInventory("PowerSuitDraugh",1,3);
		C5MP A 0 A_JumpIfInventory("PowerMidasMode",1,2);
		C5GP A 0;
		"####" A 0 A_Overlay(4,"PunchRecoil3");
		"####" A 1 A_OverlayOffset(OverlayID(),219,12);
		"####" A 1 A_OverlayOffset(OverlayID(),155,33,WOF_INTERPOLATE);
		"####" A 0 {
			If(CountInv("PowerBerserkDamage"))
			{
				If(CountInv("PowerMidasMode"))
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperMidasScratchPuffAltRight",125,0.125); }
					Else { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperMidasScratchPuffAltLeft",125,0.125); }
					Return ResolveState(Null);
				}
				Else
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperScratchPuffAltRight",125,0.125); }
					Else { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperScratchPuffAltLeft",125,0.125); }
					Return ResolveState(Null);
				}
			}
			Else
			{
				If(CountInv("PowerMidasMode"))
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(12*frandom(1.0,3.0),1,0,"MidasScratchPuffAltRight",125); }
					Else { A_CustomPunch(12*frandom(1.0,3.0),1,0,"MidasScratchPuffAltLeft",125); }
					Return ResolveState(Null);
				}
				Else
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(12*frandom(1.0,3.0),1,0,"ScratchPuffAltRight",125); }
					Else { A_CustomPunch(12*frandom(1.0,3.0),1,0,"ScratchPuffAltLeft",125); }
					Return ResolveState(Null);
				}
			}
			Return ResolveState(Null);
		}
		"####" A 1 A_OverlayOffset(OverlayID(),90,58,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),34,82,WOF_INTERPOLATE);
		"####" A 1 { A_OverlayOffset(OverlayID(),-24,131,WOF_INTERPOLATE); If(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK) { Return ResolveState("Punching"); } Return ResolveState(Null); }
		"####" A 1 { A_OverlayOffset(OverlayID(),-52,152,WOF_INTERPOLATE); If(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK) { Return ResolveState("Punching"); } Return ResolveState(Null); }
		Goto PunchStop;
	Punch7: //Clawing
		"####" A 0 A_Jump(64,"Punch1","Punch2","Punch4","Punch5"); //Preference for punching.
		C5UP A 0 A_JumpIfInventory("PowerSuitProtect",1,4);
		C5YP A 0 A_JumpIfInventory("PowerSuitDraugh",1,3);
		C5MP A 0 A_JumpIfInventory("PowerMidasMode",1,2);
		C5GP A 0;
		"####" A 0 A_Overlay(4,"PunchRecoil4");
		"####" C 1 A_OverlayOffset(OverlayID(),225,95);
		"####" C 1 A_OverlayOffset(OverlayID(),177,52,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),142,32,WOF_INTERPOLATE);
		"####" A 0 {
			If(CountInv("PowerBerserkDamage"))
			{
				If(CountInv("PowerMidasMode"))
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperMidasScratchPuffAltRight",125,0.125); }
					Else { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperMidasScratchPuffAltLeft",125,0.125); }
					Return ResolveState(Null);
				}
				Else
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperScratchPuffAltRight",125,0.125); }
					Else { A_CustomPunch(48*frandom(1.0,3.0),1,0,"SuperScratchPuffAltLeft",125,0.125); }
					Return ResolveState(Null);
				}
			}
			Else
			{
				If(CountInv("PowerMidasMode"))
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(12*frandom(1.0,3.0),1,0,"MidasScratchPuffAltRight",125); }
					Else { A_CustomPunch(12*frandom(1.0,3.0),1,0,"MidasScratchPuffAltLeft",125); }
					Return ResolveState(Null);
				}
				Else
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(12*frandom(1.0,3.0),1,0,"ScratchPuffAltRight",125); }
					Else { A_CustomPunch(12*frandom(1.0,3.0),1,0,"ScratchPuffAltLeft",125); }
					Return ResolveState(Null);
				}
			}
			Return ResolveState(Null);
		}
		"####" A 1 A_OverlayOffset(OverlayID(),118,54,WOF_INTERPOLATE);
		"####" A 1 { A_OverlayOffset(OverlayID(),81,96,WOF_INTERPOLATE); If(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK) { Return ResolveState("Punching"); } Return ResolveState(Null); }
		"####" A 1 { A_OverlayOffset(OverlayID(),45,149,WOF_INTERPOLATE); If(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK) { Return ResolveState("Punching"); } Return ResolveState(Null); }
		Goto PunchStop;

	PunchRecoil:
		TNT1 AAA 1 {
			A_SetPitch(Pitch-0.75 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetAngle(Angle+1.0 * invoker.FistsSide * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1;
		TNT1 AAA 1 {
			A_SetPitch(Pitch+0.75 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetAngle(Angle+1.0 * invoker.FistsSide * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		Stop;
	PunchRecoil2: //Clawing recoil
		TNT1 AAA 1 {
			A_SetPitch(Pitch-0.25 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetAngle(Angle+1.25 * invoker.FistsSide * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1;
		TNT1 AAA 1 {
			A_SetPitch(Pitch+0.25 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetAngle(Angle+1.25 * invoker.FistsSide * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		Stop;
	PunchRecoil3: //Clawing recoil
		TNT1 A 1;
		TNT1 AAAA 1 {
			A_SetPitch(Pitch+0.5 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetAngle(Angle+1.25 * invoker.FistsSide * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		Stop;
	PunchRecoil4: //Clawing recoil
		TNT1 AAA 1 {
			A_SetPitch(Pitch-1.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetAngle(Angle+1.0 * invoker.FistsSide * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 AAA 1 {
			A_SetPitch(Pitch+1.25 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetAngle(Angle+1.0 * invoker.FistsSide * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		Stop;
	PunchRecoil5: //Uppercut recoil
		TNT1 A 1 A_SetPitch(Pitch-1.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(Pitch-2.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(Pitch-3.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(Pitch-4.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		stop;
	PunchRecoil5Return:
		TNT1 A 1 A_SetPitch(Pitch+0.5 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(Pitch+1.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(Pitch+2.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(Pitch+2.5 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(Pitch+2.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(Pitch+1.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(Pitch+0.75 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(Pitch+0.25 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		stop;
		
	GoingToUppercut:
		"####" A 0 { invoker.WeapAction++; invoker.WeaponInUse = 1; A_Overlay(3,"LeftGoingToUppercut"); }
		"####" A 1 A_OverlayOffset(-3,192,134,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(-3,206,148,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(-3,217,163,WOF_INTERPOLATE);
		TNT1 A 2;
		Goto Uppercut;
	LeftGoingToUppercut:
		C1UP A 0 A_JumpIfInventory("PowerSuitProtect",1,4);
		C1YP A 0 A_JumpIfInventory("PowerSuitDraugh",1,3);
		C1MP A 0 A_JumpIfInventory("PowerMidasMode",1,2);
		C1GP A 0;
		"####" A 0 { A_OverlayOffset(3,185,129); A_OverlayFlags(3,PSPF_MIRROR|PSPF_FLIP,1); }
		
		"####" A 1 A_OverlayOffset(3,192,134,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(3,206,148,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(3,217,163,WOF_INTERPOLATE);
		TNT1 A 2;
		Stop;
	Uppercut:
		TNT1 A 0 {
			if(CountInv("PowersuitToken")) {
				A_PlaySound("Bishop/Fist",6,0.7);
				//A_Overlay(4,"PowerPunchRecoil");;
				A_AlertMonsters(128);
			} else {
				A_PlaySound("Melee/Swing",0,0.7);
			}
			A_Overlay(3,Null);
			if(invoker.FistsSide > 0)
			{
				invoker.FistsSide = -1;
				A_OverlayFlags(-3,PSPF_MIRROR|PSPF_FLIP,1);
			}
			else
			{
				invoker.FistsSide = 1;
				A_OverlayFlags(-3,PSPF_MIRROR|PSPF_FLIP,0);
			}
		}
		C6CP A 0 A_JumpIfInventory("PowerSuitToken",1,5);
		C6UP A 0 A_JumpIfInventory("PowerSuitProtect",1,4);
		C6YP A 0 A_JumpIfInventory("PowerSuitDraugh",1,3);
		C6MP A 0 A_JumpIfInventory("PowerMidasMode",1,2);
		C6GP A 0;
		"####" A 1 { A_OverlayOffset(OverlayID(),213,164); A_Overlay(4,"PunchRecoil5"); }
		//"####" A 1 A_OverlayOffset(OverlayID(),207,150,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),195,132,WOF_INTERPOLATE);
		//"####" A 1 A_OverlayOffset(OverlayID(),182,106,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),167,78,WOF_INTERPOLATE);
		//"####" A 1 A_OverlayOffset(OverlayID(),155,53,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),144,25,WOF_INTERPOLATE);
		"####" A 0 {
			If(CountInv("PowersuitToken"))
			{
				A_FireProjectile("BishopBlock",0,0,0,-10,FPF_NOAUTOAIM);
				If(CountInv("PowerBerserkDamage"))
				{
					If(CountInv("PowerMidasMode"))
					{
						A_CustomPunch(300*frandom(1.25,1.5),1,CPF_NOTURN,"SuperMidasPowerUppercutPuff",150,0.125);
						Return ResolveState(Null);
					}
					Else
					{
						A_CustomPunch(300*frandom(1.25,1.5),1,CPF_NOTURN,"SuperPowerUppercutPuff",150,0.125);
						Return ResolveState(Null);
					}
				}
				Else
				{
					If(CountInv("PowerMidasMode"))
					{
						A_CustomPunch(200*frandom(1.25,1.5),1,CPF_NOTURN,"PowerMidasUppercutPuff",150);
						Return ResolveState(Null);
					}
					Else
					{
						A_CustomPunch(200*frandom(1.25,1.5),1,CPF_NOTURN,"PowerUppercutPuff",150);
						Return ResolveState(Null);
					}
				}
			}
			
			If(CountInv("PowerBerserkDamage"))
			{
				If(CountInv("PowerMidasMode"))
				{
					A_CustomPunch(200*frandom(1.25,1.5),1,0,"SuperMidasUppercutPuff",125,0.125);
					Return ResolveState(Null);
				}
				Else
				{
					 A_CustomPunch(200*frandom(1.25,1.5),1,0,"SuperUppercutPuff",125,0.125);
					Return ResolveState(Null);
				}
			}
			Else
			{
				If(CountInv("PowerMidasMode"))
				{
					A_CustomPunch(100*frandom(1.25,1.5),1,0,"MidasUppercutPuff",125);
					Return ResolveState(Null);
				}
				Else
				{
					A_CustomPunch(100*frandom(1.25,1.5),1,0,"UppercutPuff",125);
					Return ResolveState(Null);
				}
			}
			Return ResolveState(Null);
		}
		/*"####" B 1 { A_OverlayOffset(OverlayID(),138,7,WOF_INTERPOLATE);  A_SetPitch(Pitch-1.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE); }
		"####" B 1 { A_OverlayOffset(OverlayID(),136,1,WOF_INTERPOLATE);  A_SetPitch(Pitch-0.5 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE); }
		"####" B 1 { A_OverlayOffset(OverlayID(),135,-2,WOF_INTERPOLATE); A_SetPitch(Pitch-0.25 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE); }
		"####" B 1 A_OverlayOffset(OverlayID(),134,-4,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),133,-5,WOF_INTERPOLATE);*/
		"####" B 1 { A_OverlayOffset(OverlayID(),132,-6,WOF_INTERPOLATE); Return A_JumpIf(CountInv("PunchConnected"),"UppercutConnect"); } //Peak.
	UppercutReturn:
		"####" B 1 { A_OverlayOffset(OverlayID(),133,-5,WOF_INTERPOLATE); A_Overlay(4,"PunchRecoil5Return"); A_TakeInventory("PunchConnected"); }
		"####" B 1 A_OverlayOffset(OverlayID(),134,-4,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),135,-2,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),136,1,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),138,7,WOF_INTERPOLATE);

		"####" A 1 A_OverlayOffset(OverlayID(),144,25,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),155,53,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),167,78,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),182,106,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),195,132,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),207,150,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),213,164,WOF_INTERPOLATE);
		//TNT1 A 2;
		Goto PunchStop;
	UppercutConnect:
		"####" B 0 A_QuakeEx(5,5,5,35,0,128,"",QF_RELATIVE|QF_SCALEDOWN);
		"####" BBBBBBBBBBBBBBB 1 A_OverlayOffset(OverlayID(),132 + frandom(5.0,-5.0),-6 + frandom(5.0,-5.0),WOF_INTERPOLATE);
		"####" B 6 A_OverlayOffset(OverlayID(),133,-5,WOF_INTERPOLATE);
		Goto UppercutReturn;
		
	PunchStop:
		TNT1 A 0 A_JumpIf(CountInv("PowersuitToken"),"PowerPunchStop");
		TNT1 AAAAA 1 A_JumpIf(!CountInv("GCCantFire") && Health > 0 &&  GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK, "Punching");	//Clickety click.
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK, "Punching");												//HOLD IT!
		TNT1 AAAAAAA 1 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK, "Punching");
	GrabStop:
		C1UP A 0 A_JumpIfInventory("PowerSuitProtect",1,4);
		C1YP A 0 A_JumpIfInventory("PowerSuitDraugh",1,3);
		C1MP A 0 A_JumpIfInventory("PowerMidasMode",1,2);
		C1GP A 0;
		"####" A 0 { A_OverlayFlags(-3,PSPF_MIRROR|PSPF_FLIP,0); A_Overlay(3,"LeftPunchStop"); A_OverlayOffset(-3,231,182); }
		
		"####" A 1 { A_OverlayOffset(-3,217,163,WOF_INTERPOLATE); Return A_JumpIf(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK, "GoingToPunchStillActive"); }
		"####" A 1 { A_OverlayOffset(-3,206,148,WOF_INTERPOLATE); Return A_JumpIf(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK, "GoingToPunchStillActive"); }
		"####" A 1 { A_OverlayOffset(-3,192,134,WOF_INTERPOLATE); Return A_JumpIf(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK, "GoingToPunchStillActive"); }
		
		"####" A 0 { invoker.WeapAction--; invoker.WeaponInUse = 0; A_Overlay(3,"LeftActive"); }
		Goto RightActive;
	LeftPunchStop:
		C1UP A 0 A_JumpIfInventory("PowerSuitProtect",1,4);
		C1YP A 0 A_JumpIfInventory("PowerSuitDraugh",1,3);
		C1MP A 0 A_JumpIfInventory("PowerMidasMode",1,2);
		C1GP A 0;
		"####" A 0 { A_OverlayFlags(3,PSPF_MIRROR|PSPF_FLIP,1); A_OverlayOffset(3,231,182); }
		
		"####" A 1 A_OverlayOffset(3,217,163,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(3,206,148,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(3,192,134,WOF_INTERPOLATE);
		Stop;
		
	//CAST
		
	CastHandLaunch:
		CYCH X 0 A_JumpIfInventory("PowerSuitToken",1,10);
		C1UP A 0 A_JumpIfInventory("PowerSuitProtect",1,4);
		C1YP A 0 A_JumpIfInventory("PowerSuitDraugh",1,3);
		C1MP A 0 A_JumpIfInventory("PowerMidasMode",1,2);
		C1GP A 0;
		"####" A 0 A_OverlayOffset(3,185,129);
		"####" A 1 A_OverlayOffset(3,192,134,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(3,206,148,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(3,217,163,WOF_INTERPOLATE);
		"####" A 0 A_OverlayFlags(3,PSPF_MIRROR|PSPF_FLIP,0);
		Goto CastLaunch+3; //This part is important.
		CYCH X 1 A_OverlayOffset(3,184,127,WOF_INTERPOLATE);
		CYCH X 1 A_OverlayOffset(3,203,144,WOF_INTERPOLATE);
		CYCH X 1 A_OverlayOffset(3,213,159,WOF_INTERPOLATE);
		"####" A 0 A_OverlayFlags(3,PSPF_MIRROR|PSPF_FLIP,0);
		Goto CastLaunch+3;
		
	CastHandEnd:
		TNT1 A 0 A_OverlayFlags(3,PSPF_FLIP|PSPF_MIRROR,1);
		CYCH X 0 A_JumpIfInventory("PowerSuitToken",1,9);
		C1UP A 0 A_JumpIfInventory("PowerSuitProtect",1,4);
		C1YP A 0 A_JumpIfInventory("PowerSuitDraugh",1,3);
		C1MP A 0 A_JumpIfInventory("PowerMidasMode",1,2);
		C1GP A 0;
		"####" A 0 A_OverlayOffset(3,231,182);
		"####" A 1 A_OverlayOffset(3,217,163,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(3,206,148,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(3,192,134,WOF_INTERPOLATE);
		Goto LeftActive;
		CYCH X 1 A_OverlayOffset(3,213,159);
		CYCH X 1 A_OverlayOffset(3,203,144,WOF_INTERPOLATE);
		CYCH X 1 A_OverlayOffset(3,184,127,WOF_INTERPOLATE);
		Goto LeftActive;
	
	//EXPLOSIVE PROP GRAB
	
	/*GoingToGrab:
		"####" A 0 { invoker.WeapAction++; invoker.WeaponInUse = 1; }
		"####" A 0 A_Overlay(3,"LeftGoingToGrab");
		"####" A 1 A_OverlayOffset(-3,192,134,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(-3,206,148,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(-3,217,163,WOF_INTERPOLATE);
		TNT1 A 2;
	GrabAgain:
		TNT1 A 0 A_JumpIf(CheckClass("PopBarrel", AAPTR_PLAYER_GETTARGET), "GrabBarrel");
		TNT1 A 0 A_JumpIf(CheckClass("PodZwei", AAPTR_PLAYER_GETTARGET), "GrabPod");
		Goto GrabStop;
	LeftGoingToGrab:
		C1UP A 0 A_JumpIfInventory("PowerSuitProtect",1,4);
		C1YP A 0 A_JumpIfInventory("PowerSuitDraugh",1,3);
		C1MP A 0 A_JumpIfInventory("PowerMidasMode",1,2);
		C1GP A 0;
		"####" A 0 { A_OverlayOffset(3,185,129); A_OverlayFlags(3,PSPF_MIRROR|PSPF_FLIP,1); }
		
		"####" A 1 A_OverlayOffset(3,192,134,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(3,206,148,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(3,217,163,WOF_INTERPOLATE);
		TNT1 A 2;
		Stop;
	GrabBarrel:
		"####" "#" 0 A_GiveInventory("BarrelGrabbed",1);
		Goto GrabIt;
	GrabPod:
		"####" "#" 0 A_GiveInventory("PodGrabbed",1);
		Goto GrabIt;
	GrabIt:
		"####" "#" 0 {
			A_Remove(AAPTR_PLAYER_GETTARGET,RMVF_NOMONSTERS|RMVF_MISC,"PodZwei");
			A_Remove(AAPTR_PLAYER_GETTARGET,RMVF_NOMONSTERS|RMVF_MISC,"PopBarrel");
			A_PlaySound("Melee/Swing",0,0.7);
		}
		CYCH H 0 A_JumpIf(CountInv("PowerSuitToken"),4);
		CYUH H 0 A_JumpIf(CountInv("PowerSuitProtect"),3);
		CYYH H 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		CYGH H 0;
		"####" "#" 1 A_OverlayOffset(OverlayID(),298,47);
		//"####" "#" 1 A_OverlayOffset(OverlayID(),249,38,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),181,36,WOF_INTERPOLATE);
		//"####" "#" 1 A_OverlayOffset(OverlayID(),127,41,WOF_INTERPOLATE);
		"####" "#" 0 {
			if(CountInv("BarrelGrabbed")) {
				A_PlaySound("Propane/Pick",6,0.7);
			} else {
				A_PlaySound("gumpoptome_active",6,0.7);
			}
		}
		"####" "#" 1 A_OverlayOffset(OverlayID(),82,49,WOF_INTERPOLATE);
		//"####" "#" 1 A_OverlayOffset(OverlayID(),26,59,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),-41,68,WOF_INTERPOLATE);
		//"####" "#" 1 A_OverlayOffset(OverlayID(),-89,84,WOF_INTERPOLATE);
		TNT1 A 1;
		TNT1 A 0 A_JumpIf(CountInv("BarrelGrabbed") || CountInv("PodGrabbed"), "Grabbed");
		Goto GrabStop;
	Grabbed:
		TNT1 A 1;
		TNT1 A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK), "GrabbedThrow");
		/*TNT1 A 0 A_JumpIf(!invoker.HandCast && !CountInv("GCCantFire") && !invoker.WeapSwitch &&
							GetPlayerInput(INPUT_BUTTONS) & (BT_USE) && A_JumpIfTargetInLOS("Null",0,0,100) &&
							(A_JumpIfInventory("BarrelGrabbed",0,1) || A_JumpIfInventory("PodGrabbed",0,1)) &&
							(CheckClass("PopBarrel", AAPTR_PLAYER_GETTARGET) ||
							CheckClass("PodZwei", AAPTR_PLAYER_GETTARGET)), "GrabAgain");*/
	/*	Loop;
	GrabbedThrow:
		C5CP A 0 A_JumpIfInventory("PowerSuitToken",1,5);
		C5UP A 0 A_JumpIfInventory("PowerSuitProtect",1,4);
		C5YP A 0 A_JumpIfInventory("PowerSuitDraugh",1,3);
		C5MP A 0 A_JumpIfInventory("PowerMidasMode",1,2);
		C5GP A 0;
		"####" A 0 {
			if(CountInv("PowerSuitToken")) { A_PlaySound("Bishop/Fist",6,0.7); }
			else 						   { A_PlaySound("Melee/Swing",0,0.7); }
			 A_Overlay(4,"PunchRecoil4");
			if(random(1,4) == 1) { A_PlaySound("Guncaster/Kick",2); }
		}
		"####" C 1 A_OverlayOffset(OverlayID(),225,95);
		"####" C 1 A_OverlayOffset(OverlayID(),177,52,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),142,32,WOF_INTERPOLATE);
		"####" A 0 {
			If(CountInv("BarrelGrabbed"))
			{
				A_TakeInventory("BarrelGrabbed",1);
				A_FireProjectile("PopBarrelThrown",0,0);
			}
			Else
			{
				A_TakeInventory("PodGrabbed",1);
				A_FireProjectile("PodZweiThrown",0,0);
			}
			Return ResolveState(Null);
		}
		"####" A 1 A_OverlayOffset(OverlayID(),118,54,WOF_INTERPOLATE);
		"####" A 1 { A_OverlayOffset(OverlayID(),81,96,WOF_INTERPOLATE); If(GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK) { Return ResolveState("Punching"); } Return ResolveState(Null); }
		"####" A 1 { A_OverlayOffset(OverlayID(),45,149,WOF_INTERPOLATE); If(GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK) { Return ResolveState("Punching"); } Return ResolveState(Null); }
		"####" A 0 A_JumpIf(CountInv("BarrelGrabbed") || CountInv("PodGrabbed"),"Grabbed");
		Goto PunchStop;*/
	
	//POWERSUIT

	GoingToPowerPunch:
		C1CP A 0 { invoker.WeapAction++; invoker.WeaponInUse = 1; }
	GoingToPowerPunchStillActive:
		"####" A 0 A_Overlay(3,"GoingToPowerPunchLeft");
		"####" A 1 A_OverlayOffset(-3,192,134,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(-3,206,148,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(-3,217,163,WOF_INTERPOLATE);
		TNT1 A 2;
		Goto PowerPunching;
	GoingToPowerPunchLeft:
		C1CP A 0 { A_OverlayOffset(3,185,129); A_OverlayFlags(3,PSPF_MIRROR|PSPF_FLIP,1); }
		"####" A 1 A_OverlayOffset(3,192,134,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(3,206,148,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(3,217,163,WOF_INTERPOLATE);
		TNT1 A 2;
		Stop;
	
	PowerPunching:
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & (BT_CROUCH), "Uppercut");
		TNT1 A 0 A_Jump(256,"PowerPunch1","PowerPunch2","PowerPunch3");
	PowerPunch1:
		C1CP A 0 { invoker.PowerType = 0; }
		Goto PowerPunch;
	PowerPunch2:
		C2CP A 0 { invoker.PowerType = 1; }
		Goto PowerPunch;
	PowerPunch:
		"####" A 0 {
			A_PlaySound("Bishop/Fist",6,0.7);
			A_Overlay(4,"PowerPunchRecoil");;
			A_AlertMonsters(128);
			A_Overlay(3,Null);
			if(invoker.FistsSide > 0)
			{
				invoker.FistsSide = -1;
				A_OverlayFlags(-3,PSPF_MIRROR|PSPF_FLIP,1);
			}
			else
			{
				invoker.FistsSide = 1;
				A_OverlayFlags(-3,PSPF_MIRROR|PSPF_FLIP,0);
			}
		}
	
		"####" B 1 A_OverlayOffset(-3,204,150);
		"####" B 1 A_OverlayOffset(-3,187,126,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(-3,159,89,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(-3,138,56,WOF_INTERPOLATE);
		"####" D 1 { A_OverlayOffset(-3,134,49,WOF_INTERPOLATE); }
		
		"####" A 0 {
			A_AlertMonsters(256);
			if(A_CheckFloor("Null")) { A_SpawnItemEx("PunchDustSpawner",0,0,0,0,0,0,0,SXF_CLIENTSIDE); }
			A_FireProjectile("BishopBlock",0,0,0,-10,FPF_NOAUTOAIM);
			
			//Punch 2
			If(invoker.PowerType) {
				If(CountInv("PowerBerserkDamage"))
				{
					If(CountInv("PowerMidasMode"))
					{
						If(invoker.FistsSide > 0) { A_CustomPunch(200*frandom(1.25,1.5),1,CPF_NOTURN,"SuperMidasPowerStraightRight",150,0.125); }
						Else				  { A_CustomPunch(200*frandom(1.25,1.5),1,CPF_NOTURN,"SuperMidasPowerStraightLeft",150,0.125); }
						Return ResolveState(Null);
					}
					Else
					{
						If(invoker.FistsSide > 0) { A_CustomPunch(200*frandom(1.25,1.5),1,CPF_NOTURN,"SuperPowerStraightRight",150,0.125); }
						Else				  { A_CustomPunch(200*frandom(1.25,1.5),1,CPF_NOTURN,"SuperPowerStraightLeft",150,0.125); }
						Return ResolveState(Null);
					}
				}
				Else
				{
					If(CountInv("PowerMidasMode"))
					{
						If(invoker.FistsSide > 0) { A_CustomPunch(100*frandom(1.25,1.5),1,CPF_NOTURN,"PowerMidasStraightRight",150); }
						Else 				 { A_CustomPunch(100*frandom(1.25,1.5),1,CPF_NOTURN,"PowerMidasStraightLeft",150); }
						Return ResolveState(Null);
					}
					Else
					{
						If(invoker.FistsSide > 0) { A_CustomPunch(100*frandom(1.25,1.5),1,CPF_NOTURN,"PowerStraightRight",150); }
						Else				  { A_CustomPunch(100*frandom(1.25,1.5),1,CPF_NOTURN,"PowerStraightLeft",150); }
						Return ResolveState(Null);
					}
				}
			}
			
			//Punch 1
			Else {
				If(CountInv("PowerBerserkDamage"))
				{
					If(CountInv("PowerMidasMode"))
					{
						If(invoker.FistsSide > 0) { A_CustomPunch(200*frandom(1.25,1.5),1,CPF_NOTURN,"SuperMidasPowerAlternateRight",150,0.125); }
						Else				  { A_CustomPunch(200*frandom(1.25,1.5),1,CPF_NOTURN,"SuperMidasPowerAlternateLeft",150,0.125); }
						Return ResolveState(Null);
					}
					Else
					{
						If(invoker.FistsSide > 0) { A_CustomPunch(200*frandom(1.25,1.5),1,CPF_NOTURN,"SuperPowerAlternateRight",150,0.125); }
						Else				  { A_CustomPunch(200*frandom(1.25,1.5),1,CPF_NOTURN,"SuperPowerAlternateLeft",150,0.125); }
						Return ResolveState(Null);
					}
				}
				Else
				{
					If(CountInv("PowerMidasMode"))
					{
						If(invoker.FistsSide > 0) { A_CustomPunch(100*frandom(1.25,1.5),1,CPF_NOTURN,"PowerMidasAlternateRight",150); }
						Else 				 { A_CustomPunch(100*frandom(1.25,1.5),1,CPF_NOTURN,"PowerMidasAlternateLeft",150); }
						Return ResolveState(Null);
					}
					Else
					{
						If(invoker.FistsSide > 0) { A_CustomPunch(100*frandom(1.25,1.5),1,CPF_NOTURN,"PowerAlternateRight",150); }
						Else				  { A_CustomPunch(100*frandom(1.25,1.5),1,CPF_NOTURN,"PowerAlternateLeft",150); }
						Return ResolveState(Null);
					}
				}
			}
			Return ResolveState(Null);
		}
		"####" A 1 { A_OverlayOffset(-3,131,45,WOF_INTERPOLATE); if(!CountInv("GCCantFire") && Health > 0 && CountInv("PunchConnected")) { Return ResolveState("PowerPunchHit"); } Return ResolveState(Null); }
		"####" A 1 { A_OverlayOffset(-3,130,44,WOF_INTERPOLATE); if(!CountInv("GCCantFire") && Health > 0 && CountInv("PunchConnected")) { Return ResolveState("PowerPunchHit"); } Return ResolveState(Null); }
		"####" AA 1 { A_OverlayOffset(-3,129,43,WOF_INTERPOLATE); if(!CountInv("GCCantFire") && Health > 0 && CountInv("PunchConnected")) { Return ResolveState("PowerPunchHit"); } Return ResolveState(Null); }
		Goto PowerPunchReturn;
	PowerPunchHit:
		"####" A 0 {
			Invoker.PunchCycle = random(7,12);
			A_TakeInventory("PunchConnected");
		}
	PowerPunchCycle:
		"####" A 1 {
			A_OverlayOffset(-3,130 + random(9.0,-9.0),44 + random(9.0,-9.0),WOF_INTERPOLATE);
			Invoker.PunchCycle--;
		}
		"####" A 0 A_JumpIf(Invoker.PunchCycle,"PowerPunchCycle");
	PowerPunchReturn:
		"####" A 1 { A_OverlayOffset(-3,130,44,WOF_INTERPOLATE); }
		"####" A 1 { A_OverlayOffset(-3,131,45,WOF_INTERPOLATE); }
		"####" D 1 { A_OverlayOffset(-3,134,49,WOF_INTERPOLATE); }
		"####" C 1 A_OverlayOffset(-3,138,56,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(-3,159,89,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(-3,187,126,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(-3,204,150,WOF_INTERPOLATE);
		Goto PowerPunchStop;
		
	PowerPunch3:
		"####" A 0 {
			A_PlaySound("Bishop/Fist",6,0.7);
			A_Overlay(4,"PowerPunchRecoil");;
			A_AlertMonsters(128);
			A_Overlay(3,Null);
			if(invoker.FistsSide > 0)
			{
				invoker.FistsSide = -1;
				A_OverlayFlags(-3,PSPF_MIRROR|PSPF_FLIP,1);
			}
			else
			{
				invoker.FistsSide = 1;
				A_OverlayFlags(-3,PSPF_MIRROR|PSPF_FLIP,0);
			}
		}
		C4CP A 0;
		"####" A 0 A_Overlay(4,"PunchRecoil");
		"####" A 1 A_OverlayOffset(OverlayID(),203,126);
		"####" A 1 A_OverlayOffset(OverlayID(),180,101,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),162,82,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),148,71,WOF_INTERPOLATE);
		"####" C 1 { A_OverlayOffset(OverlayID(),122,51,WOF_INTERPOLATE); }
		
		"####" A 0 {
			A_AlertMonsters(256);
			A_FireProjectile("BishopBlock",0,0,0,-10,FPF_NOAUTOAIM);
			if(A_CheckFloor("Null")) { A_SpawnItemEx("PunchDustSpawner",0,0,0,0,0,0,0,SXF_CLIENTSIDE); }

			If(CountInv("PowerBerserkDamage"))
			{
				If(CountInv("PowerMidasMode"))
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(200*frandom(1.25,1.5),1,CPF_NOTURN,"SuperMidasPowerStraightLeft",150,0.125); }
					Else				  { A_CustomPunch(200*frandom(1.25,1.5),1,CPF_NOTURN,"SuperMidasPowerStraightRight",150,0.125); }
					Return ResolveState(Null);
				}
				Else
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(200*frandom(1.25,1.5),1,CPF_NOTURN,"SuperPowerStraightLeft",150,0.125); }
					Else				  { A_CustomPunch(200*frandom(1.25,1.5),1,CPF_NOTURN,"SuperPowerStraightRight",150,0.125); }
					Return ResolveState(Null);
				}
			}
			Else
			{
				If(CountInv("PowerMidasMode"))
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(100*frandom(1.25,1.5),1,CPF_NOTURN,"PowerMidasStraightLeft",150); }
					Else 				 { A_CustomPunch(100*frandom(1.25,1.5),1,CPF_NOTURN,"PowerMidasStraightRight",150); }
					Return ResolveState(Null);
				}
				Else
				{
					If(invoker.FistsSide > 0) { A_CustomPunch(100*frandom(1.25,1.5),1,CPF_NOTURN,"PowerStraightLeft",150); }
					Else				  { A_CustomPunch(100*frandom(1.25,1.5),1,CPF_NOTURN,"PowerStraightRight",150); }
					Return ResolveState(Null);
				}
			}
			Return ResolveState(Null);
		}
		"####" C 1 { A_OverlayOffset(OverlayID(),121,50,WOF_INTERPOLATE); if(CountInv("PunchConnected")) { Return ResolveState("PowerPunchHit3"); } Return ResolveState(Null); }
		"####" C 1 { A_OverlayOffset(OverlayID(),120,49,WOF_INTERPOLATE); if(CountInv("PunchConnected")) { Return ResolveState("PowerPunchHit3"); } Return ResolveState(Null); }
		"####" D 1 { A_OverlayOffset(OverlayID(),119,48,WOF_INTERPOLATE); if(CountInv("PunchConnected")) { Return ResolveState("PowerPunchHit3"); } Return ResolveState(Null); }
		"####" D 1 { A_OverlayOffset(OverlayID(),117,47,WOF_INTERPOLATE); if(CountInv("PunchConnected")) { Return ResolveState("PowerPunchHit3"); } Return ResolveState(Null); }
		Goto PowerPunchReturn3;
	PowerPunchHit3:
		"####" D 0 {
			Invoker.PunchCycle = random(7,12);
			A_TakeInventory("PunchConnected");
		}
	PowerPunchCycle3:
		"####" D 1 {
			A_OverlayOffset(OverlayID(),119 + random(9.0,-9.0),71 + random(9.0,-9.0),WOF_INTERPOLATE);
			Invoker.PunchCycle--;
		}
		"####" A 0 A_JumpIf(Invoker.PunchCycle,"PowerPunchCycle3");
	PowerPunchReturn3:
		"####" D 1 { A_OverlayOffset(OverlayID(),120,49,WOF_INTERPOLATE); }
		"####" D 1 { A_OverlayOffset(OverlayID(),122,50,WOF_INTERPOLATE); }
		"####" D 1 { A_OverlayOffset(OverlayID(),127,53,WOF_INTERPOLATE); }
		"####" B 1 A_OverlayOffset(OverlayID(),148,71,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),166,84,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),182,95,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),201,110,WOF_INTERPOLATE);
		Goto PowerPunchStop;

	PowerPunchRecoil:
		TNT1 A 1 {
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(1.025); }
			A_SetAngle(Angle + 0.25 * invoker.FistsSide * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch - 0.5 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(1.05); }
			A_SetAngle(Angle + 0.5 * invoker.FistsSide * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch - 0.75 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(1.075); }
			A_SetAngle(Angle + 0.25 * invoker.FistsSide * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch - 1.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(1.05); }
			A_SetPitch(Pitch - 0.5 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 { if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(1.025); } }
		TNT1 A 1 {
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(1.0); }
			A_SetAngle(Angle + 0.5 * invoker.FistsSide * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch + 0.5 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			A_SetAngle(Angle + 1.0 * invoker.FistsSide * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch + 1.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			A_SetAngle(Angle + 1.0 * invoker.FistsSide * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch + 0.75 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1
		{
			A_SetAngle(Angle + 1.0 * invoker.FistsSide * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetPitch(Pitch + 0.5 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		Stop;
		
	PowerPunchStop:
		TNT1 AAAAAAAAAAAAAAA 1 A_JumpIf(GetPlayerInput(!CountInv("GCCantFire") && INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK, "PowerPunching");	//Clickety click.
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK, "GoingToUzziPunch"); //"RapidPowerStart");
		
		C1CP A 0 { A_OverlayFlags(-3,PSPF_MIRROR|PSPF_FLIP,0); A_Overlay(3,"PowerLeftPunchStop"); A_OverlayOffset(-3,231,182); }
		"####" A 1 { A_OverlayOffset(-3,217,163,WOF_INTERPOLATE); Return A_JumpIf(!CountInv("GCCantFire") && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK, "GoingToPowerPunchStillActive"); }
		"####" A 1 { A_OverlayOffset(-3,206,148,WOF_INTERPOLATE); Return A_JumpIf(!CountInv("GCCantFire") && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK, "GoingToPowerPunchStillActive"); }
		"####" A 1 { A_OverlayOffset(-3,192,134,WOF_INTERPOLATE); Return A_JumpIf(!CountInv("GCCantFire") && GetPlayerInput(INPUT_BUTTONS) & ~GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK, "GoingToPowerPunchStillActive"); }
		"####" A 0 { invoker.WeapAction--; invoker.WeaponInUse = 0; A_Overlay(3,"LeftActive"); }
		Goto RightActive;
	PowerLeftPunchStop:
		C1CP A 0 { A_OverlayFlags(3,PSPF_MIRROR|PSPF_FLIP,1); A_OverlayOffset(3,231,182); }
		"####" A 1 A_OverlayOffset(3,217,163,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(3,206,148,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(3,192,134,WOF_INTERPOLATE);
		Stop;
		
	//UZZI PUNCH/RAGING FISTS/AHHH ATATATATA/WHATEVER ELSE JRPG FAST PUNCHING ATTACK
	
	GoingToUzziPunch:
		CYCH X 0 {
			invoker.UzziCounter = 0;
			invoker.UzziCharge = 0;
			A_OverlayFlags(-3,PSPF_MIRROR|PSPF_FLIP,0);
			A_PlaySound("UzziPunch/Start",1,0.9);
			A_PlaySound("UzziPunch/Charge",5,0.8,1);
		}
		CYCH X 1 A_OverlayOffset(-3,218,153);
		CYCH X 1 A_OverlayOffset(-3,195,120,WOF_INTERPOLATE);
		CYCH X 1 A_OverlayOffset(-3,175,90,WOF_INTERPOLATE);
		CYCH X 1 A_OverlayOffset(-3,155,69,WOF_INTERPOLATE);
		CYCH X 1 A_OverlayOffset(-3,147,65,WOF_INTERPOLATE);
		CYCH X 1 A_OverlayOffset(-3,138,61,WOF_INTERPOLATE);
		CYCH X 1 A_OverlayOffset(-3,136,60,WOF_INTERPOLATE);
	UzziCharge:
		CYCH X 1 {
			A_OverlayOffset(-3,134+frandom(5.0,-5.0),59+frandom(5.0,-5.0),WOF_INTERPOLATE);
			invoker.UzziCounter++;
			if(invoker.UzziCounter >= 5 && invoker.UzziCharge < 15)
			{
				A_AlertMonsters(256);
				A_QuakeEx(2,2,2,15,0,128,"none",QF_SCALEDOWN);
				invoker.UzziCounter = 0;
				invoker.UzziCharge++;
			}
			if(invoker.UzziCharge >= 15)
			{
				A_PlaySound("UzziPunch/ChargedLoop",5,0.5,1);
				A_PlaySound("UzziPunch/Charged",6);
				A_SetBlend("Orange",0.3,15);
				Return ResolveState("UzziFullyCharged");
			}
			Return ResolveState(Null);
		}
		CYCH X 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK, "UzziCharge");
		Goto UzziPunchReleaseStart;
	UzziFullyCharged:
		CYCH X 1 A_OverlayOffset(-3,134+frandom(1.0,-1.0),59+frandom(1.0,-1.0),WOF_INTERPOLATE);
		CYCH X 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK, "UzziFullyCharged");
		Goto UzziPunchReleaseStart;
	UzziPunchReleaseStart:
		CYCH X 1 A_OverlayOffset(-3,136,60);
		CYCH X 1 A_OverlayOffset(-3,138,61,WOF_INTERPOLATE);
		CYCH X 1 A_OverlayOffset(-3,147,65,WOF_INTERPOLATE);
		CYCH X 1 A_OverlayOffset(-3,155,69,WOF_INTERPOLATE);
		CYCH X 1 A_OverlayOffset(-3,175,90,WOF_INTERPOLATE);
		CYCH X 1 A_OverlayOffset(-3,195,120,WOF_INTERPOLATE);
		CYCH X 1 A_OverlayOffset(-3,218,153,WOF_INTERPOLATE);
		TNT1 A 0 {
			A_StopSound(5);
			A_WeaponOffset(0.0, 32.0, WOF_INTERPOLATE);
			invoker.UzziCounter = 0;
			If(invoker.UzziCharge > 1)
			{
				Return ResolveState("UzziPunchRelease");
			}
			Return ResolveState(Null);
		}
		Goto UzziPunchRelease2;
	UzziPunchRelease2: //Singular, standard punch.
		C2CP A 0 {
			invoker.FistsSide = 1;
			A_PlaySound("Bishop/Fist",6,0.7);
			A_AlertMonsters(128);
			invoker.UzziCharge = 0;
			Return ResolveState("PowerPunch2");
		}	
	UzziPunchRelease:
		C2CP A 0 {
			A_PlaySound("Bishop/Fist",6,0.7);
			A_Overlay(4,"PowerPunchRecoil");
			A_AlertMonsters(128);
			invoker.FistsSide = 1;
			A_OverlayFlags(-3,PSPF_MIRROR|PSPF_FLIP,0);
		}
	UzziPunch:
		C2CP A 0 { invoker.PunchRandom = frandom(-25.0,25.0); A_OverlayFlags(-3,PSPF_FLIP|PSPF_MIRROR,1); }
		//"####" B 1 A_OverlayOffset(-3,204 + invoker.PunchRandom,150 + invoker.PunchRandom);
		//"####" B 1 A_OverlayOffset(-3,187 + invoker.PunchRandom,126 + abs(invoker.PunchRandom),WOF_INTERPOLATE));
		"####" B 1 A_OverlayOffset(-3,159 + invoker.PunchRandom,89 + abs(invoker.PunchRandom));
		"####" C 1 A_OverlayOffset(-3,138 + invoker.PunchRandom,56 + abs(invoker.PunchRandom),WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(-3,134 + invoker.PunchRandom,49 + abs(invoker.PunchRandom),WOF_INTERPOLATE);
		"####" A 0 {
			invoker.UzziCharge--;
			A_AlertMonsters(256);
			if(A_CheckFloor("Null")) { A_SpawnItemEx("PunchDustSpawner",0,0,0,0,0,0,0,SXF_CLIENTSIDE); }
			
			If(CountInv("PowerBerserkDamage"))
			{
				// A_GiveInventory("PowerSuckerKick");	// No longer necessary -Dino
				If(CountInv("PowerMidasMode"))
				{
					//A_CustomPunch((400),1,CPF_NOTURN,"SuperMidasPowerStraightLeftUzzi",150,0.125);
					A_FireProjectile("PowerPunchMidasZerkFist",frandom(4.0,-4.0),0,-6+frandom(3.0,-3.0),frandom(3.0,-3.0),0,frandom(4.0,-4.0));
					Return ResolveState(Null);
				}
				Else
				{
					//A_CustomPunch((400),1,CPF_NOTURN,"SuperPowerStraightLeftUzzi",150,0.125);
					A_FireProjectile("PowerPunchZerkFist",frandom(4.0,-4.0),0,-6+frandom(3.0,-3.0),frandom(3.0,-3.0),0,frandom(4.0,-4.0));
					Return ResolveState(Null);
				}
			}
			Else
			{
				If(CountInv("PowerMidasMode"))
				{
					//A_CustomPunch((300),1,CPF_NOTURN,"PowerMidasStraightLeftUzzi",150);
					A_FireProjectile("PowerPunchMidasFist",frandom(4.0,-4.0),0,-6+frandom(3.0,-3.0),frandom(3.0,-3.0),0,frandom(4.0,-4.0));
					Return ResolveState(Null);
				}
				Else
				{
					//A_CustomPunch((300),1,CPF_NOTURN,"PowerStraightLeftUzzi",150);
					A_FireProjectile("PowerPunchFist",frandom(4.0,-4.0),0,-6+frandom(3.0,-3.0),frandom(3.0,-3.0),0,frandom(4.0,-4.0));
					Return ResolveState(Null);
				}
			}
			Return ResolveState(Null);
		}
		"####" A 0 A_FireProjectile("BishopBlock",0,0,0,-10,FPF_NOAUTOAIM);
		"####" A 1 { A_OverlayOffset(-3,131 + invoker.PunchRandom,45 + abs(invoker.PunchRandom),WOF_INTERPOLATE); }
		//"####" A 1 { A_OverlayOffset(-3,130 + invoker.PunchRandom,44 + abs(invoker.PunchRandom),WOF_INTERPOLATE); }
		//"####" AA 1 { A_OverlayOffset(-3,129 + invoker.PunchRandom,43 + abs(invoker.PunchRandom),WOF_INTERPOLATE); }
	UzziPunchReleaseEnd:
		TNT1 A 0 A_TakeInventory("PunchConnected");
		TNT1 A 0 A_JumpIf(invoker.UzziCharge > 1, "UzziPunchRelease");
		TNT1 A 0 A_JumpIf(invoker.UzziCharge, "UzziPunchRelease2");
		Goto PowerPunchStop;
		
	//ARM CANNONS
	
	GoingForCannons:
		C1CP A 0 { invoker.WeapAction++; A_Overlay(3,"GoingForCannonsLeft"); A_PlaySound("Bishop/Mode",1,0.7); }
		C1CP A 1 A_OverlayOffset(-3,192,134,WOF_INTERPOLATE);
		C1CP A 1 A_OverlayOffset(-3,206,148,WOF_INTERPOLATE);
		C1CP A 1 A_OverlayOffset(-3,217,163,WOF_INTERPOLATE);
		TNT1 A 7;
		CYCC A 1 A_OverlayOffset(-3,246,156);
		CYCC A 1 A_OverlayOffset(-3,241,142,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(-3,227,127,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(-3,215,116,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(-3,203,109,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(-3,199,106,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(-3,194,103,WOF_INTERPOLATE);
		CYCC A 0 {
			A_SetCrosshair(59);
			invoker.PunchCannonMode = 1;
			A_OverlayOffset(-3,193,102,WOF_INTERPOLATE);
			invoker.WeapAction--;
		}
		CYCC AAAAAAAAAA 1 {
			If(!CountInv("GCCantFire") && !invoker.WeapSwitch && GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK)
			{
				Return ResolveState("GoingToShoot");
			}
			If(!CountInv("GCCantFire") && !invoker.WeapSwitch && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK)
			{
				Return ResolveState("GoingToAirstrike");
			}
			Return ResolveState(Null);
		}
		Goto RightActive;
	GoingForCannonsLeft:
		C1CP A 0 A_OverlayFlags(3,PSPF_FLIP|PSPF_MIRROR,1);
		C1CP A 1 A_OverlayOffset(3,192,134,WOF_INTERPOLATE);
		C1CP A 1 A_OverlayOffset(3,206,148,WOF_INTERPOLATE);
		C1CP A 1 A_OverlayOffset(3,217,163,WOF_INTERPOLATE);
		TNT1 A 7;
		CYCC A 1 A_OverlayOffset(3,246,156);
		CYCC A 1 A_OverlayOffset(3,241,142,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(3,227,127,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(3,215,116,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(3,203,109,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(3,199,106,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(3,194,103,WOF_INTERPOLATE);
		CYCC A 10 A_OverlayOffset(3,193,102,WOF_INTERPOLATE);
		Goto LeftActive;

	CannonRightActive:
		CYCC A 0 {
			A_Overlay(3,"CannonLeftActive");
			A_OverlayFlags(-3,PSPF_FLIP|PSPF_MIRROR,0);
			A_OverlayOffset(-3,193,102);
		}
		CYCC A 1;
		CYCC A 0 A_JumpIf(!invoker.WeapSwitch && !CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & BT_RELOAD, "GoingForFists");
		CYCC A 0 A_JumpIf(!invoker.WeapSwitch && !CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK, "GoingToAirstrike");
		CYCC A 0 A_JumpIf(!invoker.WeapSwitch && !CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK, "GoingToShoot");
		Goto  RightActive;
	CannonLeftActive:
		CYCC A 0 {
			A_OverlayFlags(3,PSPF_FLIP|PSPF_MIRROR,1);
			A_OverlayOffset(3,193,102);
		}
		CYCC A 1;
		Loop;
	
	GoingToShoot:
		CYCC B 0 A_JumpIfInventory("Mana",25,1);
		Goto RightActive;
		CYCC B 0 {
			invoker.WeapAction++;
			if(!CountInv("TibCore"))
			{
				A_FireProjectile("BishArmcanProjectile",0,0,10 * invoker.FistsSide,-10);
			}
			else
			{
				A_FireProjectile("CoreBishArmcanProjectile",0,0,10 * invoker.FistsSide,-10);
			}
			A_TakeInventory("Mana",25,TIF_NOTAKEINFINITE);
			A_Recoil(5.0);
			A_Overlay(4,"CannonRecoil");
			A_Overlay(3,"CannonFireMirror"); //Generate a flipped gun copy during firing sequence.
			A_AlertMonsters();
			A_PlaySound("Bishop/Fire",1);
			if(invoker.FistsSide > 0)
			{
				invoker.FistsSide = -1;
				A_OverlayFlags(-3,PSPF_MIRROR|PSPF_FLIP,1);
			}
			else
			{
				invoker.FistsSide = 1;
				A_OverlayFlags(-3,PSPF_MIRROR|PSPF_FLIP,0);
			}
		}
		CYCC C 0 A_JumpIfInventory("TibCore",1,2);
		CYCC B 0;
		"####" "#" 1 Bright A_OverlayOffset(-3,154,68,WOF_INTERPOLATE);
		CYCC A 1 			A_OverlayOffset(-3,213,111,WOF_INTERPOLATE);
		CYCC A 1 			A_OverlayOffset(-3,215,112,WOF_INTERPOLATE);
		CYCC A 1 			A_OverlayOffset(-3,213,111,WOF_INTERPOLATE);
		CYCC A 1 			A_OverlayOffset(-3,204,107,WOF_INTERPOLATE);
		CYCC A 1 			A_OverlayOffset(-3,197,104,WOF_INTERPOLATE);
		CYCC A 1 			A_OverlayOffset(-3,195,103,WOF_INTERPOLATE);
		CYCC A 5			A_OverlayOffset(-3,193,102,WOF_INTERPOLATE);
		CYCC A 0 { invoker.WeapAction--; }
		Goto RightActive;
	CannonFireMirror:
		CYCC A 15 {
			A_OverlayOffset(3,193,102);
			if(invoker.FistsSide > 0)
			{
				A_OverlayFlags(3,PSPF_MIRROR|PSPF_FLIP,0);
			}
			else
			{
				A_OverlayFlags(3,PSPF_MIRROR|PSPF_FLIP,1);
			}
		}
		Goto LeftActive;
	CannonRecoil:
		TNT1 A 1 {
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.96); }
			A_SetPitch(Pitch - 2.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetAngle(Angle - 2.0 * invoker.FistsSide * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.9); }
			A_SetPitch(Pitch - 1.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetAngle(Angle - 1.0 * invoker.FistsSide * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.93); }
			A_SetPitch(Pitch - 0.5 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetAngle(Angle - 0.5 * invoker.FistsSide * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.95); }
			A_SetPitch(Pitch - 0.25 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetAngle(Angle - 0.25 * invoker.FistsSide * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.96); }
			A_SetPitch(Pitch - 0.125 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetAngle(Angle - 0.125 * invoker.FistsSide * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 { if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.97); } }
		TNT1 A 1 { if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.98); } }
		TNT1 A 1 { if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.99); } }
		TNT1 A 1 { if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(1.0); } }
		Stop;
		
	GoingForFists:
		CYCC A 0 { invoker.WeapAction++; A_Overlay(3,"GoingForFistsLeft"); A_PlaySound("Bishop/Mode",1,0.7); }
		CYCC A 1 A_OverlayOffset(-3,194,103);
		CYCC A 1 A_OverlayOffset(-3,199,106,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(-3,203,109,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(-3,215,116,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(-3,227,127,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(-3,241,142,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(-3,246,156,WOF_INTERPOLATE);
		TNT1 A 7;
		C1CP A 1 A_OverlayOffset(-3,217,163,WOF_INTERPOLATE);
		C1CP A 1 A_OverlayOffset(-3,206,148,WOF_INTERPOLATE);
		C1CP A 1 A_OverlayOffset(-3,192,134,WOF_INTERPOLATE);
		C1CP A 0 {
			A_SetCrosshair(56);
			invoker.PunchCannonMode = 0;
			A_OverlayOffset(-3,185,129,WOF_INTERPOLATE);
			invoker.WeapAction--;
		}
		C1CP AAAAAAAAAA 1 {
			If(!invoker.WeapSwitch && GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK)
			{
				Return ResolveState("GoingToPowerPunch");
			}
			Return ResolveState(Null);
		}
		Goto RightActive;
	GoingForFistsLeft:
		CYCH X 0 {
			A_OverlayFlags(3,PSPF_FLIP|PSPF_MIRROR,1);
		}
		CYCC A 1 A_OverlayOffset(3,194,103);
		CYCC A 1 A_OverlayOffset(3,199,106,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(3,203,109,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(3,215,116,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(3,227,127,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(3,241,142,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(3,246,156,WOF_INTERPOLATE);
		TNT1 A 7;
		C1CP A 1 A_OverlayOffset(3,217,163,WOF_INTERPOLATE);
		C1CP A 1 A_OverlayOffset(3,206,148,WOF_INTERPOLATE);
		C1CP A 1 A_OverlayOffset(3,192,134,WOF_INTERPOLATE);
		Goto LeftActive;
		
	GoingToAirstrike:
		"####" A 0 A_JumpIf(CountInv("Mana") >= 100,1);
		Goto RightActive;
		"####" A 0 {
			A_Overlay(3,"GoingToAirstrikeLeft");
			invoker.WeapAction++;
		}
		CYCC A 1 A_OverlayOffset(-3,194,103);
		CYCC A 1 A_OverlayOffset(-3,199,106,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(-3,203,109,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(-3,215,116,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(-3,227,127,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(-3,241,142,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(-3,246,156,WOF_INTERPOLATE);
		
		C2CP B 1 A_OverlayOffset(-3,229,69);
		C2CP C 1 A_OverlayOffset(-3,207,29,WOF_INTERPOLATE);
		C2CP D 1 A_OverlayOffset(-3,190,4,WOF_INTERPOLATE);
		C2CP A 1 A_OverlayOffset(-3,185,-3,WOF_INTERPOLATE);
		C2CP A 1 A_OverlayOffset(-3,184,-4,WOF_INTERPOLATE);
		CYCR B 0 A_PlaySound("Bishop/Open",5,0.6);
		CYCR B 1 A_OverlayOffset(-3,120,-6);
		CYCR CDE 1;
		CYCR F 3;
		CYCR G 1 Bright {
			A_OverlayOffset(-3,120,-5, WOF_INTERPOLATE);
			A_Overlay(4,"AirstrikeRecoil");
			A_AlertMonsters();
			A_SetBlend("Yellow",0.2,25,"Orange");
			A_PlaySound("Bishop/MissileMain",6);
			A_PlaySound("Bishop/Missile",1,0.7);
			A_TakeInventory("Mana",100,TIF_NOTAKEINFINITE);
			A_QuakeEx(3,3,5,25,0,64,"",QF_SCALEDOWN);
			A_SpawnItemEx("AirstrikeUpwardSpawner",0,0,0,0,0,0,0,SXF_SETMASTER|SXF_TRANSFERPOINTERS);
			A_FireProjectile("AirstrikeSpawner",0,0);
		}
		CYCR H 1 Bright A_OverlayOffset(-3,120,-3,WOF_INTERPOLATE);
		CYCR I 1 Bright A_OverlayOffset(-3,120,2,WOF_INTERPOLATE);
		CYCR J 1 Bright A_OverlayOffset(-3,120,13,WOF_INTERPOLATE);
		CYCR K 1 Bright A_OverlayOffset(-3,120,23,WOF_INTERPOLATE);
		CYCR L 1 Bright A_OverlayOffset(-3,120,25,WOF_INTERPOLATE);
		CYCR M 1 Bright A_OverlayOffset(-3,120,19,WOF_INTERPOLATE);
		CYCR D 1 Bright A_OverlayOffset(-3,120,11,WOF_INTERPOLATE);
		CYCR C 1 Bright A_OverlayOffset(-3,120,3,WOF_INTERPOLATE);
		CYCR B 1 Bright A_OverlayOffset(-3,120,-2,WOF_INTERPOLATE);
		
		C2CP A 1 A_OverlayOffset(-3,184,-4);
		C2CP A 1 A_OverlayOffset(-3,185,-3,WOF_INTERPOLATE);
		C2CP D 1 A_OverlayOffset(-3,190,4,WOF_INTERPOLATE);
		C2CP C 1 A_OverlayOffset(-3,207,29,WOF_INTERPOLATE);
		C2CP B 1 A_OverlayOffset(-3,229,69,WOF_INTERPOLATE);
		
		CYCC A 1 A_OverlayOffset(-3,246,156);
		CYCC A 1 A_OverlayOffset(-3,241,142,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(-3,227,127,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(-3,215,116,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(-3,203,109,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(-3,199,106,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(-3,194,103,WOF_INTERPOLATE);
		CYCC A 0 { invoker.WeapAction--; }
		Goto RightActive;
		
	GoingToAirstrikeLeft:
		CYCC A 0 A_OverlayFlags(3,PSPF_FLIP|PSPF_MIRROR,1);
		CYCC A 1 A_OverlayOffset(3,194,103);
		CYCC A 1 A_OverlayOffset(3,199,106,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(3,203,109,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(3,215,116,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(3,227,127,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(3,241,142,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(3,246,156,WOF_INTERPOLATE);
		
		C2CP B 1 A_OverlayOffset(3,229,69);
		C2CP C 1 A_OverlayOffset(3,207,29,WOF_INTERPOLATE);
		C2CP D 1 A_OverlayOffset(3,190,4,WOF_INTERPOLATE);
		C2CP A 1 A_OverlayOffset(3,185,-3,WOF_INTERPOLATE);
		C2CP A 1 A_OverlayOffset(3,184,-4,WOF_INTERPOLATE);
		CYCR B 1 A_OverlayOffset(3,120,-6);
		CYCR CDE 1;
		CYCR F 3;
		CYCR G 1 Bright A_OverlayOffset(3,120,-5, WOF_INTERPOLATE);
		CYCR H 1 Bright A_OverlayOffset(3,120,-3,WOF_INTERPOLATE);
		CYCR I 1 Bright A_OverlayOffset(3,120,2,WOF_INTERPOLATE);
		CYCR J 1 Bright A_OverlayOffset(3,120,13,WOF_INTERPOLATE);
		CYCR K 1 Bright A_OverlayOffset(3,120,23,WOF_INTERPOLATE);
		CYCR L 1 Bright A_OverlayOffset(3,120,25,WOF_INTERPOLATE);
		CYCR M 1 Bright A_OverlayOffset(3,120,19,WOF_INTERPOLATE);
		CYCR D 1 Bright A_OverlayOffset(3,120,11,WOF_INTERPOLATE);
		CYCR C 1 Bright A_OverlayOffset(3,120,3,WOF_INTERPOLATE);
		CYCR B 1 Bright A_OverlayOffset(3,120,-2,WOF_INTERPOLATE);
		
		C2CP A 1 A_OverlayOffset(3,184,-4);
		C2CP A 1 A_OverlayOffset(3,185,-3,WOF_INTERPOLATE);
		C2CP D 1 A_OverlayOffset(3,190,4,WOF_INTERPOLATE);
		C2CP C 1 A_OverlayOffset(3,207,29,WOF_INTERPOLATE);
		C2CP B 1 A_OverlayOffset(3,229,69,WOF_INTERPOLATE);
		
		CYCC A 1 A_OverlayOffset(3,246,156);
		CYCC A 1 A_OverlayOffset(3,241,142,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(3,227,127,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(3,215,116,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(3,203,109,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(3,199,106,WOF_INTERPOLATE);
		CYCC A 1 A_OverlayOffset(3,194,103,WOF_INTERPOLATE);
		Stop;
		
	AirstrikeRecoil:
		TNT1 A 1 {
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.95); }
			A_SetPitch(Pitch + 0.5 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.9); }
			A_SetPitch(Pitch + 1.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.85); }
			A_SetPitch(Pitch + 1.5 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.9); }
			A_SetPitch(Pitch + 2.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.92); }
			A_SetPitch(Pitch + 0.25 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.93); }
			A_SetPitch(Pitch + 0.25 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.94); }
			A_SetPitch(Pitch - 1.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.95); }
			A_SetPitch(Pitch - 1.5 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.96); }
			A_SetPitch(Pitch - 1 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.97); }
			A_SetPitch(Pitch - 0.75 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.98); }
			A_SetPitch(Pitch - 0.75 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.99); }
			A_SetPitch(Pitch - 0.25 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(1.0); }
			A_SetPitch(Pitch - 0.25 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		Stop;
	}
}