#include "zscript/guns/projectile/SuperMelee.txt"

class DergfistSupremeSelected : Inventory { Default { Inventory.MaxAmount 1; } }

class DeadmakerDynamite : Inventory { Default { Inventory.MaxAmount 1; } } //Dynamite quick-toss token.
class PrismSpinLeft : Inventory { Default { Inventory.MaxAmount 360; } }

class DeadmakerBracing : PowerupGiver
{
	Default
	{
		Powerup.Duration 5;
		Powerup.Type "PowerDeadmakerBracer";
		Inventory.MaxAmount 0;
		+INVENTORY.AUTOACTIVATE
	}
}

class PowerDeadmakerBracer : PowerProtection
{
	Default
	{
		DamageFactor "Normal", 0.75;
		DamageFactor "Matriarch", 0.75;
		DamageFactor "Manuel", 0.75;
		DamageFactor "FuckRevenants", 0.75;
		DamageFactor "Bueller", 0.85;
		
		DamageFactor "Meteorfist", 0.75;
		DamageFactor "Fire", 0.75;
		DamageFactor "Acid", 0.75;
		DamageFactor "Ice", 0.75;
		DamageFactor "LightningBlue", 0.75;
		DamageFactor "Lightning", 0.75;
		DamageFactor "Annihilation", 0.75;

		DamageFactor "Tiberium", 0.75;
		DamageFactor "BlueTiberium", 0.75;
		
		DamageFactor "Breath", 0.75;
		DamageFactor "Flesh", 0.75;
		DamageFactor "Crow", 0.75;
		DamageFactor "Crow2", 0.75;
		
		DamageFactor "CloseCombat", 0.75;
		DamageFactor "Shoelaces", 0.75;
		DamageFactor "SuperCloseCombat", 0.75;
		DamageFactor "SuperShoelaces", 0.75;
		DamageFactor "SuperMidasCloseCombat", 0.75;
		DamageFactor "SuperMidasShoelaces", 0.75;
	}
}

class DergfistSupreme : GuncasterWeapon
{
    Default
    {
        Weapon.SelectionOrder 99;
        Weapon.BobRangeX 0.25;
        Weapon.BobRangeY 0.75;
        Weapon.BobSpeed 1.2;
        Weapon.BobStyle "Smooth";
		Weapon.SlotNumber 1;
		GuncasterWeapon.twoHandedWeapon TRUE;
		Tag "Knuckle sandwich Supreme";
		+WEAPON.AMMO_OPTIONAL
        +INVENTORY.UNDROPPABLE
		+WEAPON.NOALERT
		+WEAPON.CHEATNOTWEAPON
		+WEAPON.NO_AUTO_SWITCH
    }
	
	//Misc stuff.
	int NoSwitch;

	//Melee stuff.
	//int Bump, Punchside;
	int Punchside, DeadCrouched;
	
	int GattlingBuffer, GattlingCharge, GattlingToken, GattlingCounter;
	double RightLazerer, LeftLazerer, LazererSide;
	int PunchCannonMode, PunchCannonDelay;	//Armcannons mode token and delay between switching mode on and off.
	
	//Cast stuff.
	int CastTime, CastCycle;
	
	//int Loopler, Timer;
	int Timer;
	
	//Prism beams stuff.
	Gc_Prism left_prism;
	Gc_Prism right_prism;
	
	//Sprint stuff.
	//int GracePeriod;
	
	// A BFGSpray alternative that A. fires from your weapon, and B. sets the tracer of the spawned spray to the hit target.
	// Yes, I [Zhs2] am aware that firing it from the weapon won't exactly set an obituary.
	
	action void A_TracerSpray(class<Actor> spraytype = "BFGExtra", int numrays = 40, int damagecnt = 15, double ang = 90, double distance = 16*64, double vrange = 32, int defdamage = 0, int flags = 0)
	{
		int damage;
		FTranslatedLineTarget t;

		// validate parameters
		if (spraytype == null) spraytype = "BFGExtra";
		if (numrays <= 0) numrays = 40;
		if (damagecnt <= 0) damagecnt = 15;
		if (ang == 0) ang = 90.;
		if (distance <= 0) distance = 16 * 64;
		if (vrange == 0) vrange = 32.;

		// offset angles from its attack ang
		for (int i = 0; i < numrays; i++)
		{
			double an = angle - ang / 2 + ang / numrays*i;
			
			// Fires from self.
			AimLineAttack(an, distance, t, vrange);

			if (t.linetarget != null)
			{
				Actor spray = Spawn(spraytype, t.linetarget.pos + (0, 0, t.linetarget.Height / 4), ALLOW_REPLACE);

				int dmgFlags = 0;
				Name dmgType = 'BFGSplash';

				if (spray != null)
				{
					// No reliance on PUFFGETSOWNER - anything fired by the player should be owned by the player.
					spray.target = self;
					// The most important change. The linetarget is the spray's tracer, for extra effects.
					spray.tracer = t.linetarget;
					if ((spray.bMThruSpecies && GetSpecies() == t.linetarget.GetSpecies()) || 
						(!(flags & BFGF_HURTSOURCE) && self == t.linetarget)) // [XA] Don't hit oneself unless we say so.
					{
						spray.Destroy(); // [MC] Remove it because technically, the spray isn't trying to "hit" them.
						continue;
					}
					if (spray.bFoilInvul) dmgFlags |= DMG_FOILINVUL;
					if (spray.bFoilBuddha) dmgFlags |= DMG_FOILBUDDHA;
					dmgType = spray.DamageType;
				}

				if (defdamage == 0)
				{
					damage = 0;
					for (int j = 0; j < damagecnt; ++j)
						damage += Random[BFGSpray](1, 8);
				}
				else
				{
					// if this is used, damagecnt will be ignored
					damage = defdamage;
				}

				int newdam = t.linetarget.DamageMobj(self, target, damage, dmgType, dmgFlags|DMG_USEANGLE, t.angleFromSource);
				t.TraceBleed(newdam > 0 ? newdam : damage, self);
			}
		}
	}
	
	// here's a customizable railattack for you
	// it will probably malfunction when you meddle with offsets, lol
	// -dino
	Action Void GC_LaserAttack(int this_damage, double this_offset = 0, double ammo_demand = 0, color first_color = 0, color secunt_color = 0, int false_flagz = 0, double jagged_shit = 0, class<Actor> this_puff = null, double this_hor_spread = 0, double this_vert_spread = 0, double this_range = 0, int this_duration = 0, double this_sparce = 0, double this_driftspeed = 0, class<actor> this_class = null, double this_z_offset = 0, int this_spiral = 0, int this_limit = 0, double this_forward_offset = 0)
	{
		if(this_class != null) {
			// Setup everything
			// Gather player first
			let dergBoi = Guncaster(invoker.owner);
			double offset_ver = dergBoi.height + dergBoi.attackzoffset;
			vector3 this_Origin = (dergBoi.Pos.x,dergboi.pos.y,dergboi.pos.z + offset_ver);
			
			// start by setting up our sphere
			// This is just keks orienting maths, so, we gonna do the thing with
			// the effects. -Dino
			let ang		= dergBoi.angle;
			let vang	=-dergBoi.pitch;
			let sinang	= sin(ang);
			let cosang	= cos(ang);
			let sinvang	= sin(vang);
			let cosvang	= cos(vang);
			
			let forw	= ( cosvang * cosang,  cosvang * sinang,  sinvang);
			// the RITE of LEFT (for my convenience...) -Dino
			let left	= (           sinang,           -cosang,  0);
			// Hopefully this is the same as (singvang * consang, sinvang * sinang, -cosvang) -Dino
			let up		= (-sinvang * cosang, -sinvang * sinang,  cosvang);
			
			// more shit stolen from GR... -Dino
			this_Origin += 
				this_forward_offset * forw +
				this_offset * 1.6666667 * left +
				(this_z_offset - 40) * up;
			
			let this_beam = ProphetLazerHandSegment(Actor.Spawn(this_class,this_Origin));
			this_beam.master = dergBoi;
			this_beam.target = dergBoi;
			
			FLineTraceData data;
			bool success;
			
			success = LineTrace(
				angle,
				666999.666,
				pitch,
				TRF_THRUACTORS | TRF_THRUHITSCAN | TRF_THRUBLOCK | TRF_ABSPOSITION,
				this_Origin.z,
				this_Origin.x,
				this_Origin.y,
				data: data);
			
			let shoot_pos 	= data.HitLocation;
			ang			= atan2(data.hitlocation.y - this_Origin.y,data.hitlocation.x - this_Origin.x); 
			vang		= -asin((data.hitlocation.z - this_Origin.z) / data.hitlocation.Length());
				
			this_beam.A_SetAngle(ang,  SPF_INTERPOLATE);
			this_beam.A_SetPitch(vang + 90, SPF_INTERPOLATE);
				
			this_beam.A_SetScale(5.0,0.013 * data.distance);
			
			if(this_beam is "ProphetLazerHandSegment") { 
				ProphetLazerHandSegment this_spacial_beem = ProphetLazerHandSegment(this_beam);
				this_spacial_beem.terminate_position = data.hitlocation;
			}
		}
		
		// Deploy our railattack shit
		A_RailAttack(this_damage,this_offset,ammo_demand,first_color,secunt_color,false_flagz,jagged_shit,this_puff,this_hor_spread,this_vert_spread,this_range,this_duration,this_sparce,this_driftspeed);
	}
	
	States
	{
	Spawn:
		CYGM Z -1;
		Stop;
	Select:
		TNT1 A 1 ACS_NamedExecuteAlways("SbarinfoFix",0,0,1,2);
		TNT1 A 0 {
			invoker.DeadCrouched = 0;
			invoker.PunchCannonDelay = 0;
			if(!CountInv("PowerSuitToken")) { Invoker.PunchCannonMode = 0; }
			A_SetInventory("PunchConnected",0);
			A_GiveInventory("DergfistSupremeSelected",1);
			A_TakeInventory("PowerZaWarudo",1);
			A_SetCrosshair(56);
			A_Overlay(-4,"none");
			A_Overlay(3,"none");
			A_Overlay(2,"none");
			A_Overlay(-2,"none");
			A_Overlay(-3,"none");
			A_Overlay(-9,"KickActive");
		}
		TNT1 A 0 A_Raise;
		Wait;
	Deselect:
		TNT1 A 6 {
			Invoker.left_prism.End();
			Invoker.right_prism.End();
			
			A_TakeInventory("DergfistSupremeSelected",1);
			A_ZoomFactor(1.0);
			A_StopSound(5);
			if(!CountInv("PowerSuitToken")) { Invoker.PunchCannonMode = 0; }
			if(Invoker.PunchCannonMode) {
				A_SetTics(15);
				A_StartSound("Prophet/MeleeModeOff",6,0,0.5);
				A_Overlay(12,"RightDeMLRS");
				A_Overlay(-12,"LeftDeMLRS");
			}
			A_Overlay(3,"RightDown");
			A_Overlay(-3,"LeftDown");
			ACS_NamedExecuteAlways("SbarinfoFix",0,1,1,2);
		}
		TNT1 A 0 A_Lower;
		Wait;
	DeadLowered:
		TNT1 A -1;
		Stop;
		
	//State initialization.
	Ready:
		TNT1 A 3;
		TNT1 A 6 {
			A_Overlay(6,"TrueReady");
			A_Overlay(98,"ActionHandle");
			//A_Overlay(99,"ChargeFuelHandle");
			A_Overlay(100,"SprintHandle");
			if(Invoker.PunchCannonMode) {
				A_SetTics(15);
				A_StartSound("Prophet/MeleeModeOn",6,0,0.5);
				A_Overlay(12,"RightMLRS");
				A_Overlay(-12,"LeftMLRS");
			}
			A_Overlay(3,"RightReady");
			A_Overlay(-3,"LeftReady");
			Return ResolveState(Null);
		}
	Fire:
	ReadyMain:
		TNT1 A 0 A_JumpIf(invoker.noswitch,2);
		TNT1 A 1 A_WeaponReady(WRF_NOFIRE);
		Loop;
		TNT1 A 1 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
		Loop;
	
	//Sprint\Charge fuel.
	//ChargeFuelHandle:
	//	TNT1 A 0 { Guncaster(self).ChargeFuel = 425; }
	//	TNT1 A 2 { if(Guncaster(self).ChargeFuel < 425) {  Guncaster(self).ChargeFuel = Guncaster(self).ChargeFuel + random(1,2); /*A_LogInt(Guncaster(self).ChargeFuel);*/ } }
	//	Wait;
	
	//Sprint. Ravioli Ravioli Pizza fucking Pasta code. I should fix this. Somehow. Maybe in another life.
	SprintHandle:
		TNT1 A 1 {
			if(!CountInv("PowerDeadmaker") || (Health <= 0)) { Return ResolveState(Null); }
			if(Guncaster(self).ChargeCooldown) { Guncaster(self).ChargeCooldown--; Return ResolveState(Null); }
			
			if(GetPlayerInput(INPUT_BUTTONS) & BT_RELOAD && GetPlayerInput(INPUT_BUTTONS) & BT_FORWARD) { Return ResolveState("SprintMain"); }
			if(CountInv("DeadmakerCharger") && GetPlayerInput(INPUT_BUTTONS) & BT_FORWARD) { Return ResolveState("SprintMain"); }
			if(Invoker.GracePeriod && (GetPlayerInput(INPUT_BUTTONS) & BT_FORWARD) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_FORWARD)) {
				Return ResolveState("SprintMain");
			}
			if((GetPlayerInput(INPUT_BUTTONS) & BT_FORWARD) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_FORWARD)) {
				Invoker.GracePeriod = GetCvar("GC_SprintTimer");
			}
			If(CountInv("DeadmakerCharger") && CountInv("PowerSuitToken")) { A_StopSound(7); if(!(GetPlayerInput(INPUT_OLDBUTTONS) & BT_JUMP)) { A_StartSound("Prophet/JetOff",8,0,0.8); } }
			A_SetInventory("DeadmakerCharger",0);
			//A_LogInt(Guncaster(self).ChargeFuel);
			if(Invoker.GracePeriod) { Invoker.GracePeriod--; }
			Return ResolveState(Null);
		}
		Loop;
	SprintMain:
		TNT1 A 1 {
			if(!Guncaster(self).ChargeCooldown && Guncaster(self).ChargeFuel > 72 && !(GetPlayerInput(INPUT_BUTTONS) & BT_CROUCH) && GetPlayerInput(INPUT_BUTTONS) & BT_FORWARD) {
				if(!(GetPlayerInput(INPUT_BUTTONS) & BT_RELOAD) && GetPlayerInput(INPUT_OLDBUTTONS) & BT_RELOAD) { A_SetInventory("DeadmakerCharger",0); if(CountInv("PowerSuitToken")) { A_StopSound(7); A_StartSound("Prophet/JetOff",7,0,0.8); } Return ResolveState(Null); }
				Invoker.GracePeriod = 0;
				if(Guncaster(self).ChargeFuel <= 75) {
					if(CountInv("PowerSuitToken")) {
						A_StopSound(7);
						A_StartSound("Prophet/JetOff",7,0,0.8);
					}
					A_SetInventory("DeadmakerCharger",0);
					Guncaster(self).ChargeCooldown = 50;
					Return ResolveState(Null);
				}
				if(Player.OnGround && !CountInv("DeadmakerCharger")) {
					A_PlaySound("Stomp/Use",7);
					if(CountInv("PowerDeadmaker") && CountInv("PowerSuitToken")) { A_StartSound("Prophet/Jet",889,0,0.8); }
					A_SetInventory("DeadmakerCharger",1);
				}
				Return A_Jump(256,1);
			} else {
				if(CountInv("PowerSuitToken")) {
					A_StopSound(7);
					A_StartSound("Prophet/JetOff",7,0,0.8);
				}
				A_SetInventory("DeadmakerCharger",0);
			}
			Return ResolveState(Null);
		}
		Goto SprintHandle;
		TNT1 A 1 {
			if(CountInv("PowerDeadmaker") && CountInv("PowerSuitToken")) {
				if(player.onground) { A_StartSound("Prophet/Glide", 7, CHANF_LOOPING, 1.0); }
				A_GiveInventory("NasaRocketGlide_Emitter",1);
			}
			if(Player.OnGround) {
				Guncaster(self).ChargeFuel = Guncaster(self).ChargeFuel - random(1,2);
				if(CountInv("PowerDeadmaker") && CountInv("PowerSuitToken")) { A_Recoil(-5.0); }
				else { A_Recoil(-3.0); }
			} else if(CountInv("DeadmakerCharger")) {
				Guncaster(self).ChargeFuel = Guncaster(self).ChargeFuel - 1;
				if(CountInv("PowerDeadmaker") && CountInv("PowerSuitToken")) { A_Recoil(-4.0); }
				else { A_Recoil(-2.0); }
			}
		}
		Goto SprintHandle;
		
	//What says on the tin.
	ActionHandle:
		TNT1 A 1 {
			If(Invoker.PunchCannonDelay) { Invoker.PunchCannonDelay--; }
			If(CountInv("GCLedgeGrabbed") && !CountInv("BarrelGrabbed") &&
			  !CountInv("BarrelGrabbed2") && !CountInv("PodGrabbed")) { Return ResolveState("LedgeGrabHandle"); }
			//If(CountInv("DraughsuitActivateWeapon")) { Return ResolveState("DraughsuitActivateHandle"); }
			//If(CountInv("DraughsuitDeactivateWeapon")) { Return ResolveState("DraughsuitDeactivateHandle"); }
			If(CountInv("DeadmakerDeactivateWeapon")) { Return ResolveState("DeadmakerDeactivateHandle"); }
			Return ResolveState(Null);
		}
		Loop;
		
	//Ledge grab.
	LedgeGrabHandle:
		TNT1 A 13 { A_Overlay(6,"LedgeGrabbing"); invoker.NoSwitch = 1; }
		Goto ActionHandle;
	LedgeGrabbing:
		TNT1 A 4 {
			Invoker.left_prism.End();
			Invoker.right_prism.End();
			
			A_StopSound(5);
			A_TakeInventory("PowerZaWarudo",1);
			if(CountInv("SheepActive")) {
				A_TakeInventory("SheepActive",1);
				A_PlaySound("Sheepshield/Launch",6);
			}
			A_PlaySound("Guncaster/Climb",4,0.9);
			if(CountInv("PowerSuitToken")) { A_StartSound("Prophet/Woosh",6,0,0.8); }
			A_Overlay(3,"LedgeGrab");
			A_Overlay(-3,"LedgeGrab");
			A_OverlayFlags(-3,PSPF_FLIP|PSPF_MIRROR,1);
			A_SpawnItemEx("ClimbPuffSpawner",-2,16,24);
			A_SpawnItemEx("ClimbPuffSpawnerLeft",-2,-16,24);
		}
	ReadyHangman:
		TNT1 A 1 A_JumpIf(!CountInv("GCLiftGrabbed"),1);
		Loop;
		TNT1 A 0 SetPlayerProperty(0,0,2);
		TNT1 AAAAAAAA 1 A_TakeInventory("GCLedgeGrabbed",1);
		Goto ReturnTheSlab;
		
	LedgeGrab:
		OCLW A 0 A_JumpIf(CountInv("PowerDeadmaker") && CountInv("PowerSuitToken"),3);
		DCLW A 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW A 0;
		"####" B 1 A_OverlayOffset(OverlayID(),176,90);
		"####" B 1 A_OverlayOffset(OverlayID(),163,61,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),168,64);
		"####" C 1 A_OverlayOffset(OverlayID(),169,69,WOF_INTERPOLATE);
	LedgeHangman:
		"####" C 1 { A_OverlayOffset(OverlayID(),173,84,WOF_INTERPOLATE); Return A_JumpIf(!CountInv("GCLiftGrabbed"),1); }
		Loop;
		"####" D 1 A_OverlayOffset(OverlayID(),181,110);
		"####" D 1 A_OverlayOffset(OverlayID(),184,134,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),195,164,WOF_INTERPOLATE);
		Stop;
		
	//Draughsuit activation.
	DraughsuitActivateHandle:
		TNT1 A 74 {
			A_Overlay(6,"DraughsuitActivate");
			invoker.NoSwitch = 1;
			
			Invoker.left_prism.End();
			Invoker.right_prism.End();
			
		}
		Goto ActionHandle;
	DraughsuitActivate:
		TNT1 A 6 {
			A_Overlay(3,"RightDown");
			A_Overlay(-3,"LeftDown");
		}
		TNT1 A 38 {
			A_TakeInventory("PowerZaWarudo",1);
			A_Overlay(3,"DraughActivateHand");
			A_Overlay(-3,"DraughActivateHand");
			A_OverlayFlags(-3,PSPF_FLIP|PSPF_MIRROR,1);
			A_QuakeEx(3,3,3,60,0,512,"none",QF_SCALEDOWN);
			A_SetBlend("Black",0.8,80);
			A_SpawnItemEx("IronblastRelease",0,0,0,0,0,0,0,SXF_CLIENTSIDE);
			A_PlaySound("Ironspirit/Spawn",5);
		}
		TNT1 A 25 {
			if(!CountInv("PowerSuitDraugh"))
			{
				A_SpawnItemEx("DraughsuitAura",0,0,0,0,0,0,0,SXF_SETMASTER|SXF_NOCHECKPOSITION);
			}
			A_GiveInventory("DraughsuitPower");
			A_GiveInventory("DraughCounter",1);
		}
		TNT1 A 0 {
			A_TakeInventory("DraughsuitActivateWeapon",1);
		}
		Goto ReturnTheSlab;
	DraughActivateHand:	
		NCLW F 1 A_OverlayOffset(OverlayID(),269,156);
		NCLW F 1 A_OverlayOffset(OverlayID(),252,134,WOF_INTERPOLATE);
		NCLW F 1 A_OverlayOffset(OverlayID(),230,106,WOF_INTERPOLATE);
		NCLW F 1 A_OverlayOffset(OverlayID(),218,86,WOF_INTERPOLATE);
		NCLW F 1 A_OverlayOffset(OverlayID(),207,71,WOF_INTERPOLATE);
		NCLW F 1 A_OverlayOffset(OverlayID(),199,59,WOF_INTERPOLATE);
		NCLW F 1 A_OverlayOffset(OverlayID(),191,49,WOF_INTERPOLATE);
		NCLW F 1 A_OverlayOffset(OverlayID(),185,42,WOF_INTERPOLATE);
		NCLW F 1 A_OverlayOffset(OverlayID(),182,39,WOF_INTERPOLATE);
		NCLW F 1 A_OverlayOffset(OverlayID(),181,38,WOF_INTERPOLATE);
		NCLW F 8 A_OverlayOffset(OverlayID(),180,37,WOF_INTERPOLATE);
		NDRK ABCDEFGHIJ 2;
		DCLW F 16;
		DCLW F 1 A_OverlayOffset(OverlayID(),182,38,WOF_INTERPOLATE);
		DCLW F 1 A_OverlayOffset(OverlayID(),188,44,WOF_INTERPOLATE);
		DCLW F 1 A_OverlayOffset(OverlayID(),198,56,WOF_INTERPOLATE);
		DCLW F 1 A_OverlayOffset(OverlayID(),209,71,WOF_INTERPOLATE);
		DCLW F 1 A_OverlayOffset(OverlayID(),221,90,WOF_INTERPOLATE);
		DCLW F 1 A_OverlayOffset(OverlayID(),233,108,WOF_INTERPOLATE);
		DCLW F 1 A_OverlayOffset(OverlayID(),247,133,WOF_INTERPOLATE);
		DCLW F 1 A_OverlayOffset(OverlayID(),257,149,WOF_INTERPOLATE);
		DCLW F 1 A_OverlayOffset(OverlayID(),267,161,WOF_INTERPOLATE);
		Stop;
		
	//Draughsuit deactivation.
	DraughsuitDeactivateHandle:
		TNT1 A 74 {
			A_Overlay(6,"DraughsuitDeactivate");
			invoker.NoSwitch = 1;
			
			Invoker.left_prism.End();
			Invoker.right_prism.End();
		}
		Goto ActionHandle;
	DraughsuitDeactivate:
		TNT1 A 6 {
			A_Overlay(3,"RightDown");
			A_Overlay(-3,"LeftDown");
		}
		TNT1 A 38 {
			A_TakeInventory("PowerZaWarudo",1);
			A_Overlay(3,"DraughDeactivateHand");
			A_Overlay(-3,"DraughDeactivateHand");
			A_OverlayFlags(-3,PSPF_FLIP|PSPF_MIRROR,1);
			A_QuakeEx(3,3,3,60,0,512,"none",QF_SCALEDOWN);
			A_SetBlend("Black",0.8,80);
			A_SpawnItemEx("IronblastRelease",0,0,0,0,0,0,0,SXF_CLIENTSIDE);
			A_PlaySound("Ironspirit/Release",5);
		}
		TNT1 A 25 {
			A_TakeInventory("DraughCounter",1);
			A_TakeInventory("PowerSuitDraugh");
			A_GiveInventory("DraughTome");
		}
		TNT1 A 0 {
			A_TakeInventory("DraughsuitDeactivateWeapon",1);
		}
		Goto ReturnTheSlab;
	DraughDeactivateHand:	
		DCLW F 1 A_OverlayOffset(OverlayID(),269,156);
		DCLW F 1 A_OverlayOffset(OverlayID(),252,134,WOF_INTERPOLATE);
		DCLW F 1 A_OverlayOffset(OverlayID(),230,106,WOF_INTERPOLATE);
		DCLW F 1 A_OverlayOffset(OverlayID(),218,86,WOF_INTERPOLATE);
		DCLW F 1 A_OverlayOffset(OverlayID(),207,71,WOF_INTERPOLATE);
		DCLW F 1 A_OverlayOffset(OverlayID(),199,59,WOF_INTERPOLATE);
		DCLW F 1 A_OverlayOffset(OverlayID(),191,49,WOF_INTERPOLATE);
		DCLW F 1 A_OverlayOffset(OverlayID(),185,42,WOF_INTERPOLATE);
		DCLW F 1 A_OverlayOffset(OverlayID(),182,39,WOF_INTERPOLATE);
		DCLW F 1 A_OverlayOffset(OverlayID(),181,38,WOF_INTERPOLATE);
		DCLW F 8 A_OverlayOffset(OverlayID(),180,37,WOF_INTERPOLATE);
		NDRK JIHGFEDCBA 2;
		NCLW F 16;
		NCLW F 1 A_OverlayOffset(OverlayID(),182,38,WOF_INTERPOLATE);
		NCLW F 1 A_OverlayOffset(OverlayID(),188,44,WOF_INTERPOLATE);
		NCLW F 1 A_OverlayOffset(OverlayID(),198,56,WOF_INTERPOLATE);
		NCLW F 1 A_OverlayOffset(OverlayID(),209,71,WOF_INTERPOLATE);
		NCLW F 1 A_OverlayOffset(OverlayID(),221,90,WOF_INTERPOLATE);
		NCLW F 1 A_OverlayOffset(OverlayID(),233,108,WOF_INTERPOLATE);
		NCLW F 1 A_OverlayOffset(OverlayID(),247,133,WOF_INTERPOLATE);
		NCLW F 1 A_OverlayOffset(OverlayID(),257,149,WOF_INTERPOLATE);
		NCLW F 1 A_OverlayOffset(OverlayID(),267,161,WOF_INTERPOLATE);
		Stop;
	
	//Deadmaker deactivation.
	DeadmakerDeactivateHandle:
		TNT1 A 0 {
			A_StopSound(5);
			A_TakeInventory("PowerZaWarudo",1);
			A_TakeInventory("PowerDeadmaker");
			A_SelectWeapon("DeadmakerDeactivateWeapon");
		}
		Stop;

	//True ready.
	ReturnTheSlab:
		TNT1 A 6 {
			A_Overlay(3,"RightReady");
			A_Overlay(-3,"LeftReady");
		}
	TrueReady:
		TNT1 A 0 { invoker.NoSwitch = 0; }
		TNT1 A 0 A_JumpIf(Invoker.PunchCannonMode,"AltModeReady");
		//Physical attacks.
		TNT1 A 0 A_JumpIf(Health <= 0,"ReturnTheSlab");
		TNT1 A 1 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && (GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && (GetPlayerInput(INPUT_BUTTONS) & BT_CROUCH), "StartUppercut");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK,"StartSwipe");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && Guncaster(self).ChargeFuel > 75 && CountInv("DeadmakerCharger") /*&& Pos.Z <= FloorZ + 96.0*/ && (GetPlayerInput(INPUT_BUTTONS) & BT_RELOAD) && (GetPlayerInput(INPUT_BUTTONS) & BT_FORWARD) && !(GetPlayerInput(INPUT_BUTTONS) & BT_CROUCH),"StartCharge");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && (GetPlayerInput(INPUT_BUTTONS) & BT_RELOAD) && (!(GetPlayerInput(INPUT_BUTTONS) & BT_FORWARD) || !player.onground) && !Invoker.PunchCannonDelay && CountInv("PowerSuitToken"),"StartAltMode");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && (GetPlayerInput(INPUT_BUTTONS) & BT_RELOAD) && !(GetPlayerInput(INPUT_BUTTONS) & BT_FORWARD)  && !CountInv("PowerSuitToken"),"StartFistbump");
		//TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && && !CountInv("DynamiteTossCounter") && CountInv("TNTAmmo"),"StartDynamite");
		
		//Magic attacks.
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 50 : 100) && CountInv("FirebreathActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"StartFirebreath");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 																&& CountInv("FirebreathActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"StartFirebreathMinor");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 15 : 30) && CountInv("CrowsActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"StartCrowSwarm");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 13 : 25) && CountInv("BreathActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"StartScourgeBreath");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 13 : 25) && CountInv("SkullfireActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"StartMeteorShower");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 40 : 80) && CountInv("ApocalypseActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"StartApocalypse");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 5 : 10) && CountInv("ChillgraspActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"StartChillgrasp");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 40 : 80) && CountInv("ThunderActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"StartThunderstruck");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 10 : 20) && CountInv("ThreadcutterActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"StartThreadcutter");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 30 : 60) && CountInv("FlamewaveActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"StartFlamewave");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 40 : 80) && CountInv("AnnihilationActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"StartAnnihilation");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 20 : 40) && CountInv("PrismActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"StartPrism");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 30 : 50) && CountInv("SheepshieldActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"StartSheepshield");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 8 : 15) && CountInv("DarkpathActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"StartDarkpath");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 13 : 25) && CountInv("SpiritcannonActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"StartSpiritcannon");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 35 : 60) && CountInv("MeteorfistActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"StartMeteorfist");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 15 : 30) && CountInv("SkypunchActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"StartSkypunch");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 15 : 30) && CountInv("GumpopActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"StartGumpop");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 15 : 30) && CountInv("CorpseActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"StartCorpseblast");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 20 : 40) && CountInv("HammersmiteActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"StartHammersmite");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 20 : 40) && CountInv("FrostbiteActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"StartFrostbite");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 35 : 70) && CountInv("DragonshoutActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"StartDragonshout");
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 35 : 70) && CountInv("SigilActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"StartSigil");
		
		//BARRELS! I KNEW IT!
		TNT1 A 1 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_USE) && A_JumpIfTargetInLOS("Null",0,0,148) && !CountInv("GCCantFire") && Health > 0 &&
						 (AimTarget() is "PopBarrel" ||
						  AimTarget() is "PopBarrel2" ||
						 AimTarget() is "PodZwei"),"Grabbag");
		Loop;
	LeftReady:
		TNT1 A 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
	RightReady:
		OCLW A 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW A 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW A 0;
		"####" A 1 A_OverlayOffset(OverlayID(),213,165);
		"####" A 1 A_OverlayOffset(OverlayID(),203,144,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),190,127,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),210,106);
		"####" C 1 A_OverlayOffset(OverlayID(),199,99,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),190,96,WOF_INTERPOLATE);
		"####" C 0 {
			If(OverlayID() == 3  && Invoker.PunchCannonMode) { Return ResolveState("RightAlt"); }
			If(OverlayID() == -3 && Invoker.PunchCannonMode) { Return ResolveState("LeftAlt"); }
			Return A_JumpIf(OverlayID() == -3,"LeftMain");
		}
	RightMain:
		NCLW A 0 A_JumpIf(Invoker.PunchCannonMode,"RightAltMain");
		OCLW C 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW C 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW C 0;
		"####" C 1 A_OverlayOffset(OverlayID(),190,96,WOF_INTERPOLATE);
		Loop;
	LeftMain:
		NCLW A 0 A_JumpIf(Invoker.PunchCannonMode,"LeftAltMain");
		OCLW C 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW C 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW C 0;
		"####" C 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
		"####" C 1 A_OverlayOffset(OverlayID(),190,96,WOF_INTERPOLATE);
		Wait;
		
	//End of the Line.
	EndOfTheLine:
		TNT1 A 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,0);
		TNT1 AAAAAAAAAA 1 {
			invoker.GC_DeadCharging = FALSE;
			invoker.WeapSwitch = 0;
			invoker.LeftHand = 0;
			invoker.NoSwitch = 0;
			invoker.Timer = 0;
			
			//Physical attacks.
			If(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK && GetPlayerInput(INPUT_BUTTONS) & BT_CROUCH) { Return ResolveState("Uppercut"); }
			if(!CountInv("GCCantFire") && Health > 0 && (GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerinput(INPUT_OLDBUTTONS) & BT_ATTACK)) { Return ResolveState("Swipe"); }
			if(!CountInv("GCCantFire") && Health > 0 && Guncaster(self).ChargeFuel > 75 && CountInv("DeadmakerCharger") /*&& Pos.Z <= FloorZ + 96.0*/ && (GetPlayerInput(INPUT_BUTTONS) & BT_RELOAD) && (GetPlayerInput(INPUT_BUTTONS) & BT_FORWARD) && !(GetPlayerInput(INPUT_BUTTONS) & BT_CROUCH)) { Return ResolveState("Charge"); }
			if(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & BT_RELOAD && !(GetPlayerInput(INPUT_BUTTONS) & BT_FORWARD)) { Return ResolveState("Fistbump"); }
			//if(!CountInv("GCCantFire") && Health > 0 && CountInv("DeadmakerDynamite") && !CountInv("DynamiteTossCounter") && CountInv("TNTAmmo")) { Return ResolveState("Dynamite"); }
			
			//Magic attacks.
			if(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 50 : 100) && CountInv("FirebreathActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("StartFirebreath2"); }
			if(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 15 : 30) && CountInv("CrowsActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("StartCrowSwarm"); }
			if(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 13 : 25) && CountInv("BreathActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("Scourgebreath"); }
			if(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 13 : 25) && CountInv("SkullfireActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("MeteorShower"); }
			if(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 40 : 80) && CountInv("ApocalypseActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("Apocalypse"); }
			if(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 5 : 10) && CountInv("ChillgraspActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("Chillgrasp"); }
			if(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 40 : 80) && CountInv("ThunderActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("Thunderstruck"); }
			if(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 10 : 20) && CountInv("ThreadcutterActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("StartThreadcutter2"); }
			if(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 30 : 60) && CountInv("FlamewaveActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("Flamewave"); }
			if(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 40 : 80) && CountInv("AnnihilationActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("StartAnnihilation2"); }
			if(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 20 : 40) && CountInv("PrismActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("StartPrism2"); }
			if(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 30 : 50) && CountInv("SheepshieldActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("StartSheepshield2"); }
			if(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 8 : 15) && CountInv("DarkpathActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("StartDarkpath2"); }
			if(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 13 : 25) && CountInv("SpiritcannonActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("StartSpiritcannon2"); }
			if(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 35 : 60) && CountInv("MeteorfistActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("Meteorfist"); }
			if(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 15 : 30) && CountInv("SkypunchActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("StartSkypunch2"); }
			if(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 15 : 30) && CountInv("GumpopActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("StartGumpop2"); }
			if(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 15 : 30) && CountInv("CorpseActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("StartCorpseblast2"); }
			if(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 20 : 40) && CountInv("HammersmiteActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("Hammersmite"); }
			if(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 20 : 40) && CountInv("FrostbiteActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("StartFrostbite2"); }
			if(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 35 : 70) && CountInv("DragonshoutActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("StartDragonshout2"); }
			if(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 35 : 70) && CountInv("SigilActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("StartSigil2"); }
			
			//BARRELS! I KNEW IT!
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_USE) && A_JumpIfTargetInLOS("Null",0,0,164) && !CountInv("GCCantFire") && Health > 0 &&
						 (AimTarget() is "PopBarrel" ||
						  AimTarget() is "PopBarrel2" ||
						  AimTarget() is "PodZwei")) { Return ResolveState("Grabbag"); }
						  
			Return ResolveState(Null);
		}
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK, "PunchCharge");
		Goto ReturnTheSlab;

	//Go for action.
	LeftDown:
		TNT1 A 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
	RightDown:
		OCLW A 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW A 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW A 0;
		"####" C 1 {
			A_OverlayOffset(OverlayID(),199,99,WOF_INTERPOLATE);
		}
		"####" B 1 A_OverlayOffset(OverlayID(),210,106,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),190,127);
		"####" A 1 A_OverlayOffset(OverlayID(),203,144,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),213,165,WOF_INTERPOLATE);
		Stop;
	
	//Charge punch.
	PunchCharge:
		TNT1 A 0 {
			invoker.NoSwitch = 1;
			if(CountInv("PowerSuitToken")) {
				//invoker.GattlingCharge = 0;
				invoker.GattlingCharge = invoker.GattlingCharge * 0.875;
				invoker.GattlingToken = 0;
				invoker.GattlingBuffer = 0;
				A_PlaySound("UzziPunch/Start",1,0.9);
				A_PlaySound("UzziPunch/Charge",5,0.8,1);
			}
			if(Invoker.Punchside) {
				Invoker.Punchside = 0;
				A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
			} else {
				Invoker.Punchside = 1;
				A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,0);
			}
		}
		OPNC A 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DPNC A 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NPNC A 0;
		"####" G 1 A_OverlayOffset(OverlayID(),249,150);
		"####" G 1 A_OverlayOffset(OverlayID(),220,126,WOF_INTERPOLATE);
		"####" G 1 A_OverlayOffset(OverlayID(),178,89,WOF_INTERPOLATE);
		"####" G 1 A_OverlayOffset(OverlayID(),162,80,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),149,75,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),138,71,WOF_INTERPOLATE);
	PunchCharging:
		"####" F 1 {
			A_SetInventory("PunchConnected",0);
			if(CountInv("PowerSuitToken")) {
				if(invoker.GattlingBuffer < 25) { invoker.GattlingBuffer++; }
				if(invoker.GattlingBuffer >= 25) { invoker.GattlingCounter++; }
				A_QuakeEx(2,2,2,15,0,128,"none",QF_SCALEDOWN);
				A_OverlayOffset(OverlayID(),134+frandom(5.50,-5.50),69+frandom(5.50,-5.50),WOF_INTERPOLATE);
				if(invoker.GattlingCounter >= 3 && invoker.GattlingCharge < 18)
				{
					A_AlertMonsters(256);
					invoker.GattlingCounter = 0;
					invoker.GattlingCharge++;
				}
				if(invoker.GattlingCharge >= 18)
				{
					A_PlaySound("UzziPunch/ChargedLoop",5,0.5,1);
					A_PlaySound("UzziPunch/Charged",6);
					A_SetBlend("Orange",0.3,15);
					Return ResolveState("PunchCharged");
				}
			} else {
				A_OverlayOffset(OverlayID(),134+frandom(0.50,-0.50),69+frandom(0.50,-0.50),WOF_INTERPOLATE);
			}
			A_GiveInventory("DeadmakerBracing",1);
			Return ResolveState(Null);
		}
		"####" F 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK,"PunchCharging");
		Goto PunchIncoming;
	PunchCharged:
		"####" F 1 A_OverlayOffset(OverlayID(),134+frandom(1.25,-1.25),69+frandom(1.25,-1.25),WOF_INTERPOLATE);
		"####" F 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK,"PunchCharged");
		Goto PunchIncoming;
	PunchIncoming:
		"####" G 1 A_OverlayOffset(OverlayID(),178,59,WOF_INTERPOLATE);
		"####" G 1 A_OverlayOffset(OverlayID(),220,96,WOF_INTERPOLATE);
		"####" G 1 A_OverlayOffset(OverlayID(),249,120,WOF_INTERPOLATE);
	ChargeToPunch:
		"####" C 0 {
			if(CountInv("PowerSuitToken")) { A_StartSound("Prophet/Woosh",6,0,0.8); A_StopSound(5); }
			A_StartSound("Deadmaker/Woosh",1);
		}
		TNT1 A 4;
	GattlingObliteration:
		TNT1 A 0 {
			if(CountInv("DeadmakerCharger")) {
				Guncaster(self).ChargeCooldown = 15;
				Guncaster(self).ChargeFuel = Guncaster(self).ChargeFuel - 75;
				A_SetInventory("PunchConnected",0);
				A_SetInventory("DeadmakerCharger",0);
				if(CountInv("PowerSuitToken")) {
					A_StopSound(7);
					A_StartSound("Prophet/JetOff",7,0,0.8);
				}
			}
			if(Invoker.Punchside) {
				Invoker.Punchside = 0;
				A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
			} else {
				Invoker.Punchside = 1;
				A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,0);
			}
		}
		//TNT1 A 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
		OPNC A 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DPNC A 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NPNC A 0;
		"####" C 1 A_OverlayOffset(OverlayID(),249,120);
		"####" C 1 A_OverlayOffset(OverlayID(),220,96,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),178,59,WOF_INTERPOLATE);
		"####" B 1 {
			A_OverlayOffset(OverlayID(),134,39,WOF_INTERPOLATE);
			if(invoker.GattlingCharge) {
				invoker.GattlingCharge--;
				A_AlertMonsters(256);
				if(A_CheckFloor("Null")) { A_SpawnItemEx("PunchDustSpawner",0,0,0,0,0,0,0,SXF_CLIENTSIDE); }
				If(CountInv("PowerMidasMode"))
				{
					//A_CustomPunch((300),1,CPF_NOTURN,"PowerMidasStraightLeftUzzi",150);
					A_FireProjectile("MechamakerPunchMidasFist",frandom(4.0,-4.0),0,frandom(3.0,-3.0),frandom(3.0,-3.0),0,frandom(4.0,-4.0));
					Return ResolveState(Null);
				}
				Else
				{
					//A_CustomPunch((300),1,CPF_NOTURN,"PowerStraightLeftUzzi",150);
					A_FireProjectile("MechamakerPunchFist",frandom(4.0,-4.0),0,frandom(3.0,-3.0),frandom(3.0,-3.0),0,frandom(4.0,-4.0));
					Return ResolveState(Null);
				}
			} else {
				if(!CountInv("PowerMidasMode") && CountInv("PowerSuitToken")) { A_CustomPunch(600*frandom(1.0,1.5),1,CPF_NOTURN,"MechamakerPunchPuff",325,0.05); }
				else if(CountInv("PowerSuitToken"))							  { A_CustomPunch(600*frandom(1.0,1.5),1,CPF_NOTURN,"MechamakerMidasPunchPuff",325,0.05); }
				else if(!CountInv("PowerMidasMode"))					 	  { A_CustomPunch(500*frandom(1.0,1.5),1,CPF_NOTURN,"DeadmakerPunchPuff",275,0.05); }
				else														  { A_CustomPunch(500*frandom(1.0,1.5),1,CPF_NOTURN,"DeadmakerMidasPunchPuff",275,0.05); }
			}
			//A_CustomPunch(0,1,CPF_NOTURN,"DeadmakerCheckPuff",265);
			Return ResolveState(Null);
		}
		"####" B 0 A_JumpIf(invoker.GattlingCharge && CountInv("PowerBerserkDamage") && GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK,"PunchCharge");
		"####" B 0 {
			If(invoker.GattlingCharge) {
				if(CountInv("PowerSuitToken")) { A_StartSound("Prophet/Woosh",6,0,0.8); A_StopSound(5); }
				A_StartSound("Deadmaker/Woosh",1,CHANF_OVERLAP);
				Return A_Jump(256,"GattlingObliteration");
			}
			Return ResolveState(Null);
		}
		"####" B 0 A_JumpIf(CountInv("PunchConnected"),1);
		Goto PunchWhiff;
		"####" B 0 {
			Invoker.Bump = 15.0;
			A_TakeInventory("PunchConnected",1);
			//if(!CountInv("PowerMidasMode")) { A_CustomPunch(500+randompick(0,25,50,75,100),1,CPF_NOTURN,"DeadmakerPunchPuff",275,0.05); }
			//else							{ A_CustomPunch(500+randompick(0,25,50,75,100),1,CPF_NOTURN,"DeadmakerMidasPunchPuff",275,0.05); }
		}
		"####" BBBBBBBBBBBBBBB 1 {
				Invoker.Bump = Invoker.Bump - 1.0;
				A_OverlayOffset(OverlayID(),134+(Invoker.Bump*random(-1,1)),39+(Invoker.Bump*random(-1,1)),WOF_INTERPOLATE);
		}
		"####" B 1 A_OverlayOffset(OverlayID(),138,41,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),149,45,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),162,50,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),178,59,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),220,96,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),249,120,WOF_INTERPOLATE);
		TNT1 A 12 {
			if(Invoker.Punchside) {
				Invoker.Punchside = 0;
				A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
			} else {
				Invoker.Punchside = 1;
				A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,0);
			}
			A_SetInventory("PunchConnected",0); // To make damn sure it resets, lol.
		}
		Goto EndOfTheLine;
	PunchWhiff:
		"####" B 1 A_OverlayOffset(OverlayID(),88,43,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),56,54,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),29,69,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),57,89,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),81,115,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),112,133,WOF_INTERPOLATE);
		TNT1 A 6 {
			if(Invoker.Punchside) {
				Invoker.Punchside = 0;
				A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
			} else {
				Invoker.Punchside = 1;
				A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,0);
			}
		}
		Goto EndOfTheLine;
	
	//Swipes.
	StartSwipe:
		TNT1 A 10 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightDown");
			A_Overlay(-3,"LeftDown");
			A_Overlay(420,"CrouchCheck"); // Smol hack to prevent confusion of going for swipe then crouching and uppercut not happening, given that 10 tick buffer can be annoying.
		}
		TNT1 A 0 A_JumpIf(invoker.DeadCrouched,"Uppercut");
		Goto Swipe;
	CrouchCheck:
		TNT1 AAAAAAAAAA 1 {
			if(GetPlayerInput(INPUT_BUTTONS) & BT_CROUCH) { invoker.DeadCrouched = 1; }
		}
		TNT1 A 0 { invoker.DeadCrouched = 0; }
		Stop;
	Swipe:
		TNT1 A 0 {
			A_SetInventory("PunchConnected",0);
			if(CountInv("PowerSuitToken")) { A_StartSound("Prophet/Move",88,0,0.9); }
			A_PlaySound("Deadmaker/Woosh",1);
			if(Invoker.Punchside) {
				Invoker.Punchside = 0;
				A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
			} else {
				Invoker.Punchside = 1;
				A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,0);
			}
		}
		TNT1 A 0 A_Jump(256,"Swipe1","Swipe2");
		
	Swipe1:
		OCLW A 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW A 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW A 0;
		"####" A 1 A_OverlayOffset(OverlayID(),299,-44);
		//"####" A 1 A_OverlayOffset(OverlayID(),240,-14,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),199,13,WOF_INTERPOLATE);
		//"####" B 1 A_OverlayOffset(OverlayID(),135,35,WOF_INTERPOLATE);
		"####" C 1 {
			A_OverlayOffset(OverlayID(),75,57,WOF_INTERPOLATE);
			if(CountInv("PowerSuitToken")) { A_CustomPunch(0,1,CPF_NOTURN,"DeadmakerCheckPuff",315); }
			else { A_CustomPunch(0,1,CPF_NOTURN,"DeadmakerCheckPuff",265); }
		}
		"####" C 0 {
			if(CountInv("PunchConnected")) {
			A_TakeInventory("PunchConnected",1);
				if(Invoker.Punchside) {
					if(!CountInv("PowerMidasMode") && CountInv("PowerSuitToken")) { A_CustomPunch(400*frandom(1.0,1.5),1,CPF_NOTURN,"MechamakerSwipePuff",325,0.05); }
					else if(CountInv("PowerSuitToken"))				    	 	  { A_CustomPunch(400*frandom(1.0,1.5),1,CPF_NOTURN,"MechamakerMidasSwipePuff",325,0.05); }
					else if(!CountInv("PowerMidasMode")) 						  { A_CustomPunch(300*frandom(1.0,1.5),1,CPF_NOTURN,"DeadmakerSwipePuff",275,0.05); }
					else 						    	 						  { A_CustomPunch(300*frandom(1.0,1.5),1,CPF_NOTURN,"DeadmakerMidasSwipePuff",275,0.05); }
				} else {
					if(!CountInv("PowerMidasMode") && CountInv("PowerSuitToken")) { A_CustomPunch(400*frandom(1.0,1.5),1,CPF_NOTURN,"MechamakerSwipePuffLeft",325,0.05); }
					else if(CountInv("PowerSuitToken"))				    	 	  { A_CustomPunch(400*frandom(1.0,1.5),1,CPF_NOTURN,"MechamakerMidasSwipePuffLeft",325,0.05); }
					else if(!CountInv("PowerMidasMode")) 						  { A_CustomPunch(300*frandom(1.0,1.5),1,CPF_NOTURN,"DeadmakerSwipePuffLeft",275,0.05); }
					else 						    	 						  { A_CustomPunch(300*frandom(1.0,1.5),1,CPF_NOTURN,"DeadmakerMidasSwipePuffLeft",275,0.05); }
				}
			} else {
				A_PlaySound("Skullfire/Launch",6);
				A_FireProjectile("DeadSkullfireProjectile",0,0);
			}
		}
		//"####" C 1 A_OverlayOffset(OverlayID(),59,84,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),-3,121,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),-33,142,WOF_INTERPOLATE);
		TNT1 A 6;
		TNT1 AA 1 {
			if((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && Health > 0 && (GetPlayerinput(INPUT_BUTTONS) & BT_CROUCH)) { Return ResolveState("Uppercut"); }
			if((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && Health > 0 && !(GetPlayerinput(INPUT_OLDBUTTONS) & BT_ATTACK)) { Return ResolveState("Swipe"); }
			Return ResolveState(Null);
		}
		Goto EndOfTheLine;
	Swipe2:
		OCLW A 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW A 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW A 0;
		"####" A 1 A_OverlayOffset(OverlayID(),252,81);
		//"####" A 1 A_OverlayOffset(OverlayID(),196,50,WOF_INTERPOLATE);
		"####" B 1 {
			A_OverlayOffset(OverlayID(),173,43,WOF_INTERPOLATE);
			if(CountInv("PowerSuitToken")) { A_CustomPunch(0,1,CPF_NOTURN,"DeadmakerCheckPuff",315); }
			else { A_CustomPunch(0,1,CPF_NOTURN,"DeadmakerCheckPuff",265); }
		}
		//"####" B 1 A_OverlayOffset(OverlayID(),116,20,WOF_INTERPOLATE);
		"####" C 0 {
			if(CountInv("PunchConnected")) {
			A_TakeInventory("PunchConnected",1);
				if(Invoker.Punchside) {
					if(!CountInv("PowerMidasMode") && CountInv("PowerSuitToken")) { A_CustomPunch(400*frandom(1.0,1.5),1,CPF_NOTURN,"MechamakerSwipePuff",325,0.05); }
					else if(CountInv("PowerSuitToken"))				    	 	  { A_CustomPunch(400*frandom(1.0,1.5),1,CPF_NOTURN,"MechamakerMidasSwipePuff",325,0.05); }
					else if(!CountInv("PowerMidasMode")) 						  { A_CustomPunch(300*frandom(1.0,1.5),1,CPF_NOTURN,"DeadmakerSwipePuff",275,0.05); }
					else 						    	 						  { A_CustomPunch(300*frandom(1.0,1.5),1,CPF_NOTURN,"DeadmakerMidasSwipePuff",275,0.05); }
				} else {
					if(!CountInv("PowerMidasMode") && CountInv("PowerSuitToken")) { A_CustomPunch(400*frandom(1.0,1.5),1,CPF_NOTURN,"MechamakerSwipePuffLeft",325,0.05); }
					else if(CountInv("PowerSuitToken"))				    	 	  { A_CustomPunch(400*frandom(1.0,1.5),1,CPF_NOTURN,"MechamakerMidasSwipePuffLeft",325,0.05); }
					else if(!CountInv("PowerMidasMode")) 						  { A_CustomPunch(300*frandom(1.0,1.5),1,CPF_NOTURN,"DeadmakerSwipePuffLeft",275,0.05); }
					else 						    	 						  { A_CustomPunch(300*frandom(1.0,1.5),1,CPF_NOTURN,"DeadmakerMidasSwipePuffLeft",275,0.05); }
				}
			} else {
				A_PlaySound("Skullfire/Launch",6);
				A_FireProjectile("DeadSkullfireProjectile",0,0);
			}
		}
		"####" C 1 A_OverlayOffset(OverlayID(),91,22,WOF_INTERPOLATE);
		//"####" C 1 A_OverlayOffset(OverlayID(),55,34,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),6,77,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),-24,104,WOF_INTERPOLATE);
		TNT1 A 6;
		TNT1 AA 1 {
			if((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && Health > 0 && (GetPlayerinput(INPUT_BUTTONS) & BT_CROUCH)) { Return ResolveState("Uppercut"); }
			if((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && Health > 0 && !(GetPlayerinput(INPUT_OLDBUTTONS) & BT_ATTACK)) { Return ResolveState("Swipe"); }
			Return ResolveState(Null);
		}
		Goto EndOfTheLine;
	
	//Charge attack.
	StartCharge:
		TNT1 A 10 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightDown");
			A_Overlay(-3,"LeftDown");
		}
	Charge:
		TNT1 A 0 {
			A_TakeInventory("PunchConnected",1); //Safety measures.
			//A_GiveInventory("DeadmakerCharger",1);
			//A_PlaySound("Stomp/Use",5);
			//A_Recoil(-10.0);
			//A_ChangeVelocity(0,0,3.0);
		}
		OPNC A 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DPNC A 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NPNC A 0;
		"####" A 1 A_OverlayOffset(OverlayID(),92,154);
		"####" A 1 A_OverlayOffset(OverlayID(),76,135,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),55,106,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),40,89,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),31,84,WOF_INTERPOLATE);
	ChargeLoop:
		"####" A 1 {
			//Guncaster(self).ChargeFuel = Guncaster(self).ChargeFuel - random(1,2);
			A_GiveInventory("DeadmakerBracing",1);
			if(CountInv("PowerSuitToken")) { A_FireProjectile("MechamakerChargeAreaAttack",0,0); }
			else 						   { A_FireProjectile("DeadmakerChargeAreaAttack",0,0); }
			A_FireProjectile("DeadmakerCheckProjectile",0,0);
			//A_Recoil(-3.0);
		}
		"####" A 0 A_JumpIf(CountInv("PunchConnected"),"ChargeConnect");
		"####" A 0 A_JumpIf(Guncaster(self).ChargeFuel > 0 && CountInv("DeadmakerCharger") /*&& Pos.Z <= FloorZ + 96.0*/ && (GetPlayerInput(INPUT_BUTTONS) & BT_RELOAD) && (GetPlayerInput(INPUT_BUTTONS) & BT_FORWARD) && !(GetPlayerInput(INPUT_BUTTONS) & BT_CROUCH),"ChargeLoop");
		Goto ChargeStop;
	ChargeConnect:
		"####" B 0 {
			Guncaster(self).ChargeFuel = Guncaster(self).ChargeFuel - 75;
			Guncaster(self).ChargeCooldown = 50;
			A_SetInventory("DeadmakerCharger",0);
			if(CountInv("PowerSuitToken")) {
				A_StopSound(7);
				A_StartSound("Prophet/JetOff",7,0,0.8);
			}
			Invoker.Bump = 15.0;
			if(!CountInv("PowerMidasMode") && CountInv("PowerSuitToken")) { A_CustomPunch(700*frandom(1.0,1.5),1,CPF_NOTURN,"MechamakerPunchPuffGuaranteed",100,0.05); }
			else if(CountInv("PowerSuitToken"))							  { A_CustomPunch(700*frandom(1.0,1.5),1,CPF_NOTURN,"MechamakerMidasPunchPuffGuaranteed",100,0.05); }
			else if(!CountInv("PowerMidasMode"))					 	  { A_CustomPunch(500*frandom(1.0,1.5),1,CPF_NOTURN,"DeadmakerPunchPuffGuaranteed",100,0.05); }
			else														  { A_CustomPunch(500*frandom(1.0,1.5),1,CPF_NOTURN,"DeadmakerMidasPunchPuffGuaranteed",100,0.05); }
		}
		"####" AAAAAAAAAAAAAAA 1 {
				Invoker.Bump = Invoker.Bump - 1.0;
				A_OverlayOffset(OverlayID(),31+(Invoker.Bump*random(-1,1)),84+(Invoker.Bump*random(-1,1)),WOF_INTERPOLATE);
		}
		"####" A 0 A_SetInventory("PunchConnected",0);
		Goto ChargeStop+2;
	ChargeStop:
		"####" A 0 {
			if(CountInv("PowerSuitToken")) {
				A_StopSound(7);
				A_StartSound("Prophet/JetOff",7,0,0.9);
			}
		}
		"####" A 1 A_OverlayOffset(OverlayID(),31,84,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),40,89,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),55,106,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),76,135,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),92,154,WOF_INTERPOLATE);
		TNT1 A 0 {
			A_SetInventory("PunchConnected",0);
			if(GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) {
				invoker.Punchside = 1;
				Return ResolveState("ChargeToPunch");
			}
			Return ResolveState(null);
		}
		TNT1 A 5;
		Goto EndOfTheLine;
	
	//Uppercut
	StartUppercut:
		TNT1 A 10 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightDown");
			A_Overlay(-3,"LeftDown");
		}
		Goto Uppercut;
	Uppercut:
		TNT1 A 0 {
			if(CountInv("PowerSuitToken")) { A_StartSound("Prophet/Woosh",6,0,0.8); }
			A_PlaySound("Deadmaker/Woosh",1);
			A_Overlay(3,Null);
			if(Invoker.Punchside) {
				Invoker.Punchside = 0;
				A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
			} else {
				Invoker.Punchside = 1;
				A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,0);
			}
		}
		C6OP A 0 A_JumpIfInventory("PowerSuitToken",1,3);
		C6DP A 0 A_JumpIfInventory("PowerSuitDraugh",1,2);
		C6NP A 0;
		"####" A 1 A_OverlayOffset(OverlayID(),213,164);
		"####" A 1 A_OverlayOffset(OverlayID(),195,132,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),167,78,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),144,25,WOF_INTERPOLATE);
		"####" A 0 {
			If(CountInv("PowerMidasMode") && CountInv("PowerSuitToken"))
			{
				A_CustomPunch(800*frandom(1.0,1.5),1,CPF_NOTURN,"MechamakerMidasUppercutPuff",325,0.05);
				Return ResolveState(Null);
			}
			Else If(CountInv("PowerSuitToken"))
			{
				A_CustomPunch(800*frandom(1.0,1.5),1,CPF_NOTURN,"MechamakerUppercutPuff",325,0.05);
				Return ResolveState(Null);
			}
			Else If(CountInv("PowerMidasMode"))
			{
				A_CustomPunch(600*frandom(1.0,1.5),1,CPF_NOTURN,"DeadmakerMidasUppercutPuff",275,0.05);
				Return ResolveState(Null);
			}
			Else
			{
				A_CustomPunch(600*frandom(1.0,1.5),1,CPF_NOTURN,"DeadmakerUppercutPuff",275,0.05);
				Return ResolveState(Null);
			}
			Return ResolveState(Null);
		}
		"####" B 1 { A_OverlayOffset(OverlayID(),132,-6,WOF_INTERPOLATE); Return A_JumpIf(CountInv("PunchConnected"),"UppercutConnect"); } //Peak.
	UppercutReturn:
		"####" B 1 { A_OverlayOffset(OverlayID(),133,-5,WOF_INTERPOLATE); A_Overlay(4,"PunchRecoil5Return"); A_TakeInventory("PunchConnected"); }
		"####" B 1 A_OverlayOffset(OverlayID(),134,-4,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),135,-2,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),136,1,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),138,7,WOF_INTERPOLATE);

		"####" A 1 A_OverlayOffset(OverlayID(),144,25,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),155,53,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),167,78,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),182,106,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),195,132,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),207,150,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),213,164,WOF_INTERPOLATE);
		TNT1 A 6;
		TNT1 AA 1 { if((GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && (GetPlayerInput(INPUT_BUTTONS) & BT_CROUCH) && Health > 0 && !(GetPlayerinput(INPUT_OLDBUTTONS) & BT_ATTACK)) { Return ResolveState("Swipe"); } Return ResolveState(Null); }
		Goto EndOfTheLine;
	UppercutConnect:
		"####" B 0 A_QuakeEx(5,5,5,35,0,128,"",QF_RELATIVE|QF_SCALEDOWN);
		"####" BBBBBBBBBBBBBBBBBBB 1 A_OverlayOffset(OverlayID(),132 + frandom(7.0,-7.0),-6 + frandom(7.0,0.0),WOF_INTERPOLATE);
		"####" B 8 A_OverlayOffset(OverlayID(),133,-5,WOF_INTERPOLATE);
		Goto UppercutReturn;
	
	//Dynamite.
	StartDynamite:
		TNT1 A 0 A_JumpIf(CountInv("DynamiteStratActive") && CountInv("Mana") < 25, "DynamiteNope");
		TNT1 A 10 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightDown");
			A_Overlay(-3,"LeftDown");
		}
	Dynamite:
		TNT1 A 0 A_JumpIf(CountInv("DynamiteStratActive") && CountInv("Mana") < 25, "DynamiteNope2");
	DynamiteThrow:
		TNT1 A 4 {
			A_Overlay(3,"TNTThrow");
			A_Overlay(-3,"none");
			if(!GetCvar("GC_NapoleonDynamite")) {
				A_GiveInventory("DynamiteTossTimer",350);
				A_GiveInventory("DynamiteTossCounter",1);
				//ACS_NamedExecuteAlways("TNT Blockade");
			}
			//A_TakeInventory("Mana",25,TIF_NOTAKEINFINITE);
			A_TakeInventory("TNTAmmo",1,TIF_NOTAKEINFINITE);
			if((GC_Gunslinger || CountInv("PowerGunzerking")) && CountInv("Mana") >= 50)
			{
				A_Overlay(-3,"TNTThrowLeft");
			}
		}
		TNT1 A 7 A_TakeInventory("DeadmakerDynamite",1);
		Goto ReturnTheSlab;
	TNTThrowLeft:
		TNT1 A 4 A_OverlayFlags(OverlayID(),PSPF_FLIP|PSPF_MIRROR,1);
	TNTThrow:
		TNT1 A 0 {
			if(CountInv("PowerSuitToken")) { A_StartSound("Prophet/Woosh",6,0,0.8); }
			A_PlaySound("Deadmaker/Woosh",1);
			A_PlaySound("Flechette/Throw",5);
		}
		OCLW A 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW A 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW A 0;
		"####" A 1 A_OverlayOffset(OverlayID(),299,-44);
		//"####" A 1 A_OverlayOffset(OverlayID(),240,-14,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),199,13,WOF_INTERPOLATE);
		//"####" B 1 A_OverlayOffset(OverlayID(),135,35,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),75,57,WOF_INTERPOLATE);
		"####" C 0 {
			if(OverlayID() == 3) {
				if(CountInv("PowerSuitToken")) { A_GiveInventory("TossPower",15); }
				A_GiveInventory("TossPower",15);
				if(!CountInv("DynamiteStratActive")) { A_FireProjectile("DynamiteProjectile",0,0,0,4,FPF_NOAUTOAIM); } //,0,18)
				else 								 { A_FireProjectile("PurifierDynamiteProjectile",0,0,0,4,FPF_NOAUTOAIM); A_TakeInventory("Mana",25); }
			} else {
				if(CountInv("PowerSuitToken")) { A_GiveInventory("TossPower",15); }
				A_GiveInventory("TossPower2",15);
				if(!CountInv("DynamiteStratActive")) { A_FireProjectile("DynamiteProjectile2",0,0,0,-4,FPF_NOAUTOAIM); } //,0,18)
				else 								 { A_FireProjectile("PurifierDynamiteProjectile2",0,0,0,-4,FPF_NOAUTOAIM); A_TakeInventory("Mana",25); }
			}
		}
		//"####" C 1 A_OverlayOffset(OverlayID(),59,84,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),-3,121,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),-33,142,WOF_INTERPOLATE);
		Stop;
			
	DynamiteNope:
		TNT1 A 0 A_TakeInventory("DeadmakerDynamite",1);
		Goto TrueReady;
	DynamiteNope2:
		TNT1 A 0 A_TakeInventory("DeadmakerDynamite",1);
		Goto ReturnTheSlab;
		
	//Barrel grab.
	Grabbag:
		TNT1 A 0 A_JumpIf(AimTarget() is "PopBarrel", "GrabBarrel");
		TNT1 A 0 A_JumpIf(AimTarget() is "PopBarrel2", "GrabStrifeBarrel");
		TNT1 A 0 A_JumpIf(AimTarget() is "PodZwei", "GrabPod");
		Goto ReturnTheSlab;
	GrabBarrel:
		"####" "#" 0 {
			A_Remove(AAPTR_PLAYER_GETTARGET,RMVF_NOMONSTERS|RMVF_MISC,"PopBarrel");
			A_GiveInventory("BarrelGrabbed",1);
		}
		Goto GrabIt;
	GrabStrifeBarrel:
		"####" "#" 0 {
			A_Remove(AAPTR_PLAYER_GETTARGET,RMVF_NOMONSTERS|RMVF_MISC,"PopBarrel2");
			A_GiveInventory("BarrelGrabbed2",1);
		}
		Goto GrabIt;
	GrabPod:
		"####" "#" 0 {
			A_Remove(AAPTR_PLAYER_GETTARGET,RMVF_NOMONSTERS|RMVF_MISC,"PodZwei");
			A_GiveInventory("PodGrabbed",1);
		}
		Goto GrabIt;
	GrabIt:
		"####" A 0 {
			Invoker.left_prism.End();
			Invoker.right_prism.End();
			
			invoker.NoSwitch = 1;
			A_Overlay(-3,"none");
			A_Overlay(3,"none");
		}
		"####" A 0 {
			if(CountInv("PowerSuitToken")) { A_StartSound("Prophet/Woosh",6,0,0.8); }
			A_PlaySound("Deadmaker/Woosh",1);
		}
		OCLW A 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW A 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW A 0;
		"####" A 1 A_OverlayOffset(OverlayID(),299+32,-44);
		"####" A 1 A_OverlayOffset(OverlayID(),240+32,-14,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),199+32,13,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),135+32,35,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),75+32,57,WOF_INTERPOLATE);
		"####" "#" 0 {
			if(CountInv("BarrelGrabbed") || CountInv("BarrelGrabbed2")) {
				A_PlaySound("Propane/Pick",6,0.7);
			} else if(CountInv("PodGrabbed")) {
				A_PlaySound("gumpoptome_active",6,0.7);
			}
		}
		//"####" C 1 A_OverlayOffset(OverlayID(),59,84+32,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),-3,121+32,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),-33,142+32,WOF_INTERPOLATE);
		TNT1 A 6 A_OverlayOffset(OverlayID(),0,32);
	GrabReady:
		TNT1 A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK, "GrabDrop");
		TNT1 A 1 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK, "GrabThrow");
		Loop;
	GrabThrow:
		"####" A 0 {
			if(CountInv("PowerSuitToken")) { A_StartSound("Prophet/Woosh",6,0,0.8); }
			A_PlaySound("Deadmaker/Woosh",1);
			if(random(1,4) == 1) { A_PlaySound("Guncaster/Kick",2); }
		}
		OCLW A 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW A 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW A 0;
		"####" A 1 A_OverlayOffset(OverlayID(),252,81+32);
		//"####" A 1 A_OverlayOffset(OverlayID(),196,50+32,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),173,43+32,WOF_INTERPOLATE);
		//"####" B 1 A_OverlayOffset(OverlayID(),116,20+32,WOF_INTERPOLATE);
		"####" C 0 {
			If(CountInv("BarrelGrabbed"))
			{
				A_TakeInventory("BarrelGrabbed",1);
				A_FireProjectile("PopBarrelThrown",0,0);
			}
			Else If(CountInv("BarrelGrabbed2"))
			{
				A_TakeInventory("BarrelGrabbed2",1);
				A_FireProjectile("PopBarrel2Thrown",0,0);
			}
			Else
			{
				A_TakeInventory("PodGrabbed",1);
				A_FireProjectile("PodZweiThrown",0,0);
			}
			Return ResolveState(Null);
		}
		"####" C 1 A_OverlayOffset(OverlayID(),91,22+32,WOF_INTERPOLATE);
		//"####" C 1 A_OverlayOffset(OverlayID(),55,34+32,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),6,77+32,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),-24,104+32,WOF_INTERPOLATE);
		Goto ReturnTheSlab;
	GrabDrop:
		TNT1 A 0 {
			Invoker.PunchCannonDelay = 15; // Arbitrary stolen token for my hacky fixes.
			if(CountInv("BarrelGrabbed")) { A_SpawnItemEx("PopBarrel",32,0,10); A_TakeInventory("BarrelGrabbed",0); Return ResolveState("ReturnTheSlab"); }
			if(CountInv("BarrelGrabbed2")) { A_SpawnItemEx("PopBarrel2",32,0,10); A_TakeInventory("BarrelGrabbed2",0); Return ResolveState("ReturnTheSlab"); }
			else						  { A_SpawnItemEx("PodZwei",32,0,10); A_TakeInventory("PodGrabbed",0); Return ResolveState("ReturnTheSlab"); }
			Return ResolveState(Null);
		}
		Goto ReturnTheSlab;
		
	//Fist bump.
	StartFistbump:
		TNT1 A 10 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightDown");
			A_Overlay(-3,"LeftDown");
		}
	Fistbump:
		TNT1 A 4 {
			Invoker.Punchside = 0;  //Safety measures.
			A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,0);
			invoker.NoSwitch = 1;
			if(CountInv("PowerSuitToken")) { A_StartSound("Prophet/Woosh",6,0,0.8); }
			A_PlaySound("Deadmaker/Woosh",1);
			A_OverlayOffset(OverlayID(),-107,53);
			A_Overlay(3,"RightFistBump");
			A_Overlay(-3,"LeftFistBump");
		}
		OPNC D 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DPNC D 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NPNC D 0;
		"####" D 0 {
			Invoker.Bump = 10.0;
			A_AlertMonsters(384);
			A_PlaySound("Punch/Flesh1",1);
			if(CountInv("PowerSuitToken"))  { A_StartSound("Prophet/Impact",8,0,1.0); }
			if(CountInv("PowerSuitToken") && CountInv("PowerMidasMode")) { A_FireProjectile("MidasMechamakerStompDustless",0,0); }
			else if(CountInv("PowerSuitToken")) 						 { A_FireProjectile("MechamakerStompDustless",0,0); }
			else if(CountInv("PowerMidasMode")) 						 { A_FireProjectile("MidasDeadmakerStompDustless",0,0); }
			else 														 { A_FireProjectile("DeadmakerStompDustless",0,0); }
			//A_QuakeEx(2,2,3,35,0,32,"none",QF_SCALEDOWN);
		}
		"####" DDDDDDDDDD 1 {
				Invoker.Bump = Invoker.Bump - 1.0;
				A_OverlayOffset(OverlayID(),-107+(Invoker.Bump*random(-1,1)),53+(Invoker.Bump*random(-1,1)),WOF_INTERPOLATE);
		}
		"####" D 6;
		"####" DDDDDDDDDDD 1 A_JumpIf(player.OnGround && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 13 : 25) && GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK,"ComeOnAndSlam");
		TNT1 A 14 {
			A_Overlay(3,"RightFistBumpReverse");
			A_Overlay(-3,"LeftFistBumpReverse");
		}
		TNT1 A 0 A_JumpIf(!CountInv("GCCantFire") && Health > 0 && (GetPlayerInput(INPUT_BUTTONS) & BT_RELOAD) && !(GetPlayerInput(INPUT_BUTTONS) & BT_FORWARD),"Fistbump");
		Goto ReturnTheSlab; //EndOfTheLine;
	
	// Prophet melee mode switch.
	StartAltMode:
		TNT1 A 18 {
			A_StartSound("Prophet/MeleeModeOn",6,0,0.5);
			Invoker.PunchCannonMode = 1;
			A_Overlay(12,"RightMLRS");
			A_Overlay(-12,"LeftMLRS");
			A_Overlay(3,"RightAlt");
			A_Overlay(-3,"LeftAlt");
		}
		Goto AltModeReady;
	LeftAlt:
		TNT1 A 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
	RightAlt:
		OCLW D 0;
		"####" D 1 A_OverlayOffset(OverlayID(),190,89);
		"####" D 1 A_OverlayOffset(OverlayID(),191,86,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),195,81,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),201,79,WOF_INTERPOLATE);
		"####" D 0 A_JumpIf(OverlayID() == -3,"LeftAltMain");
		Goto RightAltMain;
	LeftMLRS:
		TNT1 A 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
	RightMLRS:
		CYOM D 0;
		"####" D 1 A_OverlayOffset(OverlayID(),396,-111);
		"####" D 1 A_OverlayOffset(OverlayID(),374,-117,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),350,-124,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),339,-128,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),306,-115);
		"####" B 1 A_OverlayOffset(OverlayID(),281,-130);
		"####" A 1 A_OverlayOffset(OverlayID(),275,-125,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),269,-113,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),266,-110,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),268,-112,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),277,-122,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),281,-125,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),283,-127,WOF_INTERPOLATE);
		"####" A 0 A_JumpIf(OverlayID() == -12,"LeftMLRSMain");
		Goto RightMLRSMain;
	
	// Melee mode idle.
	AltModeReady:
		TNT1 A 1 A_JumpIf(Health > 0 && !invoker.LeftHand && !invoker.WeaponInUse && (getplayerinput(INPUT_BUTTONS) & BT_RELOAD) && !(getplayerinput(INPUT_OLDBUTTONS) & BT_RELOAD), "StartSwitchback");
		//BARRELS! I KNEW IT!
		TNT1 A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_USE) && A_JumpIfTargetInLOS("Null",0,0,148) && !CountInv("GCCantFire") && Health > 0 &&
						 (AimTarget() is "PopBarrel" ||
						  AimTarget() is "PopBarrel2" ||
						 AimTarget() is "PodZwei"),"Grabbag");
		Loop;
		
	// Melee mode off.
	StartSwitchback:
		TNT1 A 4 {
			A_StopSound(5);
			A_StartSound("Prophet/MeleeModeOff",6,0,0.5);
			Invoker.PunchCannonMode = 0;
			Invoker.PunchCannonDelay = 20;
			A_Overlay(12,"RightDeMLRS");
			A_Overlay(-12,"LeftDeMLRS");
			A_Overlay(3,"RightDeAlt");
			A_Overlay(-3,"LeftDeAlt");
		}
		Goto TrueReady;
	LeftDeAlt:
		TNT1 A 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
	RightDeAlt:
		OCLW D 0;
		"####" D 1 A_OverlayOffset(OverlayID(),201,79);
		"####" D 1 A_OverlayOffset(OverlayID(),195,81,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),191,86,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),190,89,WOF_INTERPOLATE);
		"####" D 0 A_OverlayOffset(OverlayID(),190,96); // Position reset.
		"####" D 0 A_JumpIf(OverlayID() == -3,"LeftMain");
		Goto RightMain;
	LeftDeMLRS:
		TNT1 A 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
	RightDeMLRS:
		CYOM B 0;
		"####" B 1 A_OverlayOffset(OverlayID(),281,-130);
		"####" C 1 A_OverlayOffset(OverlayID(),306,-115);
		"####" D 1 A_OverlayOffset(OverlayID(),339,-128,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),350,-124,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),374,-117,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),396,-111,WOF_INTERPOLATE);
		Stop;
		
	// Right Hand Lazer.
	RightAltMain:
		OCLW D 0;
		"####" D 1 {
			A_OverlayOffset(OverlayID(),203,78,WOF_INTERPOLATE);
			if(!CountInv("GCCantFire") && (GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK) && CountInv("Mana") >= 100 && invoker.LazererSide <= 0) { Return ResolveState("RightAltLazer"); }
			Return ResolveState(Null);
		}
		Loop;
	RightAltLazer:
		CYOZ A 0;
		"####" A 0 {
			A_OverlayOffset(OverlayID(),182,36);
			A_StartSound("Prophet/LazerHandCharge",9,0,0.6);
            if(GetCvar("GC_QuakeRecoil")) { A_QuakeEx(2, 2, 2, 15, 0, 3, "none", QF_SCALEUP); A_QuakeEx(2, 2, 2, 15, 0, 3, "none", QF_SCALEUP|QF_WAVE, 1.5, 1.5, 2.0); }
			invoker.RightLazerer = 0;
			invoker.WeaponInUse = 1;
		}
		"####" AAAAAAAAAAAAAAAAAAAA 1 {
			invoker.RightLazerer += 0.25;
			A_OverlayOffset(OverlayID(),182+frandom(invoker.RightLazerer,-invoker.RightLazerer),36+frandom(invoker.RightLazerer,-invoker.RightLazerer),WOF_INTERPOLATE);
		}
		"####" A 1 Bright {
			invoker.LazererSide = 1;
			A_StartSound("Prophet/LazerHandFire",9,0);
			A_StartSound("Prophet/LazerHandBlast",10,0,0.6);
			if(GetCvar("GC_ZoomRecoil")) { A_Overlay(-66,"AltLazerZoom"); }
			A_Overlay(65,"RightAltLazerRecoil");
            if(GetCvar("GC_QuakeRecoil")) { A_QuakeEx(3, 3, 3, 16, 0, 3, "none", QF_SCALEDOWN); A_QuakeEx(3, 3, 6, 24, 0, 3, "none", QF_SCALEDOWN|QF_WAVE, 0.5, 0.5, 2.0); }
			A_TakeInventory("Mana",100,TIF_NOTAKEINFINITE);
			if(CountInv("TibCore")) { 
				A_RailAttack((1500),18,0,0,"blue",RGF_SILENT|RGF_NOPIERCING|RGF_SILENT,0,"",0,0,16384,0,67.3,0); 
				GC_BaseFunctions.GC_LaserSpawn(invoker.owner,"ProphetLazerHandSegmentBlue","ProphetLazerHandBlastBlue", "CoreDreadfulLightning", 0.0, 30.0, -10.0);
			}
			else					{ 
				A_RailAttack((1000),18,0,0,"green",RGF_SILENT|RGF_NOPIERCING|RGF_SILENT,0,"",0,0,16384,0,67.3,0); 
				GC_BaseFunctions.GC_LaserSpawn(invoker.owner,"ProphetLazerHandSegment","ProphetLazerHandBlast", "DreadfulLightning", 0.0, 30.0, -10.0);
			}
			/*
			if(CountInv("TibCore")) { GC_LaserAttack((1500),18,0,0,"blue", RGF_SILENT|RGF_NOPIERCING|RGF_SILENT,0.0,"ProphetLazerHandBlastBlue",0,0,16384,0,67.3,0,"ProphetLazerHandSegmentBlue"); }
			else					{ GC_LaserAttack((1000),18,0,0,"green",RGF_SILENT|RGF_NOPIERCING|RGF_SILENT,0.0,"ProphetLazerHandBlast",	0,0,16384,0,67.3,0,"ProphetLazerHandSegment"); }
			*/
		}
		Goto AltLazerAnim;
	RightAltLazerRecoil:
		TNT1 A 1;
		TNT1 A 1 {
			A_SetPitch(Pitch - 2.5 * GetCVar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetAngle(Angle - 2.5 * GetCVar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			A_SetPitch(Pitch - 1.5 * GetCVar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetAngle(Angle - 1.5 * GetCVar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			A_SetPitch(Pitch - 0.5 * GetCVar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetAngle(Angle - 0.5 * GetCVar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			A_SetPitch(Pitch - 0.25 * GetCVar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetAngle(Angle - 0.25 * GetCVar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		Stop;
	
	// Left Hand Lazer.
	LeftAltMain:
		TNT1 A 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
		OCLW D 0;
		"####" D 1 {
			A_OverlayOffset(OverlayID(),203,78,WOF_INTERPOLATE);
			if(!CountInv("GCCantFire") && (GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK) && CountInv("Mana") >= 100 && invoker.LazererSide > 0) { Return ResolveState("LeftAltLazer"); }
			Return ResolveState(Null);
		}
		Loop;
	LeftAltLazer:
		CYOZ A 0;
		"####" A 0 {
			A_OverlayOffset(OverlayID(),192,36);
			A_StartSound("Prophet/LazerHandCharge",11,0,0.6);
            if(GetCvar("GC_QuakeRecoil")) { A_QuakeEx(2, 2, 2, 15, 0, 3, "none", QF_SCALEUP); A_QuakeEx(2, 2, 2, 15, 0, 3, "none", QF_SCALEUP|QF_WAVE, 1.5, 1.5, 2.0); }
			invoker.LeftLazerer = 0;
			invoker.LeftHand = 1;
		}
		"####" AAAAAAAAAAAAAAAAAAAA 1 {
			invoker.LeftLazerer += 0.25;
			A_OverlayOffset(OverlayID(),192+frandom(invoker.LeftLazerer,-invoker.LeftLazerer),36+frandom(invoker.LeftLazerer,-invoker.LeftLazerer),WOF_INTERPOLATE);
		}
		"####" A 1 Bright {
			invoker.LazererSide = 0;
			A_StartSound("Prophet/LazerHandFire",11,0);
			A_StartSound("Prophet/LazerHandBlast",12,0,0.6);
			if(GetCvar("GC_ZoomRecoil")) { A_Overlay(-66,"AltLazerZoom"); }
			A_Overlay(-65,"LeftAltLazerRecoil");
            if(GetCvar("GC_QuakeRecoil")) { A_QuakeEx(3, 3, 3, 16, 0, 3, "none", QF_SCALEDOWN); A_QuakeEx(3, 3, 6, 24, 0, 3, "none", QF_SCALEDOWN|QF_WAVE, 0.5, 0.5, 2.0); }
			A_TakeInventory("Mana",100,TIF_NOTAKEINFINITE);
			if(CountInv("TibCore")) { 
				A_RailAttack((1500),-18,0,0,"blue",RGF_SILENT|RGF_NOPIERCING|RGF_SILENT,0,"",0,0,16384,0,67.3,0); 
				GC_BaseFunctions.GC_LaserSpawn(invoker.owner,"ProphetLazerHandSegmentBlue","ProphetLazerHandBlastBlue", "CoreDreadfulLightning", 0.0, -30.0, -10.0);
			}
			else					{ 
				A_RailAttack((1000),-18,0,0,"green",RGF_SILENT|RGF_NOPIERCING|RGF_SILENT,0,"",0,0,16384,0,67.3,0); 
				GC_BaseFunctions.GC_LaserSpawn(invoker.owner,"ProphetLazerHandSegment","ProphetLazerHandBlast", "DreadfulLightning", 0.0, -30.0, -10.0);
			}
			/*
			if(CountInv("TibCore")) { GC_LaserAttack((1500),-18,0,0,"blue", RGF_SILENT|RGF_NOPIERCING|RGF_SILENT,0.0,"ProphetLazerHandBlastBlue",0,0,16384,0,67.3,0,"ProphetLazerHandSegmentBlue"); }
			else					{ GC_LaserAttack((1000),-18,0,0,"green",RGF_SILENT|RGF_NOPIERCING|RGF_SILENT,0.0,"ProphetLazerHandBlast",	0,0,16384,0,67.3,0,"ProphetLazerHandSegment"); }
			*/
		}
		Goto AltLazerAnim;
	LeftAltLazerRecoil:
		TNT1 A 1;
		TNT1 A 1 {
			A_SetPitch(Pitch - 2.5 * GetCVar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetAngle(Angle + 2.5 * GetCVar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			A_SetPitch(Pitch - 1.5 * GetCVar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetAngle(Angle + 1.5 * GetCVar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			A_SetPitch(Pitch - 0.5 * GetCVar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetAngle(Angle + 0.5 * GetCVar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		TNT1 A 1 {
			A_SetPitch(Pitch - 0.25 * GetCVar("GC_WeaponRecoil"), SPF_INTERPOLATE);
			A_SetAngle(Angle + 0.25 * GetCVar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		}
		Stop;
	AltLazerAnim:
		"####" A 1 Bright A_OverlayOffset(OverlayID(),220,55,WOF_INTERPOLATE);
		"####" A 1 Bright A_OverlayOffset(OverlayID(),223,57,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),220,55,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),210,49,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),200,42,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),193,39,WOF_INTERPOLATE);
		OCLW D 0;
		"####" D 1 A_OverlayOffset(OverlayID(),213,75);
		"####" D 1 A_OverlayOffset(OverlayID(),206,76,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),204,77,WOF_INTERPOLATE);
		"####" D 0 {
			if(OverlayID() == -3) { invoker.LeftHand = 0; }
			else { invoker.WeaponInUse = 0; }
		}
		"####" D 0 A_JumpIf(OverlayID() == -3,"LeftAltMain");
		Goto RightAltMain;
	AltLazerZoom:
		TNT1 A 0 A_JumpIf(GetCvar("GC_ZoomRecoil"),1);
		Stop;
		TNT1 A 1 A_ZoomFactor(0.99);
		TNT1 A 1 A_ZoomFactor(0.975);
		TNT1 A 1 A_ZoomFactor(0.98);
		TNT1 A 1 A_ZoomFactor(0.985);
		TNT1 A 1 A_ZoomFactor(0.99);
		TNT1 A 1 A_ZoomFactor(0.995);
		TNT1 A 1 A_ZoomFactor(0.9975);
		TNT1 A 1 A_ZoomFactor(1.0);
		Stop;
		
	// Right MLRS.
	RightMLRSMain:
		CYOM A 0;
		"####" A 1 {
			A_OverlayOffset(OverlayID(),284,-128,WOF_INTERPOLATE);
			if(!CountInv("GCCantFire") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK && CountInv("Mana") >= 20 && !Invoker.PunchCannonDelay) { Return ResolveState("RightMLRSFire"); }
			Return ResolveState(Null);
		}
		Loop;
	RightMLRSFire:
		CYOF A 0 {
			A_StartSound("Prophet/MissileBarrage",5,CHANF_LOOPING);
			A_TakeInventory("Mana",10,TIF_NOTAKEINFINITE);
			invoker.LoopRight = 3;
		}
	RightMLRSFiring:
		CYOL A 1 Bright {
			A_OverlayOffset(OverlayID(),298+frandom(3.0,-3.0),-130+frandom(3.0,-3.0),WOF_INTERPOLATE);
			A_Overlay(random(-200,-400),"BarrageFlashRight");
			A_Overlay(random(-200,-400),"BarrageFlashRight");
			A_StartSound("Prophet/MissileWoosh",9,CHANF_OVERLAP,0.3);
			A_FireProjectile("ProphetMLRSMissile",frandom(20.0,-20.0),0,30+frandom(3,6),(player.viewz >= CeilingZ-25 ? -25 : 35)+frandom(-5,5),0,frandom(10.0,-10.0));
		}
		CYOL B 1 Bright A_OverlayOffset(OverlayID(),292+frandom(3.0,-3.0),-131+frandom(3.0,-3.0),WOF_INTERPOLATE);
		CYOL C random(0,1) Bright A_OverlayOffset(OverlayID(),290+frandom(3.0,-3.0),-129+frandom(3.0,-3.0),WOF_INTERPOLATE);
		CYOM A 0 {
			if(invoker.LoopRight) { invoker.LoopRight--; Return ResolveState("RightMLRSFiring"); }
			if(!CountInv("GCCantFire") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK && CountInv("Mana") >= 16) { Return ResolveState("RightMLRSFire"); }
			A_StopSound(5);
			A_StartSound("Prophet/MissileBarrageStop",5);
			A_StartSound("Prophet/MissileBarrageStop2",6,0,0.8);
			Return ResolveState(Null);
		}
		CYOM A 1 { A_OverlayOffset(OverlayID(),288,-129,WOF_INTERPOLATE); if(!CountInv("GCCantFire") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK && CountInv("Mana") >= 16) { Return ResolveState("RightMLRSFire"); } Return ResolveState(Null); }
		CYOM A 1 { A_OverlayOffset(OverlayID(),284,-128,WOF_INTERPOLATE); if(!CountInv("GCCantFire") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK && CountInv("Mana") >= 16) { Return ResolveState("RightMLRSFire"); } Return ResolveState(Null); }
		Goto RightMLRSMain;
	BarrageFlashRight:
		CYOF A 0 {
			A_OverlayOffset(OverlayID(),253+frandom(-30,40),-81+frandom(-20,50));
			A_OverlayFlags(OverlayID(),PSPF_RENDERSTYLE,1);
			A_OverlayRenderstyle(OverlayID(),STYLE_Add);
		}
		CYOF ABCDEFGHI 1 Bright;
		Stop;
		
	// Left MLRS.
	LeftMLRSMain:
		CYOM A 1 {
			A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
			A_OverlayOffset(OverlayID(),284,-128,WOF_INTERPOLATE);
			if(!CountInv("GCCantFire") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK && CountInv("Mana") >= 20 && !Invoker.PunchCannonDelay) { Return ResolveState("LeftMLRSFire"); }
			Return ResolveState(Null);
		}
		Loop;
	LeftMLRSFire:
		CYOF A 0 {
			A_StartSound("Prophet/MissileBarrage",5,CHANF_LOOPING);
			A_TakeInventory("Mana",10,TIF_NOTAKEINFINITE);
			invoker.LoopLeft = 3;
		}
	LeftMLRSFiring:
		CYOL A 1 Bright {
			A_OverlayOffset(OverlayID(),298+frandom(3.0,-3.0),-130+frandom(3.0,-3.0),WOF_INTERPOLATE);
			A_Overlay(random(-200,-400),"BarrageFlashLeft");
			A_Overlay(random(-200,-400),"BarrageFlashLeft");
			A_StartSound("Prophet/MissileWoosh",9,CHANF_OVERLAP,0.3);
			A_FireProjectile("ProphetMLRSMissile",frandom(20.0,-20.0),0,-30+frandom(-3,-6),(player.viewz >= CeilingZ-25 ? -25 : 35)+frandom(-5,5),0,frandom(10.0,-10.0));
		}
		CYOL B 1 Bright A_OverlayOffset(OverlayID(),292+frandom(3.0,-3.0),-131+frandom(3.0,-3.0),WOF_INTERPOLATE);
		CYOL C random(0,1) Bright A_OverlayOffset(OverlayID(),290+frandom(3.0,-3.0),-129+frandom(3.0,-3.0),WOF_INTERPOLATE);
		CYOM A 0 {
			if(invoker.LoopLeft) { invoker.LoopLeft--; Return ResolveState("LeftMLRSFiring"); }
			if(!CountInv("GCCantFire") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK && CountInv("Mana") >= 16) { Return ResolveState("LeftMLRSFire"); }
			A_StopSound(5);
			A_StartSound("Prophet/MissileBarrageStop",5);
			A_StartSound("Prophet/MissileBarrageStop2",6,0,0.8);
			Return ResolveState(Null);
		}
		CYOM A 1 { A_OverlayOffset(OverlayID(),288,-129,WOF_INTERPOLATE); if(!CountInv("GCCantFire") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK && CountInv("Mana") >= 16) { Return ResolveState("LeftMLRSFire"); } Return ResolveState(Null); }
		CYOM A 1 { A_OverlayOffset(OverlayID(),284,-128,WOF_INTERPOLATE); if(!CountInv("GCCantFire") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK && CountInv("Mana") >= 16) { Return ResolveState("LeftMLRSFire"); } Return ResolveState(Null); }
		Goto LeftMLRSMain;
	BarrageFlashLeft:
		CYOF A 0 {
			A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
			A_OverlayFlags(OverlayID(),PSPF_RENDERSTYLE,1);
			A_OverlayRenderstyle(OverlayID(),STYLE_Add);
			A_OverlayOffset(OverlayID(),253+frandom(-30,40),-81+frandom(-20,50));
		}
		CYOF ABCDEFGHI 1 Bright;
		Stop;
	
	//Firebreath.
	StartFirebreath2:
		TNT1 A 0 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightReady");
			A_Overlay(-3,"LeftReady");
		}
	StartFirebreath:
		TNT1 A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & BT_CROUCH,"StartFirebreathMinor"); 
		TNT1 A 0 {
			invoker.NoSwitch = 1;
			invoker.timer = 100;
			invoker.noswitch = 1;
			//A_TakeInventory("Mana",CountInv("PowerTomeEffect") ? 25 : 50,TIF_NOTAKEINFINITE);
			A_QuakeEx(3,3,3,123,0,512,"none");
			int randomese;
			randomese = random(0,3);
			switch(randomese)
			{
				default:
				case 1:
					A_StartSound("Deadmaker/Firebreath1",767,CHANF_OVERLAP,1.0,0.8);
					A_StartSound("Deadmaker/Firebreath1",767,CHANF_OVERLAP,1.0,0.8);
					break;
				case 2:
					A_StartSound("Deadmaker/Firebreath2",767,CHANF_OVERLAP,1.0,0.8);
					A_StartSound("Deadmaker/Firebreath2",767,CHANF_OVERLAP,1.0,0.8);
					break;
				case 3:
					A_StartSound("Deadmaker/Firebreath3",767,CHANF_OVERLAP,1.0,0.8);
					A_StartSound("Deadmaker/Firebreath3",767,CHANF_OVERLAP,1.0,0.8);
					break;
				case 4:
					A_StartSound("Deadmaker/Firebreath4",767,CHANF_OVERLAP,1.0,0.8);
					A_StartSound("Deadmaker/Firebreath4",767,CHANF_OVERLAP,1.0,0.8);
					break;
			}
		}
	Firebreath:
		TNT1 A 1 { 
			invoker.NoSwitch = 1;
			A_SetAngle(Angle + frandom(1.5,-1.5),SPF_INTERPOLATE);
			A_SetPitch(Pitch + frandom(1.5,-1.5),SPF_INTERPOLATE);
			A_OverlayOffset(3,190+frandom(5.0,-5.0),96+frandom(5.0,-5.0),WOF_INTERPOLATE);
			A_OverlayOffset(-3,190+frandom(5.0,-5.0),96+frandom(5.0,-5.0),WOF_INTERPOLATE);
			
			// Ammo use.
			if(CountInv("PowerTomeEffect") && random(0,1) == 0) {
				A_TakeInventory("Mana",1,TIF_NOTAKEINFINITE);
			}
			if(!CountInv("PowerTomeEffect")) {
				A_TakeInventory("Mana",1,TIF_NOTAKEINFINITE);
			}
			
			// Projectile.
			if(CountInv("PowerSuitToken") && CountInv("TibCore")) {
				A_SetBlend("Blue",frandom(0.2,0.22),35);
				for(invoker.Loopler = 0; invoker.Loopler <= 3; invoker.Loopler++)
				{
					A_FireProjectile("SuperBlueTiberiumIgnitionSnort",frandom(7.0,-7.0),0,0,-16,0,frandom(4.0,-4.0));
				}
				for(invoker.Loopler = 0; invoker.Loopler <= 2; invoker.Loopler++)
				{
					A_FireProjectile("SuperBlueTiberiumIgnitionSmoke",frandom(7.0,-7.0),0,0,-16,0,frandom(4.0,-4.0));
				}
				A_FireProjectile("SuperBlueTiberiumIgnitionParticle",frandom(7.0,-7.0),0,0,-16,0,frandom(4.0,-4.0));
			} else if(CountInv("PowerSuitToken")) {
				A_SetBlend("Green",frandom(0.2,0.22),35);
				for(invoker.Loopler = 0; invoker.Loopler <= 3; invoker.Loopler++)
				{
					A_FireProjectile("SuperTiberiumIgnitionSnort",frandom(7.0,-7.0),0,0,-16,0,frandom(4.0,-4.0));
				}
				for(invoker.Loopler = 0; invoker.Loopler <= 2; invoker.Loopler++)
				{
					A_FireProjectile("SuperTiberiumIgnitionSmoke",frandom(7.0,-7.0),0,0,-16,0,frandom(4.0,-4.0));
				}
				A_FireProjectile("SuperTiberiumIgnitionParticle",frandom(7.0,-7.0),0,0,-16,0,frandom(4.0,-4.0));
			} else {
				A_SetBlend("Orange",frandom(0.2,0.22),35);
				for(invoker.Loopler = 0; invoker.Loopler <= 3; invoker.Loopler++)
				{
					A_FireProjectile("SuperIgnitionSnort",frandom(7.0,-7.0),0,0,-16,0,frandom(4.0,-4.0));
				}
				for(invoker.Loopler = 0; invoker.Loopler <= 2; invoker.Loopler++)
				{
					A_FireProjectile("SuperIgnitionSmoke",frandom(7.0,-7.0),0,0,-16,0,frandom(4.0,-4.0));
				}
				A_FireProjectile("SuperIgnitionParticle",frandom(7.0,-7.0),0,0,-16,0,frandom(4.0,-4.0));
			}
			invoker.timer--;
		}
		TNT1 A 0 A_JumpIf(invoker.timer > 0, "Firebreath");
		TNT1 A 25 {
			A_OverlayOffset(3,190,96,WOF_INTERPOLATE);
			A_OverlayOffset(-3,190,96,WOF_INTERPOLATE);
			A_QuakeEx(3,3,3,15,0,512,"none",QF_SCALEDOWN);
		}
		TNT1 A 0 { invoker.noswitch = 0; }
		Goto TrueReady;
	StartFirebreathMinor:
		"####" "#" 0 {
			if(CountInv("PowerTomeEffect"))
			{
				Return ResolveState("StartFirebreathMinorT");
			}
			Return ResolveState(null);
		}
		"####" "#" 0 {
			A_PlaySound("TNT/Ignition",1,0.9);
			invoker.WeapAction++;
		}
		"####" "#" 1 A_SetPitch(Pitch - 0.25 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		"####" "#" 1 A_SetPitch(Pitch - 0.25 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		"####" "#" 1 A_SetPitch(Pitch - 0.5 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		"####" "#" 1 A_SetPitch(pitch - 1.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		"####" "#" 1 A_SetPitch(pitch - 2.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		"####" "###" 1 A_SetPitch(pitch - 2.5 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		"####" "#" 0 {
			invoker.breath_frame = 0;
			if(CountInv("PowerSuitToken")) {
				if(CountInv("TibCore")) {
					invoker.breath_type = "BlueTiberianIgnitionSnort";
					invoker.smoke_type = "BlueTiberianIgnitionSmoke";
				}
			   
				else {
					invoker.breath_type = "TiberianIgnitionSnort";
					invoker.smoke_type = "TiberianIgnitionSmoke";
				}
			}
		   
			else {
				invoker.breath_type = "FiresweepSnort";
				invoker.smoke_type = "FiresweepSmoke";
			}
		}
		"####" "######" 1 {
			double breath_array[] = { 6.0, 5.0, 3.0, 2.0, 1.0, 0.5 };
			if(invoker.breath_frame + 1 < breath_array.size()) { invoker.breath_frame++; }
			A_SetPitch(Pitch + breath_array[invoker.breath_frame], SPF_INTERPOLATE);
			A_FireProjectile(invoker.breath_type, frandom(-4.0, 4.0), useammo: false, pitch: frandom(-2.0, 2.0));
		   
			for(let i = 0; i < 5; i++) {
				A_FireProjectile(invoker.smoke_type, frandom(-4.0, 4.0), useammo: false, pitch: frandom(-4.0, 4.0));
			}
		}
		"####" "#" 25 { invoker.noswitch = 0; }
		Goto TrueReady;
	StartFirebreathMinorT:
		"####" "#" 0 {
			invoker.WeapAction++;
			A_PlaySound("TNT/Ignition",1,0.9);
		}
		"####" "#" 1 A_SetPitch(Pitch - 0.25 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		"####" "#" 1 A_SetPitch(Pitch - 0.25 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		"####" "#" 1 A_SetPitch(Pitch - 0.5 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		"####" "#" 1 A_SetPitch(pitch - 1.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		"####" "#" 1 A_SetPitch(pitch - 2.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		"####" "###" 1 A_SetPitch(pitch - 2.5 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		"####" "#" 0 {
			invoker.breath_frame = 0;
			if(CountInv("PowerSuitToken")) {
				if(CountInv("TibCore")) {
					invoker.breath_type = "BlueTiberianIgnitionSnort";
					invoker.smoke_type = "BlueTiberianIgnitionSmoke";
				}
			   
				else {
					invoker.breath_type = "TiberianIgnitionSnort";
					invoker.smoke_type = "TiberianIgnitionSmoke";
				}
			}
		   
			else {
				invoker.breath_type = "FiresweepSnort";
				invoker.smoke_type = "FiresweepSmoke";
			}
		}	
		"####" "######" 1 {
			double breath_array[] = { 6.0, 5.0, 3.0, 2.0, 1.0, 0.5 };
			if(invoker.breath_frame + 1 < breath_array.size()) { invoker.breath_frame++; }
			A_SetPitch(Pitch + breath_array[invoker.breath_frame], SPF_INTERPOLATE);
			for(let i = 0; i < 3; i++) {
				A_FireProjectile(invoker.breath_type, frandom(-32.0, 32.0), useammo: false, pitch: frandom(-0.5, 0.5));
			}
		   
			for(let i = 0; i < 5; i++) {
				A_FireProjectile(invoker.smoke_type, frandom(-32.0, 32.0), useammo: false, pitch: frandom(-0.5, 0.5));
			}
		}
		"####" "#" 25 { invoker.noswitch = 0; }
		Goto TrueReady;
	
	//Scourgebreath.
	StartScourgebreath:
		TNT1 A 10 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightDown");
			A_Overlay(-3,"LeftDown");
		}
	Scourgebreath:
		TNT1 A 0 {
			A_PlaySound("Breath/Start",5);
			invoker.NoSwitch = 1;
		}
		TNT1 A 10;
		TNT1 A 8 {
			A_Overlay(3,"RightBreath");
			A_Overlay(-3,"LeftBreath");
		}
		Goto BreathStartMain;
	LeftBreath:
		TNT1 A 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
	RightBreath:
		OCLW E 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW E 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW E 0;
		"####" E 1 A_OverlayOffset(OverlayID(),349,152);
		"####" E 1 A_OverlayOffset(OverlayID(),307,118,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),277,87,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),260,70,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),232,60,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),221,60,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),216,62,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),215,63,WOF_INTERPOLATE);
		"####" E 0 A_JumpIf(OverlayID() == -3,"LeftBreathMain");
		Goto RightBreathMain;
	LeftBreathMain:
		"####" E 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
		"####" E 1;
		Wait;
	RightBreathMain:
		"####" E 1;
		Loop;
	BreathStartMain:
		TNT1 A 0 A_GiveInventory("BreathLooplet",8);
	BreathMain:
		TNT1 A 1 {
			A_OverlayOffset(3,215+frandom(5.0,-5.0),63+frandom(5.0,-5.0),WOF_INTERPOLATE);
			A_OverlayOffset(-3,215+frandom(5.0,-5.0),63+frandom(5.0,-5.0),WOF_INTERPOLATE);
			A_PlaySound("Breath/Loop",5,0.7,1);
			A_AlertMonsters();
			A_TakeInventory("BreathLooplet",1);
			A_SetBlend("Red",0.1,15,"Black");
			A_FireProjectile("SuperBreathProjectile",0,0,0,-16);
			A_TakeInventory("Mana",random(2,3) * (CountInv("PowerTomeEffect") ? 0.5 : 1.0),TIF_NOTAKEINFINITE);
		}
		TNT1 A 0 A_JumpIf(CountInv("BreathLooplet"),"BreathMain");
		TNT1 A 0 A_JumpIf(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 2 : 4) && CountInv("BreathActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"BreathMain");
		Goto BreathStop;
	BreathStop:
		TNT1 A 5 {
			A_PlaySound("Breath/End",5,0.7);
			A_OverlayOffset(3,215,63,WOF_INTERPOLATE);
			A_OverlayOffset(-3,215,63,WOF_INTERPOLATE);
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 { //Yes yes I know I'm lazy.
			invoker.NoSwitch = 0;
			If(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 2 : 4) && CountInv("BreathActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("BreathMain"); }
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("BreathActive")) { Return ResolveState("BreathEnd"); }
			Return ResolveState(Null);
		}
	BreathEnd:
		TNT1 A 8 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightBreathReverse");
			A_Overlay(-3,"LeftBreathReverse");
		}
		Goto EndOfTheLine;
	LeftBreathReverse:
		TNT1 A 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
	RightBreathReverse:
		OCLW E 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW E 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW E 0;
		"####" E 1 A_OverlayOffset(OverlayID(),215,63,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),216,62,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),221,60,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),232,60,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),260,70,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),277,87,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),307,118,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),349,152,WOF_INTERPOLATE);
		Stop;
		
	//Meteor Shower.
	StartMeteorShower:
		TNT1 A 10 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightDown");
			A_Overlay(-3,"LeftDown");
		}
	MeteorShower:
		TNT1 A 13 {
			invoker.NoSwitch = 1;
			A_PlaySound("Breath/Start",5);
			A_Overlay(3,"MeteorRight");
			A_Overlay(-3,"MeteorLeft");
		}
		Goto MeteorMain;
	MeteorLeft:
		TNT1 A 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
	MeteorRight:
		OCLW F 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW F 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW F 0;
		"####" F 1 A_OverlayOffset(OverlayID(),254,155);
		"####" F 1 A_OverlayOffset(OverlayID(),237,134,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),227,121,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),211,102,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),194,79,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),191,73,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),190,71,WOF_INTERPOLATE);
		"####" F 6 A_OverlayOffset(OverlayID(),190,70,WOF_INTERPOLATE);
		"####" F 0 A_JumpIf(OverlayID() == -3,"LeftMeteorMain");
		Goto RightMeteorMain;
	LeftMeteorMain:
		"####" F 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
		"####" F 1;
		Wait;
	RightMeteorMain:
		"####" F 1;
		Loop;
	MeteorMain:
		TNT1 A 0 { Invoker.CastCycle = 1; }
	MeteorLoop:
		TNT1 A 1 {
			invoker.NoSwitch = 1;
			A_AlertMonsters();
			A_PlaySound("Breath/Loop",5,0.7,1);
			A_OverlayOffset(3,190+frandom(5.0,-5.0),70+frandom(5.0,-5.0),WOF_INTERPOLATE);
			A_OverlayOffset(-3,190+frandom(5.0,-5.0),70+frandom(5.0,-5.0),WOF_INTERPOLATE);
			
			if(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 13 : 25) && Invoker.CastTime <= 0 && Invoker.CastCycle) {
				Invoker.CastTime = 10;
				Invoker.CastCycle--;
				A_TakeInventory("Mana",CountInv("PowerTomeEffect") ? 13 : 25,TIF_NOTAKEINFINITE);
				A_FireProjectile("DeadmakerMeteorShowerSpawner",0,0);
			}
			
			Invoker.CastTime--;
		}
		TNT1 A 0 A_JumpIf(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 13 : 25) && CountInv("SkullfireActive") && (Invoker.CastTime || Invoker.CastCycle),"MeteorLoop");
		TNT1 A 0 A_JumpIf(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 13 : 25) && CountInv("SkullfireActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK, "MeteorLoop2");
		TNT1 A 0 {
			A_PlaySound("Breath/End",5,0.7);
			A_OverlayOffset(3,190,70,WOF_INTERPOLATE);
			A_OverlayOffset(-3,190,70,WOF_INTERPOLATE);
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 { //YES I KNOW.
			invoker.NoSwitch = 0;
			If(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 13 : 25) && CountInv("SkullfireActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("MeteorLoop2"); }
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("SkullfireActive")) { Return ResolveState("CastEnd"); }
			Return ResolveState(Null);
		}
		Goto CastEnd;
	MeteorLoop2:
		TNT1 A 0 { Invoker.CastCycle = 1; }
		Goto MeteorLoop;
	CastEnd:
		TNT1 A 8 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"CastLeftReverse");
			A_Overlay(-3,"CastRightReverse");
		}
		Goto EndOfTheLine;
	CastLeftReverse:
		TNT1 A 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
	CastRightReverse:
		OCLW E 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW F 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW F 0;
		"####" F 1 A_OverlayOffset(OverlayID(),190,70,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),190,71,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),191,73,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),194,79,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),211,102,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),227,121,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),237,134,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),254,155,WOF_INTERPOLATE);
		Stop;
	
	//Crow swarm.
	StartCrowSwarm:
		TNT1 A 10 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightDown");
			A_Overlay(-3,"LeftDown");
		}
	CrowSwarm:
		TNT1 A 13 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"CrowsRight");
			A_Overlay(-3,"CrowsLeft");
		}
		Goto CrowsMain;
	CrowsLeft:
		TNT1 A 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
	CrowsRight:
		OCLW F 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW F 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW F 0;
		"####" F 1 A_OverlayOffset(OverlayID(),254,155);
		"####" F 1 A_OverlayOffset(OverlayID(),237,134,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),227,121,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),211,102,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),194,79,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),191,73,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),190,71,WOF_INTERPOLATE);
		"####" F 6 A_OverlayOffset(OverlayID(),190,70,WOF_INTERPOLATE);
		"####" F 0 A_JumpIf(OverlayID() == -3,"LeftCrowsMain");
		Goto RightCrowsMain;
	LeftCrowsMain:
		"####" F 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
		"####" F 1;
		Wait;
	RightCrowsMain:
		"####" F 1;
		Loop;
	CrowsMain:
		TNT1 A 0 {
			invoker.NoSwitch = 1;
			A_AlertMonsters();
			A_PlaySound("Crows/Launch",5,0.8);
			A_PlaySound("Crows/Scream",6,0.4);
			A_PlaySound("Crows/Add",1,0.7);
			A_SetBlend("Black",0.4,45);
			A_TakeInventory("Mana",CountInv("PowerTomeEffect") ? 15 : 30,TIF_NOTAKEINFINITE);
			Invoker.Timer = 25;
		}
	CrowsLoop:
		TNT1 A 1 {
			A_OverlayOffset(3,190+frandom(5.0,-5.0),70+frandom(5.0,-5.0),WOF_INTERPOLATE);
			A_OverlayOffset(-3,190+frandom(5.0,-5.0),70+frandom(5.0,-5.0),WOF_INTERPOLATE);
			for(Invoker.Loopler = 0; Invoker.Loopler < 2; Invoker.Loopler++) {
				A_FireProjectile("CrowLauncher3",frandom(16.0,-16.0),0,-16,0,0,frandom(16.0,-16.0));
				A_FireProjectile("CrowLauncher3",frandom(16.0,-16.0),0,16,00,frandom(16.0,-16.0));
			}
			Invoker.Timer--;
		}
		TNT1 A 0 A_JumpIf(Invoker.Timer, "CrowsLoop");
		TNT1 A 20 {
			A_OverlayOffset(3,190,70,WOF_INTERPOLATE);
			A_OverlayOffset(-3,190,70,WOF_INTERPOLATE);
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
			invoker.NoSwitch = 0;
			If(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 15 : 30) && CountInv("CrowsActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("CrowsMain"); }
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("CrowsActive")) { Return ResolveState("CastEnd"); }
			Return ResolveState(Null);
		}
		Goto CastEnd;
		
	//Apocalypse blast.
	StartApocalypse:
		TNT1 A 10 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightDown");
			A_Overlay(-3,"LeftDown");
		}
	Apocalypse:
		TNT1 A 4 {
			invoker.NoSwitch = 1;
			if(CountInv("PowerSuitToken")) { A_StartSound("Prophet/Woosh",6,0,0.8); }
			A_PlaySound("Deadmaker/Woosh",1);
			A_OverlayOffset(OverlayID(),-107,53);
			A_Overlay(3,"RightFistBump");
			A_Overlay(-3,"LeftFistBump");
		}
		Goto ApocalypseNow;
	LeftFistBump:
		OPNC C 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DPNC C 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NPNC C 0;
		"####" C 0 A_OverlayFlags(OverlayID(),PSPF_FLIP,1);
		"####" C 1 A_OverlayOffset(OverlayID(),-222,93);
		"####" B 1 A_OverlayOffset(OverlayID(),-187,70,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),-199,66);
		"####" A 1 A_OverlayOffset(OverlayID(),-152,68,WOF_INTERPOLATE);
		Stop;
	RightFistBump:
		OCLW E 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW E 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW E 0;
		"####" E 1 A_OverlayOffset(OverlayID(),283,87);
		"####" E 1 A_OverlayOffset(OverlayID(),228,61,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),168,48,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),124,43,WOF_INTERPOLATE);
		Stop;
	ApocalypseNow:
		OPNC D 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DPNC D 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NPNC D 0;
		"####" D 0 {
			Invoker.Bump = 15.0;
			A_TakeInventory("Mana",CountInv("PowerTomeEffect") ? 40 : 80,TIF_NOTAKEINFINITE);
			A_AlertMonsters();
			A_SetBlend ("Red", 0.4, 70, "Black");
			A_FireProjectile("CorpseEffect",0,0,0,0);
			A_TracerSpray("ApocalypseBlastMajor",24,40,90,2048,48,25); //A_FireProjectile("DeadmakerApocalypse",0,0);
			if(CountInv("PowerSuitToken"))  { A_StartSound("Prophet/Impact",8,0,1.0); }
			A_PlaySound("Punch/Flesh1",1);
			A_PlaySound("Apocalypse/Use",5);
			A_PlaySound("Apocalypse/Aftermath",6);
			A_QuakeEx(2,2,3,35,0,32,"none",QF_SCALEDOWN);
		}
		"####" DDDDDDDDDDDDDDD 1 {
				Invoker.Bump = Invoker.Bump - 1.0;
				A_OverlayOffset(OverlayID(),-107+(Invoker.Bump*random(-1,1)),53+(Invoker.Bump*random(-1,1)),WOF_INTERPOLATE);
		}
		"####" D 10;
		"####" DDDDDDDDDDDDDDD 1 A_JumpIf(player.OnGround && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 13 : 25) && GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK,"ComeOnAndSlam");
		TNT1 A 14 {
			A_Overlay(3,"RightFistBumpReverse");
			A_Overlay(-3,"LeftFistBumpReverse");
		}
		Goto EndOfTheLine;
	LeftFistBumpReverse:
		OPNC C 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DPNC C 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NPNC C 0;
		"####" C 0 A_OverlayFlags(OverlayID(),PSPF_FLIP,1);
		"####" A 1 A_OverlayOffset(OverlayID(),-152,68,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),-199,66,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),-187,70);
		"####" C 1 A_OverlayOffset(OverlayID(),-222,93,WOF_INTERPOLATE);
		Stop;
	RightFistBumpReverse:
		OCLW E 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW E 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW E 0;
		"####" E 1 A_OverlayOffset(OverlayID(),124,43,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),168,48,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),228,61,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),283,87,WOF_INTERPOLATE);
		Stop;
		
	//THUN-DAH! NA-NA-NAAA NA-NA-NAAAAAH~ [/ACDC]
	StartThunderstruck:
		TNT1 A 10 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightDown");
			A_Overlay(-3,"LeftDown");
		}
	Thunderstruck:
		TNT1 A 4 {
			invoker.NoSwitch = 1;
			if(CountInv("PowerSuitToken")) { A_StartSound("Prophet/Woosh",6,0,0.8); }
			A_PlaySound("Deadmaker/Woosh",1);
			A_OverlayOffset(OverlayID(),-107,53);
			A_Overlay(3,"RightFistBump");
			A_Overlay(-3,"LeftFistBump");
		}
		OPNC D 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DPNC D 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NPNC D 0;
		"####" D 0 {
			Invoker.Bump = 15.0;
			if(CountInv("PowerSuitToken"))  { A_StartSound("Prophet/Impact",8,0,1.0); }
			A_PlaySound("Punch/Flesh1",1);
			A_PlaySound("Thunderstruck/Use",5,0.9);
			A_QuakeEx(2,2,3,35,0,32,"none",QF_SCALEDOWN);
			if(GetPlayerInput(INPUT_BUTTONS) & BT_CROUCH) {
					If(CountInv("StormEngaged"))
					{
						A_SetBlend("Yellow",0.2,25);
						A_PlaySound("Thunderstorm/Stop",5,0.9);
						A_GiveInventory("StormTriggerGiver");
						Return ResolveState(Null);
					}
					A_TakeInventory("Mana",60,TIF_NOTAKEINFINITE);
					A_SpawnItemEx("RajtninguStormuru",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETTARGET,0);
					A_PlaySound("thundertome_active",5,1);
					A_SetBlend("Yellow",0.4,50,"White");
					Return ResolveState(Null);
				}
			A_TakeInventory("Mana",CountInv("PowerTomeEffect") ? 40 : 80,TIF_NOTAKEINFINITE);
			A_AlertMonsters();
			A_SetBlend ("White", 0.2, 50, "Yellow");
			A_FireBullets(0,0,1,1000,"DeadmakerThunderSpawner",FBF_NORANDOMPUFFZ|FBF_NORANDOM,16384);
			Return ResolveState(Null);
		}
		"####" DDDDDDDDDDDDDDD 1 {
				Invoker.Bump = Invoker.Bump - 1.0;
				A_OverlayOffset(OverlayID(),-107+(Invoker.Bump*random(-1,1)),53+(Invoker.Bump*random(-1,1)),WOF_INTERPOLATE);
		}
		"####" D 10;
		"####" DDDDDDDDDDDDDDD 1 A_JumpIf(player.OnGround && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 13 : 25) && GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK,"ComeOnAndSlam");
		TNT1 A 14 {
			A_Overlay(3,"RightFistBumpReverse");
			A_Overlay(-3,"LeftFistBumpReverse");
		}
		Goto EndOfTheLine;
		
	//Cold Vader.
	StartChillgrasp:
		TNT1 A 10 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightDown");
			A_Overlay(-3,"LeftDown");
		}
	Chillgrasp:
		TNT1 A 8 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"GraspRight");
			A_Overlay(-3,"GraspLeft");
		}
		Goto GraspMain;
	GraspLeft:
		TNT1 A 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
	GraspRight:
		OCLW F 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW F 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW F 0;
		"####" F 1 A_OverlayOffset(OverlayID(),254,155);
		"####" F 1 A_OverlayOffset(OverlayID(),237,134,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),227,121,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),211,102,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),194,79,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),191,73,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),190,71,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),190,70,WOF_INTERPOLATE);
		"####" F 0 A_JumpIf(OverlayID() == -3,"LeftGraspMain");
		Goto RightGraspMain;
	LeftGraspMain:
		"####" F 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
		"####" F 1;
		Wait;
	RightGraspMain:
		"####" F 1;
		Loop;
	GraspMain:
		TNT1 A 0 {
			invoker.NoSwitch = 1;
			A_AlertMonsters();
			A_PlaySound("Chillgrasp/Loop",5,1.0,1);
			A_SetBlend("Purple",0.1,20);
		}
	GraspLoop:
		TNT1 A 1 {
			A_SetBlend("Purple",0.05,20);
			A_AlertMonsters();
			A_TakeInventory("Mana",1,TIF_NOTAKEINFINITE);
		}
		TNT1 A 0 {
			let grasp = Guncaster(player.mo).grasp;
			if(!grasp)	
			{	
				A_Print("Chillgrasp is kinda broken right now in deathmatch. Zhs2 is fixing it!");	
				return ResolveState(null);	
			}
			Actor scanned = grasp.ScanForTargets(500.0);
			
			if(scanned &&
			!grasp.IsGrasped(scanned) &&
			!grasp.IsGrasping(scanned)) {
				grasp.BeginHold(scanned,0);
				Return ResolveState("GraspHit");
			}
			else {
				Return A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK && CountInv("ChillgraspActive") && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 5 : 10), "GraspLoop");
			}
			Return ResolveState(null);
		}
		Goto GraspEnd;
	GraspHit:
		TNT1 A 0 {
			A_PlaySound("Chillgrasp/Launch",6);
			A_TakeInventory("Mana",CountInv("PowerTomeEffect") ? 5 : 10,TIF_NOTAKEINFINITE);
		}
	GraspLoop2:
		TNT1 A 1 {
			A_AlertMonsters();
			A_TakeInventory("Mana",1,TIF_NOTAKEINFINITE);
			A_OverlayOffset(3,190+frandom(2.0,-2.0),70+frandom(2.0,-2.0),WOF_INTERPOLATE);
			A_OverlayOffset(-3,190+frandom(2.0,-2.0),70+frandom(2.0,-2.0),WOF_INTERPOLATE);
			A_SetBlend("Purple",0.07,20);
		}
		TNT1 A 0 {
			let me = Guncaster(player.mo);
			if(me.grasp.IsHolding() && CountInv("Mana")) {
				Return A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK,"GraspLoop2");
			}
			Return ResolveState(null);
		}
	GraspEnd:
		TNT1 A 8 {
			let me = Guncaster(player.mo);
			A_PlaySound("Chillgrasp/End",5);
			me.grasp.EndHold();
			A_OverlayOffset(3,190,70,WOF_INTERPOLATE);
			A_OverlayOffset(-3,190,70,WOF_INTERPOLATE);
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
			invoker.NoSwitch = 0;
			If(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 5 : 10) && CountInv("ChillgraspActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("GraspMain"); }
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("ChillgraspActive")) { Return ResolveState("CastEnd"); }
			Return ResolveState(Null);
		}
		Goto CastEnd;
		
	//Kitchen Hell.
	StartThreadcutter2:
		TNT1 A 6 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightReady");
			A_Overlay(-3,"LeftReady");
		}
	StartThreadcutter:
		TNT1 A 5 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightStartAltCast");
			A_Overlay(-3,"LeftStartAltCast");
		}
		Goto ThreadcutterMain;
	LeftStartAltCast:
		TNT1 A 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
	RightStartAltCast:
		OCLW C 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW C 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW C 0;
		"####" "#" 1 A_OverlayOffset(OverlayID(),189,93);
		"####" "#" 1 A_OverlayOffset(OverlayID(),180,80,WOF_INTERPOLATE);
		OCLW D 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW D 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW D 0;
		"####" "#" 1 A_OverlayOffset(OverlayID(),174,72,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),172,68,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),171,67,WOF_INTERPOLATE);
		Wait;
	ThreadcutterMain:
		TNT1 A 9 {
			invoker.NoSwitch = 1;
			if(Invoker.Punchside) {
				Invoker.Punchside = 0;
				A_Overlay(-3,"KnivesLeft");
			} else {
				Invoker.Punchside = 1;
				A_Overlay(3,"KnivesRight");
			}
			for(invoker.Loopler = 0; invoker.Loopler <= 15; invoker.Loopler++)
			{
				A_FireProjectile("ThreadcutterKnife2",frandom(7.5,-7.5),0,Invoker.Punchside ? 16 : -16 +frandom(4.0,-4.0),-4+frandom(4.0,-4.0),0,frandom(3.5,-3.5));
			}
			for(invoker.Loopler = 0; invoker.Loopler <= 8; invoker.Loopler++)
			{
				A_FireProjectile("ThreadcutterCleaver2",frandom(7.5,-7.5),0,Invoker.Punchside ? 16 : -16 +frandom(4.0,-4.0),-4+frandom(4.0,-4.0),0,frandom(3.5,-3.5));
			}
			A_AlertMonsters();
			A_TakeInventory("Mana",CountInv("PowerTomeEffect") ? 25 : 35,TIF_NOTAKEINFINITE);
			if(CountInv("PowerTomeEffect")) { A_GiveInventory("Dio",1); A_PlaySound("Threadcutter/Loop",5|CHAN_NOPAUSE,0.9,1); }
			A_PlaySound("Threadcutter/Use",1|CHAN_NOPAUSE,0.9);
			A_SetBlend("Cyan",0.1,25);
		}
		TNT1 A 0 A_JumpIf(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 10 : 20) && CountInv("ThreadcutterActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK, "ThreadcutterMain");
	ThreadcutterEnd:
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
			invoker.NoSwitch = 0;
			If(!CountInv("PowerTomeEffect")) { A_TakeInventory("PowerZaWarudo",1); }
			If(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 10 : 20) && CountInv("ThreadcutterActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("ThreadcutterMain"); }
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("ThreadcutterActive")) { Return ResolveState("AltCastEnd"); }
			Return ResolveState(Null);
		}
		Goto AltCastEnd;
	AltCastEnd:
		TNT1 A 4 {
			invoker.NoSwitch = 1;
			A_StopSound(5);
			A_TakeInventory("PowerZaWarudo",1);
			if(CountInv("PowerTomeEffect")) { A_SetBlend("Cyan",0.05,25); }
			A_Overlay(3,"RightEndAltCast");
			A_Overlay(-3,"LeftEndAltCast");
		}
		TNT1 A 1 {
			A_Overlay(3,"RightMain");
			A_Overlay(-3,"LeftMain");
		}
		Goto TrueReady;
	LeftEndAltCast:
		TNT1 A 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
	RightEndAltCast:
		OCLW D 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW D 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW D 0;
		"####" "#" 0 A_OverlayOffset(OverlayID(),171,67);
		"####" "#" 1 A_OverlayOffset(OverlayID(),172,68,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),174,72,WOF_INTERPOLATE);
		OCLW C 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW C 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW C 0;
		"####" "#" 1 A_OverlayOffset(OverlayID(),180,80);
		"####" "#" 1 A_OverlayOffset(OverlayID(),189,93,WOF_INTERPOLATE);
		Stop;
	KnivesLeft:
		TNT1 A 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
	KnivesRight:
		OCLW D 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW D 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW D 0;
		"####" "#" 1 A_OverlayOffset(OverlayID(),171,67);
		"####" "#" 1 A_OverlayOffset(OverlayID(),183,79,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),196,89,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),198,91,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),199,92,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),198,91,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),196,89,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),191,84,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),182,76,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),175,71,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),172,68,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),171,67,WOF_INTERPOLATE);
		Wait;
		
	//Flamewall.
	StartFlamewave:
		TNT1 A 10 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightDown");
			A_Overlay(-3,"LeftDown");
		}
	Flamewave:
		TNT1 A 13 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"MeteorRight");
			A_Overlay(-3,"MeteorLeft");
		}
		Goto FlamewaveMain;
	FlamewaveMain:
		TNT1 A 15 {
			invoker.NoSwitch = 1;
			A_AlertMonsters();
			A_SetBlend("Orange",0.15,25);
			A_PlaySound("Skullfire/Launch",0);
			A_FireBullets(0,0,1,0,"FlamewallSpawner",FBF_NORANDOMPUFFZ|FBF_NORANDOM,16384);
			A_Overlay(3,"FlamewaveRight");
			A_Overlay(-3,"FlamewaveLeft");
			A_TakeInventory("Mana",CountInv("PowerTomeEffect") ? 30 : 60,TIF_NOTAKEINFINITE);
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("FlamewaveActive")) { Return ResolveState("CastEnd"); }
			Return ResolveState(Null);
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
			invoker.NoSwitch = 0;
			If(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 30 : 60) && CountInv("FlamewaveActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("FlamewaveMain"); }
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("FlamewaveActive")) { Return ResolveState("CastEnd"); }
			Return ResolveState(Null);
		}
		Goto CastEnd;
	FlamewaveLeft:
		TNT1 A 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
	FlamewaveRight:
		OCLW F 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW F 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW F 0;
		"####" F 1 A_OverlayOffset(OverlayID(),191,72,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),194,79,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),198,88,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),201,93,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),202,94,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),201,93,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),198,88,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),194,79,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),191,72,WOF_INTERPOLATE);
		"####" F 1 A_OverlayOffset(OverlayID(),190,70,WOF_INTERPOLATE);
		"####" F 0 A_JumpIf(OverlayID() == -3,"LeftMeteorMain");
		Goto RightMeteorMain;
		
	//COMMENCE ANNIHILATUS~
	StartAnnihilation2:
		TNT1 A 6 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightReady");
			A_Overlay(-3,"LeftReady");
		}
	StartAnnihilation:
		TNT1 A 5 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightStartAltCast");
			A_Overlay(-3,"LeftStartAltCast");
		}
	Annihilation:
		TNT1 A 45 {
			invoker.NoSwitch = 1;
			A_Overlay(-3,"KnivesLeft");
			A_Overlay(3,"KnivesRight");
			A_AlertMonsters();
			A_PlaySound("Annihilation/Use",5,0.8);
			A_TakeInventory("Mana",CountInv("PowerTomeEffect") ? 40 : 80,TIF_NOTAKEINFINITE);
			A_PlaySound("Annihilation/Hit3",6,0.8);
			A_FireProjectile("TomedAnnihilationShot",0,0);
			A_SetBlend("White",0.4,55,"Blue");
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAA 1 {
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("AnnihilationActive")) { Return ResolveState("AnnihilationEnd"); }
			Return ResolveState(Null);
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
			invoker.NoSwitch = 0;
			If(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 50 : 100) && CountInv("AnnihilationActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("Annihilation"); }
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("AnnihilationActive")) { Return ResolveState("AnnihilationEnd"); }
			Return ResolveState(Null);
		}
	AnnihilationEnd:
		TNT1 A 4 {
			invoker.NoSwitch = 1;
			A_StopSound(5);
			A_Overlay(3,"RightEndAltCast");
			A_Overlay(-3,"LeftEndAltCast");
		}
		TNT1 A 1 {
			A_Overlay(3,"RightMain");
			A_Overlay(-3,"LeftMain");
		}
		Goto TrueReady;
		
	//Disco Slayer.
	StartPrism2:
		TNT1 A 6 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightReady");
			A_Overlay(-3,"LeftReady");
		}
	StartPrism:
		TNT1 A 5 {
			invoker.NoSwitch = 1;
			//A_GiveInventory("PrismRadius",70);
			A_Overlay(3,"RightStartAltCast");
			A_Overlay(-3,"LeftStartAltCast");
/*
			if(!Invoker.left_prism) {
				Invoker.left_prism = new("Gc_Prism");
			}
			if(!Invoker.right_prism) {
				Invoker.right_prism = new("Gc_Prism");
			}*/
		}
	PrismRestart:
		TNT1 A 0 {
			invoker.NoSwitch = 1;
			A_PlaySound("Prism/Start",5,0.7);
			
			A_PlaySound("Prism/Start",5,0.7);
			A_SpawnItemEx("PrismLightBlue",192,0,0,0,0,0,0,SXF_CLIENTSIDE|SXF_SETTARGET|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("PrismLightCyan",192,0,0,0,0,0,45,SXF_CLIENTSIDE|SXF_SETTARGET|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("PrismLightGreen",192,0,0,0,0,0,90,SXF_CLIENTSIDE|SXF_SETTARGET|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("PrismLightLime",192,0,0,0,0,0,135,SXF_CLIENTSIDE|SXF_SETTARGET|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("PrismLightYellow",192,0,0,0,0,0,180,SXF_CLIENTSIDE|SXF_SETTARGET|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("PrismLightOrange",192,0,0,0,0,0,225,SXF_CLIENTSIDE|SXF_SETTARGET|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("PrismLightRed",192,0,0,0,0,0,270,SXF_CLIENTSIDE|SXF_SETTARGET|SXF_NOCHECKPOSITION);
			A_SpawnItemEx("PrismLightPurple",192,0,0,0,0,0,315,SXF_CLIENTSIDE|SXF_SETTARGET|SXF_NOCHECKPOSITION);
			
			Invoker.left_prism.Start(
				player.mo,
				count:          8,
				start_rad:      1,  // Start opening size (sine of angle) / final
				end_rad:        0,  // (1 means 45Â°, higher will go towards 90Â°)
				start_w:        50, // Disc radius when appearing / final
				end_w:          9,
				start_s:        0,  // Scale when appearing / final
				end_s:          12.5,
				offset_h:       -25,
				attackzoffset:  -20);
			Invoker.right_prism.Start(
				player.mo,
				count:          8,
				start_rad:      1,
				end_rad:        0,
				start_w:        50,
				end_w:          9,
				start_s:        0,
				end_s:          12.5,
				offset_h:       25,
				attackzoffset:  -20); 
		}
	Prism:
		TNT1 A 0 A_JumpIfInventory("PowerTomeEffect",1,3);
		TNT1 A 0 A_JumpIf(CountInv("PrismPower") < 70,2);
		TNT1 A 0 A_JumpIfInventory("Mana",2,2);
		Goto PrismEnd;
		TNT1 A 0 A_JumpIfInventory("Mana",1,1);
		Goto PrismEnd;
		TNT1 A 0 A_JumpIfInventory("PowerTomeEffect",1,3);
		TNT1 A 0 A_JumpIf(CountInv("PrismPower") < 70,2);
		TNT1 AA 0 A_TakeInventory("Mana",random(1,2),TIF_NOTAKEINFINITE);

		TNT1 A 0 A_GiveInventory("PrismPower",1); 		  // Increases power consumption after hitting some point.
		/*TNT1 A 0 A_JumpIf(CountInv("PrismRadius") <= 1,2); // Make sure we wind up with one in the end.
		TNT1 A 0 A_TakeInventory("PrismRadius",1); 		  // Skipped when only one is left.
		TNT1 A 0 A_TakeInventory("PrismSpin",10); 		  // Go ten degrees at a time.
		TNT1 A 0 A_JumpIfInventory("PrismSpin",1,2); 	  // Make sure we loop over the spin amounts.
		TNT1 A 0 A_GiveInventory("PrismSpin",360);
		TNT1 A 0 { 										  // Reverse spin.
			if(CountInv("PrismSpinLeft") <= 0) { A_GiveInventory("PrismSpinLeft",360); }
			A_TakeInventory("PrismSpinLeft",10);
		}*/
		
		TNT1 A 1 {
			A_PlaySound("Prism/Loop",6,1.0,1);
			if(GetCvar("GC_ZoomRecoil")) { A_ZoomFactor(0.9); }
			A_QuakeEx(1,1,1,25,0,128,"none",QF_SCALEDOWN);
			A_Overlay(7,"PrismScreenEffect");
			A_OverlayOffset(3,171+frandom(4.0,-4.0),67+frandom(4.0,-4.0),WOF_INTERPOLATE);
			A_OverlayOffset(-3,171+frandom(4.0,-4.0),67+frandom(4.0,-4.0),WOF_INTERPOLATE);
			
			Invoker.left_prism.Tick(
				player.mo,
				rot_speed: 10,      // Spin speed in degrees per tic
				closing_f: 0.07,    // Higher means faster closing rate
				scaling_f: 0.15);   // Higher means reaches max width faster
			Invoker.right_prism.Tick(
				player.mo,
				rot_speed: -10,
				closing_f: 0.07,
				scaling_f: 0.15);
		}
			//Right side.
			/*A_RailAttack(CountInv("PrismPower") * 0.2, 16, false, "", "FF0000", RGF_SILENT | RGF_EXPLICITANGLE | RGF_FULLBRIGHT, 0, "PrismImpactBlue",
				atan(sin(CountInv("PrismSpin") + 0.0) * CountInv("PrismRadius") / 70),
				atan(cos(CountInv("PrismSpin") + 0.0) * CountInv("PrismRadius") / 70), 0, 2, 48.0,
				0,"PrismBeamBlue",-5);
			A_RailAttack(CountInv("PrismPower") * 0.2, 16, false, "", "FF8000", RGF_SILENT | RGF_EXPLICITANGLE | RGF_FULLBRIGHT, 0, "PrismImpactCyan",
				atan(sin(CountInv("PrismSpin") + 45.0) * CountInv("PrismRadius") / 70),
				atan(cos(CountInv("PrismSpin") + 45.0) * CountInv("PrismRadius") / 70), 0, 2, 48.0, //7.0 + (CountInv("PrismRadius") * 0.75)
				0,"PrismBeamCyan",-5);
			A_RailAttack(CountInv("PrismPower") * 0.2, 16, false, "", "FFFF00", RGF_SILENT | RGF_EXPLICITANGLE | RGF_FULLBRIGHT, 0, "PrismImpactGreen",
				atan(sin(CountInv("PrismSpin") + 90.0) * CountInv("PrismRadius") / 70),
				atan(cos(CountInv("PrismSpin") + 90.0) * CountInv("PrismRadius") / 70), 0, 2, 48.0,
				0,"PrismBeamGreen",-5);
			A_RailAttack(CountInv("PrismPower") * 0.25, 16, false, "", "00FF00", RGF_SILENT | RGF_EXPLICITANGLE | RGF_FULLBRIGHT, 0, "PrismImpactLime",
				atan(sin(CountInv("PrismSpin") + 135.0) * CountInv("PrismRadius") / 70),
				atan(cos(CountInv("PrismSpin") + 135.0) * CountInv("PrismRadius") / 70), 0, 2, 48.0,
				0,"PrismBeamLime",-5);
			A_RailAttack(CountInv("PrismPower") * 0.2, 16, false, "", "00FFFF", RGF_SILENT | RGF_EXPLICITANGLE | RGF_FULLBRIGHT, 0, "PrismImpactYellow",
				atan(sin(CountInv("PrismSpin") + 180.0) * CountInv("PrismRadius") / 70),
				atan(cos(CountInv("PrismSpin") + 180.0) * CountInv("PrismRadius") / 70), 0, 2, 48.0,
				0,"PrismBeamYellow",-5);
			A_RailAttack(CountInv("PrismPower") * 0.2, 16, false, "", "0000FF", RGF_SILENT | RGF_EXPLICITANGLE | RGF_FULLBRIGHT, 0, "PrismImpactOrange",
				atan(sin(CountInv("PrismSpin") + 225.0) * CountInv("PrismRadius") / 70),
				atan(cos(CountInv("PrismSpin") + 225.0) * CountInv("PrismRadius") / 70), 0, 2, 48.0,
				0,"PrismBeamOrange",-5);
			A_RailAttack(CountInv("PrismPower") * 0.2, 16, false, "", "8000FF", RGF_SILENT | RGF_EXPLICITANGLE | RGF_FULLBRIGHT, 0, "PrismImpactRed",
				atan(sin(CountInv("PrismSpin") + 270.0) * CountInv("PrismRadius") / 70),
				atan(cos(CountInv("PrismSpin") + 270.0) * CountInv("PrismRadius") / 70), 0, 2, 48.0,
				0,"PrismBeamRed",-5);
			A_RailAttack(CountInv("PrismPower") * 0.2, 16, false, "", "FF00FF", RGF_SILENT | RGF_EXPLICITANGLE | RGF_FULLBRIGHT, 0, "PrismImpactPurple",
				atan(sin(CountInv("PrismSpin") + 315.0) * CountInv("PrismRadius") / 70),
				atan(cos(CountInv("PrismSpin") + 315.0) * CountInv("PrismRadius") / 70), 0, 2, 48.0,
				0,"PrismBeamPurple",-5);

			//Left side.
			A_RailAttack(CountInv("PrismPower") * 0.2, -16, false, "", "FF0000", RGF_SILENT | RGF_EXPLICITANGLE | RGF_FULLBRIGHT, 0, "PrismImpactBlue",
				atan(sin(CountInv("PrismSpinLeft") + 0.0) * CountInv("PrismRadius") / 70),
				atan(cos(CountInv("PrismSpinLeft") + 0.0) * CountInv("PrismRadius") / 70), 0, 2, 48.0,
				0,"PrismBeamBlue",-5);
			A_RailAttack(CountInv("PrismPower") * 0.2, -16, false, "", "FF8000", RGF_SILENT | RGF_EXPLICITANGLE | RGF_FULLBRIGHT, 0, "PrismImpactCyan",
				atan(sin(CountInv("PrismSpinLeft") + 45.0) * CountInv("PrismRadius") / 70),
				atan(cos(CountInv("PrismSpinLeft") + 45.0) * CountInv("PrismRadius") / 70), 0, 2, 48.0, //7.0 + (CountInv("PrismRadius") * 0.75)
				0,"PrismBeamCyan",-5);
			A_RailAttack(CountInv("PrismPower") * 0.2, -16, false, "", "FFFF00", RGF_SILENT | RGF_EXPLICITANGLE | RGF_FULLBRIGHT, 0, "PrismImpactGreen",
				atan(sin(CountInv("PrismSpinLeft") + 90.0) * CountInv("PrismRadius") / 70),
				atan(cos(CountInv("PrismSpinLeft") + 90.0) * CountInv("PrismRadius") / 70), 0, 2, 48.0,
				0,"PrismBeamGreen",-5);
			A_RailAttack(CountInv("PrismPower") * 0.25, -16, false, "", "00FF00", RGF_SILENT | RGF_EXPLICITANGLE | RGF_FULLBRIGHT, 0, "PrismImpactLime",
				atan(sin(CountInv("PrismSpinLeft") + 135.0) * CountInv("PrismRadius") / 70),
				atan(cos(CountInv("PrismSpinLeft") + 135.0) * CountInv("PrismRadius") / 70), 0, 2, 48.0,
				0,"PrismBeamLime",-5);
			A_RailAttack(CountInv("PrismPower") * 0.2, -16, false, "", "00FFFF", RGF_SILENT | RGF_EXPLICITANGLE | RGF_FULLBRIGHT, 0, "PrismImpactYellow",
				atan(sin(CountInv("PrismSpinLeft") + 180.0) * CountInv("PrismRadius") / 70),
				atan(cos(CountInv("PrismSpinLeft") + 180.0) * CountInv("PrismRadius") / 70), 0, 2, 48.0,
				0,"PrismBeamYellow",-5);
			A_RailAttack(CountInv("PrismPower") * 0.2, -16, false, "", "0000FF", RGF_SILENT | RGF_EXPLICITANGLE | RGF_FULLBRIGHT, 0, "PrismImpactOrange",
				atan(sin(CountInv("PrismSpinLeft") + 225.0) * CountInv("PrismRadius") / 70),
				atan(cos(CountInv("PrismSpinLeft") + 225.0) * CountInv("PrismRadius") / 70), 0, 2, 48.0,
				0,"PrismBeamOrange",-5);
			A_RailAttack(CountInv("PrismPower") * 0.2, -16, false, "", "8000FF", RGF_SILENT | RGF_EXPLICITANGLE | RGF_FULLBRIGHT, 0, "PrismImpactRed",
				atan(sin(CountInv("PrismSpinLeft") + 270.0) * CountInv("PrismRadius") / 70),
				atan(cos(CountInv("PrismSpinLeft") + 270.0) * CountInv("PrismRadius") / 70), 0, 2, 48.0,
				0,"PrismBeamRed",-5);
			A_RailAttack(CountInv("PrismPower") * 0.2, -16, false, "", "FF00FF", RGF_SILENT | RGF_EXPLICITANGLE | RGF_FULLBRIGHT, 0, "PrismImpactPurple",
				atan(sin(CountInv("PrismSpinLeft") + 315.0) * CountInv("PrismRadius") / 70),
				atan(cos(CountInv("PrismSpinLeft") + 315.0) * CountInv("PrismRadius") / 70), 0, 2, 48.0,
				0,"PrismBeamPurple",-5);
		}*/
		TNT1 A 0 {
			If(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 2 : 4) && CountInv("PrismActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("Prism"); }
			Return ResolveState(Null);
		}
		TNT1 A 0 {
			A_ZoomFactor(1.0);
			A_OverlayOffset(3,171,67);
			A_OverlayOffset(-3,171,67);
			A_AlertMonsters();
			A_PlaySound("Prism/End",6);
			/*A_TakeInventory("PrismRadius",0);
			A_TakeInventory("PrismSpin",0);
			A_TakeInventory("PrismSpinLeft",0);*/
			A_TakeInventory("PrismPower",0);
			A_StopSound(5);
			
			Invoker.left_prism.End();
			Invoker.right_prism.End();
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
			invoker.NoSwitch = 0;
			If(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 20 : 40) && CountInv("PrismActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("PrismRestart"); }
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("PrismActive")) { Return ResolveState("PrismEnd"); }
			Return ResolveState(Null);
		}
	PrismEnd:
		TNT1 A 4 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightEndAltCast");
			A_Overlay(-3,"LeftEndAltCast");
		}
		TNT1 A 1 {
			A_Overlay(3,"RightMain");
			A_Overlay(-3,"LeftMain");
		}
		Goto TrueReady;
		
	PrismScreenEffect:
		"####" "#" 0 A_Jump(32,"BlueScreen","CyanScreen","GreenScreen","LimeScreen",
							   "YellowScreen","OrangeScreen","RedScreen","PurpleScreen");
		Stop;
	BlueScreen:
		"####" "#" 0 A_SetBlend("Blue",0.1,70,"White");
		Stop;
	CyanScreen:
		"####" "#" 0 A_SetBlend("Cyan",0.1,70,"White");
		Stop;
	GreenScreen:
		"####" "#" 0 A_SetBlend("Green",0.1,70,"White");
		Stop;
	LimeScreen:
		"####" "#" 0 A_SetBlend("99 FF 00",0.1,70,"White");
		Stop;
	YellowScreen:
		"####" "#" 0 A_SetBlend("Yellow",0.1,70,"White");
		Stop;
	OrangeScreen:
		"####" "#" 0 A_SetBlend("Orange",0.1,70,"White");
		Stop;
	RedScreen:
		"####" "#" 0 A_SetBlend("Red",0.1,70,"White");
		Stop;
	PurpleScreen:
		"####" "#" 0 A_SetBlend("Purple",0.1,70,"White");
		Stop;
		
	//Supersheep Ultimate.
	StartSheepshield:
		TNT1 A 10 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightDown");
			A_Overlay(-3,"LeftDown");
		}
	StartSheepshield2:
		TNT1 A 8 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"MeteorRight");
			A_Overlay(-3,"MeteorLeft");
		}
	Sheepshield:
		TNT1 A 0 {
			invoker.NoSwitch = 1;
			Invoker.CastCycle = 1;
			A_TakeInventory("Mana",CountInv("PowerTomeEffect") ? 25 : 50,TIF_NOTAKEINFINITE);
			A_GiveInventory("SheepActive",1);
			A_PlaySound("Sheepshield/Launch",6);
			A_SpawnItemEx("SuperDeadmakerSheep1",0,0,20,0,0,0,0,SXF_SETTARGET|SXF_SETMASTER);
			A_SpawnItemEx("SuperDeadmakerSheep2",0,0,20,0,0,0,0,SXF_SETTARGET|SXF_SETMASTER);
			A_SpawnItemEx("SuperDeadmakerSheep3",0,0,20,0,0,0,0,SXF_SETTARGET|SXF_SETMASTER);
			A_SpawnItemEx("SuperDeadmakerSheep4",0,0,20,0,0,0,0,SXF_SETTARGET|SXF_SETMASTER);
			A_SpawnItemEx("SuperDeadmakerSheep5",0,0,20,0,0,0,0,SXF_SETTARGET|SXF_SETMASTER);
		}
	SheepshieldLoop:
		TNT1 A 1 {
			A_AlertMonsters();
			A_PlaySound("Sheepshield/Loop",5,0.7,1);
			A_OverlayOffset(3,190+frandom(2.0,-2.0),70+frandom(2.0,-2.0),WOF_INTERPOLATE);
			A_OverlayOffset(-3,190+frandom(2.0,-2.0),70+frandom(2.0,-2.0),WOF_INTERPOLATE);
			if(Invoker.CastTime % 3 == 0) { A_TakeInventory("Mana",CountInv("PowerTomeEffect") ? 1 : 2,TIF_NOTAKEINFINITE); }
			if(Invoker.CastTime <= 0 && Invoker.CastCycle) {
				Invoker.CastTime = 10;
				Invoker.CastCycle--;
			}	
			Invoker.CastTime--;
		}
		TNT1 A 0 A_JumpIf(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 2 : 4) && CountInv("SheepshieldActive") && (Invoker.CastTime || Invoker.CastCycle),"SheepshieldLoop");
		TNT1 A 0 A_JumpIf(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 2 : 4) && CountInv("SheepshieldActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK, "SheepshieldLoop2");
		TNT1 A 14 {
			A_Overlay(-3,"SheepReleaseLeft");
			A_Overlay(3,"SheepReleaseRight");
			A_PlaySound("Sheepshield/Stop",5,0.7);
			A_PlaySound("SuperSheep/Release",6,0.8);
			A_TakeInventory("SheepActive",1);
			A_SetBlend("Red",0.15,35);
		}
		TNT1 AAAAAAAAAAAAA 1 {
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("SheepshieldActive")) { Return ResolveState("CastEnd"); }
			Return ResolveState(Null);
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
			invoker.NoSwitch = 0;
			If(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 25 : 50) && CountInv("SheepshieldActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("Sheepshield"); }
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("SheepshieldActive")) { Return ResolveState("CastEnd"); }
			Return ResolveState(Null);
		}
		Goto CastEnd;
	SheepshieldLoop2:
		TNT1 A 0 { Invoker.CastCycle = 1; }
		Goto SheepshieldLoop;
	SheepReleaseLeft:
		TNT1 A 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
	SheepReleaseRight:
		OCLW F 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW F 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW F 0;
		"####" "#" 1 A_OverlayOffset(OverlayID(),190,70);
		"####" "#" 1 A_OverlayOffset(OverlayID(),202,82,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),216,96,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),216,96,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),218,98,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),219,99,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),218,98,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),212,92,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),208,88,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),200,80,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),195,75,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),193,73,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),191,71,WOF_INTERPOLATE);
		"####" "#" 1 A_OverlayOffset(OverlayID(),190,70,WOF_INTERPOLATE);
		Wait;
		
	//Dark road ahead.
	StartDarkpath:
		TNT1 A 10 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightDown");
			A_Overlay(-3,"LeftDown");
		}
	StartDarkpath2:
		TNT1 A 8 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"MeteorRight");
			A_Overlay(-3,"MeteorLeft");
		}
	Darkpath:
		TNT1 A 14 {
			invoker.NoSwitch = 1;
			A_TakeInventory("Mana",CountInv("PowerTomeEffect") ? 8 : 15,TIF_NOTAKEINFINITE);
			A_AlertMonsters();
			A_PlaySound("Darkpath/Use",1|CHAN_NOPAUSE,0.9);
			A_Overlay(-3,"SheepReleaseLeft");
			A_Overlay(3,"SheepReleaseRight");
			A_GiveInventory("DarkpathTime");
			A_FireBullets(0,0,1,0,"DarkpathPuff2",FBF_NORANDOMPUFFZ,32768);
			A_RailAttack(0,0,0,"","purple",RGF_SILENT,0.0,"DarkpathPuffRail",0,0,0,0,24.0,0,"DarkpathRail");
		}
		TNT1 AAAAAAAAAAA 1 {
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("DarkpathActive")) { Return ResolveState("CastEnd"); }
			Return ResolveState(Null);
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
			invoker.NoSwitch = 0;
			If(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 8 : 15) && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("Darkpath"); }
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("DarkpathActive")) { Return ResolveState("CastEnd"); }
			Return ResolveState(Null);
		}
		Goto CastEnd;
		
	//Put down your gun! (puts it down and gets shot~)
	StartSpiritcannon:
		TNT1 A 10 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightDown");
			A_Overlay(-3,"LeftDown");
		}
	StartSpiritcannon2:
		TNT1 A 8 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"MeteorRight");
			A_Overlay(-3,"MeteorLeft");
		}
	Spiritcannon:
		TNT1 A 14 {
			invoker.NoSwitch = 1;
			A_AlertMonsters();
			A_Overlay(-3,"SheepReleaseLeft");
			A_Overlay(3,"SheepReleaseRight");
			A_PlaySound("Spiritcannon/Use",0);
			A_SetBlend("LightBlue",0.1,35);
			//A_SpawnItemEx("SpawnedCannon.Translation",0,0,height*0.6,cos(pitch)*300,0,-sin(pitch)*300,0,SXF_TRANSFERTRANSLATION|SXF_TRANSFERPOINTERS);
			Actor SpawnedCannon = A_FireProjectile("SpiritCannonXLSpawner",0,0);
			if(multiplayer && SpawnedCannon) SpawnedCannon.Translation = self.Translation;
			A_TakeInventory("Mana",CountInv("PowerTomeEffect") ? 5 : 10,TIF_NOTAKEINFINITE);
		}
		TNT1 AAAAAAAAAAAAAA 1 {
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("SpiritcannonActive")) { Return ResolveState("CastEnd"); }
			Return ResolveState(Null);
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
			invoker.NoSwitch = 0;
			If(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 15 : 30)  && CountInv("SpiritcannonActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("Spiritcannon"); }
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("SpiritcannonActive")) { Return ResolveState("CastEnd"); }
			Return ResolveState(Null);
		}
		Goto CastEnd;
	
	//No burning time for you. It's BURNING PUNCH TIME!!~
	StartMeteorfist:
		TNT1 A 0 {
			A_Overlay(3,"none");
			A_Overlay(-3,"none");
		}
		/*TNT1 A 10 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightDown");
			A_Overlay(-3,"LeftDown");
		}*/
	Meteorfist:
		TNT1 A 0 {
			invoker.NoSwitch = 1;
			A_PlaySound("Stomp/Use",6,1);
			A_PlaySound("SuperSheep/Whoosh",5,0.7,1);
			if(CountInv("PowerDeadmaker") && CountInv("PowerSuitToken")) { A_StartSound("Prophet/Woosh",6,0,1.0); A_StartSound("Prophet/Jet",889,0,0.8); A_StartSound("Prophet/Glide", 7, CHANF_LOOPING, 1.0); }
			A_PlaySound("Deadmaker/Woosh",1);
			if(Invoker.Punchside) {
				Invoker.Punchside = 0;
				A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
			} else {
				Invoker.Punchside = 1;
				A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,0);
			}
		}
	MeteorfistLoop:
		//TNT1 A 0 A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
		OPNC A 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DPNC A 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NPNC A 0;
		"####" C 1 A_OverlayOffset(OverlayID(),249,130);
		"####" C 1 A_OverlayOffset(OverlayID(),220,106,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),178,69,WOF_INTERPOLATE);
	MeteorfistLoop2:
		"####" B 1 { 
			A_OverlayOffset(OverlayID(),134+frandom(2.0,-2.0),49+frandom(2.0,-2.0),WOF_INTERPOLATE);
			if(CountInv("PowerSuitToken")) { A_CustomPunch(0,1,CPF_NOTURN,"DeadmakerCheckPuff",325); }
			else { A_CustomPunch(0,1,CPF_NOTURN,"DeadmakerCheckPuff",265); }
			A_ChangeVelocity (Cos(Pitch) * 16.0, 0, Sin(Pitch) * -16.0, CVF_RELATIVE);
			A_Gunflash(); //This is to keep the state locked in firing\melee frame.
			A_SetBlend("Orange",0.1,15);
			bNoGravity = 1;
			invoker.CastTime++;
			if(CountInv("PowerSuitToken")) { A_FireProjectile("MechamakerMeteorfistCheck",0,0); }
			else { A_FireProjectile("DeadmakerMeteorfistCheck",0,0); }
			if(invoker.CastTime % 3 == 0) { A_TakeInventory("Mana",1,TIF_NOTAKEINFINITE); }
		}
		"####" B 0 {
			If(CountInv("PunchConnected")) { Return ResolveState("MeteorfistConnect"); }
			If(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 25 : 50) && CountInv("MeteorfistActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("MeteorfistLoop2"); }
			Return ResolveState(Null);
		}
		Goto MeteorfistWhiff;
	MeteorfistConnect:
		"####" B 0 {
			A_StopSound(5);
			A_StopSound(7);
			Invoker.Bump = 8.0;
			invoker.CastTime = 0;
			A_TakeInventory("PunchConnected",1);
			bNoGravity = 0;
			A_FireProjectile("SuperMeteorfistImpact",0,0);
			A_TakeInventory("Mana",CountInv("PowerTomeEffect") ? 25 : 50,TIF_NOTAKEINFINITE);
			A_SetBlend("Orange",0.4,55);
		}
		"####" BBBBBBBB 1 {
				Invoker.Bump = Invoker.Bump - 1.0;
				A_OverlayOffset(OverlayID(),134+(Invoker.Bump*random(-1,1)),49+(Invoker.Bump*random(-1,1)),WOF_INTERPOLATE);
		}
		"####" B 1 A_OverlayOffset(OverlayID(),138,51,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),149,55,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),162,60,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),178,69,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),220,106,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),249,130,WOF_INTERPOLATE);
		TNT1 A 3;
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
			invoker.NoSwitch = 0;
			if(GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) { invoker.Timer++; }
			else { invoker.Timer = 0; }
			If(!CountInv("GCCantFire") && Health > 0 && !CountInv("MeteorfistActive")) { Return ResolveState("EndOfTheLine"); }
			If(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 25 : 50) && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("Meteorfist"); }
			if(!CountInv("GCCantFire") && Health > 0 && (GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerinput(INPUT_OLDBUTTONS) & BT_ATTACK)) { Return ResolveState("Swipe"); }
			if(!CountInv("GCCantFire") && Health > 0 && Guncaster(self).ChargeFuel > 75 && CountInv("DeadmakerCharger") /*&& Pos.Z <= FloorZ + 96.0*/ && (GetPlayerInput(INPUT_BUTTONS) & BT_RELOAD) && (GetPlayerInput(INPUT_BUTTONS) & BT_FORWARD) && !(GetPlayerInput(INPUT_BUTTONS) & BT_CROUCH)) { Return ResolveState("Charge"); }
			if(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & BT_RELOAD) { Return ResolveState("Fistbump"); }
			If(!CountInv("GCCantFire") && Health > 0 && invoker.Timer == 12 && GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) { invoker.Timer = 0; Return ResolveState("PunchCharge"); }
			Return ResolveState(Null);
		}
		Goto EndOfTheLine;
	MeteorfistWhiff:
		"####" B 0 {
			A_StopSound(5);
			A_StopSound(7);
			invoker.CastTime = 0;
			bNoGravity = 0;
		}
		"####" B 1 A_OverlayOffset(OverlayID(),88,43,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),56,54,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),29,69,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),57,89,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),81,115,WOF_INTERPOLATE);
		"####" A 1 A_OverlayOffset(OverlayID(),112,133,WOF_INTERPOLATE);
		TNT1 A 3;
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
			invoker.NoSwitch = 0;
			if(GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) { invoker.Timer++; }
			else { invoker.Timer = 0; }
			If(!CountInv("GCCantFire") && Health > 0 && !CountInv("MeteorfistActive")) { Return ResolveState("EndOfTheLine"); }
			If(!CountInv("GCCantFire") && Health > 0 && CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 25 : 50) && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("Meteorfist"); }
			if(!CountInv("GCCantFire") && Health > 0 && (GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerinput(INPUT_OLDBUTTONS) & BT_ATTACK)) { Return ResolveState("Swipe"); }
			if(!CountInv("GCCantFire") && Health > 0 && Guncaster(self).ChargeFuel > 75 && CountInv("DeadmakerCharger") /*&& Pos.Z <= FloorZ + 96.0*/ && (GetPlayerInput(INPUT_BUTTONS) & BT_RELOAD) && (GetPlayerInput(INPUT_BUTTONS) & BT_FORWARD) && !(GetPlayerInput(INPUT_BUTTONS) & BT_CROUCH)) { Return ResolveState("Charge"); }
			if(!CountInv("GCCantFire") && Health > 0 && GetPlayerInput(INPUT_BUTTONS) & BT_RELOAD) { Return ResolveState("Fistbump"); }
			If(!CountInv("GCCantFire") && Health > 0 && invoker.Timer == 12 && GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) { invoker.Timer = 0; Return ResolveState("PunchCharge"); }
			Return ResolveState(Null);
		}
		Goto EndOfTheLine;
		
	//Rule number one of punch club - talk about punch club at all times~
	StartSkypunch:
		TNT1 A 5 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightStartAltCast");
			A_Overlay(-3,"LeftStartAltCast");
		}
	Skypunch:
		TNT1 A 25 {
			invoker.NoSwitch = 1;
			A_Overlay(-3,"KnivesLeft");
			A_Overlay(3,"KnivesRight");
			A_AlertMonsters();
			A_PlaySound("Skypunch/Layer",6,0.9);
			A_PlaySound("Skypunch/Blast",5,1.0);
			A_TakeInventory("Mana",CountInv("PowerTomeEffect") ? 15 : 30,TIF_NOTAKEINFINITE);
			A_FireProjectile("SkypunchLauncher2",0,0);
			A_SetBlend("White",0.2,35);
		}
		TNT1 AAAAAAAAAAAAAAAAAA 1 {
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("SkypunchActive")) { Return ResolveState("SkypunchEnd"); }
			Return ResolveState(Null);
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
			invoker.NoSwitch = 0;
			If(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 50 : 100) && CountInv("SkypunchActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("Skypunch"); }
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("SkypunchActive")) { Return ResolveState("SkypunchEnd"); }
			Return ResolveState(Null);
		}
	SkypunchEnd:
		TNT1 A 4 {
			invoker.NoSwitch = 1;
			A_StopSound(5);
			A_Overlay(3,"RightEndAltCast");
			A_Overlay(-3,"LeftEndAltCast");
		}
		TNT1 A 1 {
			A_Overlay(3,"RightMain");
			A_Overlay(-3,"LeftMain");
		}
		Goto TrueReady;
		
	//Badgers badgers badgers badgers badgers badgers~ (Mushroom mushroom!)
	StartGumpop2:
		TNT1 A 6 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightReady");
			A_Overlay(-3,"LeftReady");
		}
	StartGumpop:
		TNT1 A 5 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightStartAltCast");
			A_Overlay(-3,"LeftStartAltCast");
		}
	Gumpop:
		TNT1 A 20 {
			invoker.NoSwitch = 1;
			A_Overlay(-3,"KnivesLeft");
			A_Overlay(3,"KnivesRight");
			A_AlertMonsters();
			A_PlaySound("Gumpop/Cast",5,0.6);
			A_FireBullets(0,0,1,0,"GumpopSpreaderSpawner",FBF_NORANDOMPUFFZ|FBF_NORANDOM,16384);
			A_TakeInventory("Mana",CountInv("PowerTomeEffect") ? 15 : 30,TIF_NOTAKEINFINITE);
			A_SetBlend("Green",0.2,35);
		}
		TNT1 AAAAAAAAAAAAAAAAAA 1 {
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("GumpopActive")) { Return ResolveState("GumpopEnd"); }
			Return ResolveState(Null);
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
			invoker.NoSwitch = 0;
			If(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 15 : 30) && CountInv("GumpopActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("Gumpop"); }
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("GumpopActive")) { Return ResolveState("GumpopEnd"); }
			Return ResolveState(Null);
		}
	GumpopEnd:
		TNT1 A 4 {
			invoker.NoSwitch = 1;
			A_StopSound(5);
			A_Overlay(3,"RightEndAltCast");
			A_Overlay(-3,"LeftEndAltCast");
		}
		TNT1 A 1 {
			A_Overlay(3,"RightMain");
			A_Overlay(-3,"LeftMain");
		}
		Goto TrueReady;
		
	//CORPUS EXPLODITIS.
	StartCorpseblast2:
		TNT1 A 6 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightReady");
			A_Overlay(-3,"LeftReady");
		}
	StartCorpseblast:
		TNT1 A 5 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightStartAltCast");
			A_Overlay(-3,"LeftStartAltCast");
		}
	Corpseblast:
		TNT1 A 20 {
			invoker.NoSwitch = 1;
			A_Overlay(-3,"KnivesLeft");
			A_Overlay(3,"KnivesRight");
			A_AlertMonsters();
			A_PlaySound("Corpseblast/Use",5);
			A_FireProjectile("CorpseblastProjectile2",0,0);
			A_TakeInventory("Mana",CountInv("PowerTomeEffect") ? 15 : 30,TIF_NOTAKEINFINITE);
			A_SetBlend("Red",0.2,35);
		}
		TNT1 AAAAAAAAAAAAA 1 {
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("CorpseActive")) { Return ResolveState("CorpseblastEnd"); }
			Return ResolveState(Null);
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
			invoker.NoSwitch = 0;
			If(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 15 : 30) && CountInv("CorpseActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("Corpseblast"); }
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("CorpseActive")) { Return ResolveState("CorpseblastEnd"); }
			Return ResolveState(Null);
		}
	CorpseblastEnd:
		TNT1 A 4 {
			invoker.NoSwitch = 1;
			A_StopSound(5);
			A_Overlay(3,"RightEndAltCast");
			A_Overlay(-3,"LeftEndAltCast");
		}
		TNT1 A 1 {
			A_Overlay(3,"RightMain");
			A_Overlay(-3,"LeftMain");
		}
		Goto TrueReady;
	
	//Hammer to Faaaaaaaaall~
	StartHammersmite:
		TNT1 A 5 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightDown");
			A_Overlay(-3,"LeftDown");
		}
	Hammersmite:
		TNT1 A 0 {
			invoker.NoSwitch = 1;
			if(CountInv("PowerSuitToken")) { A_StartSound("Prophet/Move",88,0,0.9); }
			A_PlaySound("Deadmaker/Woosh",6);
			if(Invoker.Punchside) {
				Invoker.Punchside = 0;
				A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,1);
			} else {
				Invoker.Punchside = 1;
				A_OverlayFlags(OverlayID(),PSPF_MIRROR|PSPF_FLIP,0);
			}
		}
		OCLW A 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DCLW A 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NCLW A 0;
		"####" A 1 A_OverlayOffset(OverlayID(),299,-44);
		"####" A 1 A_OverlayOffset(OverlayID(),240,-14,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),199,13,WOF_INTERPOLATE);
		"####" B 1 A_OverlayOffset(OverlayID(),135,35,WOF_INTERPOLATE);
		"####" C 1 A_OverlayOffset(OverlayID(),75,57,WOF_INTERPOLATE);
		"####" C 0 {
			A_PlaySound("Hammersmite/Use",5);
			A_TakeInventory("Mana",CountInv("PowerTomeEffect") ? 20 : 40,TIF_NOTAKEINFINITE);
			A_SetBlend("Yellow",0.1,25,"White");
			A_FireProjectile("HammersmiteProjectileDeadmaker",0,0,Invoker.Punchside ? 12 : -12,0);
		}
		"####" C 1 A_OverlayOffset(OverlayID(),59,84,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),-3,121,WOF_INTERPOLATE);
		"####" D 1 A_OverlayOffset(OverlayID(),-33,142,WOF_INTERPOLATE);
		TNT1 A 8;
		TNT1 AAAAA 1 {
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("HammersmiteActive")) { Return ResolveState("EndOfTheLine"); }
			Return ResolveState(Null);
		}
		TNT1 AAAAAAAAAAAAAAAAAAAA 1 {
			If(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 20 : 40) && CountInv("HammersmiteActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("Hammersmite"); }
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("HammersmiteActive")) { Return ResolveState("EndOfTheLine"); }
			Return ResolveState(Null);
		}
		Goto EndOfTheLine;
		
	//Stay frosty gang. Just not "that" frosty.
	StartFrostbite2:
		TNT1 A 6 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightReady");
			A_Overlay(-3,"LeftReady");
		}
	StartFrostbite:
		TNT1 A 5 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightStartAltCast");
			A_Overlay(-3,"LeftStartAltCast");
		}
	Frostbite:
		TNT1 A 25 {
			A_Overlay(-3,"KnivesLeft");
			A_Overlay(3,"KnivesRight");
			A_AlertMonsters();
			A_PlaySound("Frostbite/Spell",6);
			A_PlaySound("Frostbite/Launch",5);
			A_FireProjectile("FrozenOrbDoubler",0,0);
			A_TakeInventory("Mana",CountInv("PowerTomeEffect") ? 20 : 40,TIF_NOTAKEINFINITE);
			A_SetBlend("White",0.2,35,"Blue");
		}
		TNT1 AAAAAAAAAAAAAAAAAAAA 1 {
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("FrostbiteActive")) { Return ResolveState("FrostbiteEnd"); }
			Return ResolveState(Null);
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
			invoker.NoSwitch = 0;
			If(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 20 : 40) && CountInv("FrostbiteActive") && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("Frostbite"); }
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("FrostbiteActive")) { Return ResolveState("FrostbiteEnd"); }
			Return ResolveState(Null);
		}
	FrostbiteEnd:
		TNT1 A 4 {
			A_StopSound(5);
			A_Overlay(3,"RightEndAltCast");
			A_Overlay(-3,"LeftEndAltCast");
		}
		TNT1 A 1 {
			A_Overlay(3,"RightMain");
			A_Overlay(-3,"LeftMain");
		}
		Goto TrueReady;
		
	//FUS-RO-FUUUUUCK!!!
	StartDragonshout2:
		TNT1 A 0 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightReady");
			A_Overlay(-3,"LeftReady");
		}
	StartDragonshout:
		TNT1 A 0 {
			//A_TakeInventory("Mana",CountInv("PowerTomeEffect") ? 25 : 50,TIF_NOTAKEINFINITE);
			invoker.NoSwitch = 1;
			If(random(1,100) <= GetCvar("GC_ShoutChance")) {
				A_PlaySound("Guncaster/Shout",2,1.0);
			}
		}
	Dragonshout:
		TNT1 A 0 { 
			invoker.timer = 0;
			A_Overlay(7,"DragonshoutSequence");
		}
	Sequence1:
		TNT1 A 1 { 
			invoker.timer++;
		}
		TNT1 A 0 A_JumpIf(invoker.timer < 21, "Sequence1");
	Sequence2:
		TNT1 A 1 { 
			A_OverlayOffset(3,190+frandom(5.0,-5.0),96+frandom(5.0,-5.0),WOF_INTERPOLATE);
			A_OverlayOffset(-3,190+frandom(5.0,-5.0),96+frandom(5.0,-5.0),WOF_INTERPOLATE);
			invoker.timer++;
		}
		TNT1 A 0 A_JumpIf(invoker.timer < 37, "Sequence2");
		TNT1 A 20 {
			A_OverlayOffset(3,190,96,WOF_INTERPOLATE);
			A_OverlayOffset(-3,190,96,WOF_INTERPOLATE);
			A_QuakeEx(3,3,3,15,0,512,"none",QF_SCALEDOWN);
		}
		TNT1 AAAAAAAAAA 1 {
			invoker.NoSwitch = 0;
			if(!CountInv("GCCantFire") && Health > 0 && (GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK) && !(GetPlayerinput(INPUT_OLDBUTTONS) & BT_ATTACK)) { Return ResolveState("StartSwipe"); }
			if(!CountInv("GCCantFire") && Health > 0 && Guncaster(self).ChargeFuel > 75 && CountInv("DeadmakerCharger") /*&& Pos.Z <= FloorZ + 96.0*/ && (GetPlayerInput(INPUT_BUTTONS) & BT_RELOAD) && (GetPlayerInput(INPUT_BUTTONS) & BT_FORWARD) && !(GetPlayerInput(INPUT_BUTTONS) & BT_CROUCH)) { Return ResolveState("StartCharge"); }
			if(!CountInv("GCCantFire") && Health > 0 && CountInv("DeadmakerDynamite") && !CountInv("DynamiteTossCounter") && CountInv("TNTAmmo")) { Return ResolveState("StartDynamite"); }
			Return ResolveState(Null);
		}
		Goto TrueReady;
	DragonshoutSequence:
		TNT1 A 5 A_SpawnItemEx("Dragonshouter",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_ORIGINATOR|SXF_SETTARGET);
		TNT1 A 1 A_SetPitch(Pitch-0.25 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(Pitch-0.25 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(Pitch-0.5 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(pitch-1.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(pitch-2.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 AAA 1 A_SetPitch(pitch-2.5 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 4;
		TNT1 A 1 A_SetPitch(Pitch+0.5 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(Pitch+2.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(Pitch+4.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(Pitch+5.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 0 {
			A_AlertMonsters();
			A_TakeInventory("Mana",CountInv("PowerTomeEffect") ? 35 : 70,TIF_NOTAKEINFINITE);
			A_FireProjectile("Dragonshout",0,0);
			A_SetBlend("c2fff3",0.2,35);
		}
		TNT1 A 1 A_SetPitch(Pitch+6.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(Pitch+3.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 AA 1 A_SetPitch(pitch+1.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(Pitch+0.5 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 1;
		TNT1 A 1 A_SetPitch(Pitch-6.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(Pitch-3.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 AA 1 A_SetPitch(pitch-1.0 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		TNT1 A 1 A_SetPitch(Pitch-0.5 * GetCvar("GC_WeaponRecoil"), SPF_INTERPOLATE);
		Stop;
		
	//Sigil of the Gods? More like, Sigil of the Farts! - Nithor.
	StartSigil2:
		TNT1 A 6 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightReady");
			A_Overlay(-3,"LeftReady");
		}
	StartSigil:
		TNT1 A 5 {
			invoker.NoSwitch = 1;
			A_Overlay(3,"RightStartAltCast");
			A_Overlay(-3,"LeftStartAltCast");
		}
	Sigil:
		TNT1 A 28 {
			invoker.NoSwitch = 1;
			A_Overlay(-3,"KnivesLeft");
			A_Overlay(3,"KnivesRight");
			A_AlertMonsters();
			A_PlaySound("Sigil/Use",5,0.8);
			A_PlaySound("Sigil/Add",6,0.8);
			A_TakeInventory("Mana",CountInv("PowerTomeEffect") ? 70 : 35,TIF_NOTAKEINFINITE);
			A_FireProjectile("DeadmakerSigilBomb",0,0);
			A_SetBlend("799ae4",0.3,55);
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAA 1 {
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("SigilActive")) { Return ResolveState("SigilEnd"); }
			Return ResolveState(Null);
		}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 {
			invoker.NoSwitch = 0;
			If(CountInv("Mana") >= (CountInv("PowerTomeEffect") ? 50 : 100) && GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK) { Return ResolveState("Sigil"); }
			If(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK|BT_ZOOM|BT_RELOAD) || !CountInv("SigilActive")) { Return ResolveState("SigilEnd"); }
			Return ResolveState(Null);
		}
	SigilEnd:
		TNT1 A 4 {
			invoker.NoSwitch = 1;
			A_StopSound(5);
			A_Overlay(3,"RightEndAltCast");
			A_Overlay(-3,"LeftEndAltCast");
		}
		TNT1 A 1 {
			A_Overlay(3,"RightMain");
			A_Overlay(-3,"LeftMain");
		}
		Goto TrueReady;

	//Ground slam.
	ComeOnAndSlam:
		OPNC E 0 A_JumpIf(CountInv("PowerSuitToken"),3);
		DPNC E 0 A_JumpIf(CountInv("PowerSuitDraugh"),2);
		NPNC E 0;
		"####" E 0 SetPlayerProperty(0,1,PROP_FROZEN);
		"####" E 1 A_OverlayOffset(OverlayID(),-43,46);
		"####" E 1 A_OverlayOffset(OverlayID(),-43,35,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),-43,39,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),-43,26,WOF_INTERPOLATE);
		"####" E 4 A_OverlayOffset(OverlayID(),-43,24,WOF_INTERPOLATE);
		"####" E 0 {
			A_ChangeVelocity(0,0,-15);
			if(CountInv("PowerSuitToken")) { A_StartSound("Prophet/Woosh",6,0,0.8); }
			A_PlaySound("Deadmaker/Woosh",1);
		}
		"####" E 1 A_OverlayOffset(OverlayID(),-43,29,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),-43,59,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),-43,102,WOF_INTERPOLATE);
		"####" E 1 A_OverlayOffset(OverlayID(),-43,149,WOF_INTERPOLATE);
		TNT1 A 4;
		TNT1 A 0 {
			If(player.OnGround) {
				A_TakeInventory("Mana",CountInv("PowerTomeEffect") ? 13 : 25,TIF_NOTAKEINFINITE);
				A_QuakeEx(5,5,7,35,0,1536,"none",QF_SCALEDOWN);
				A_QuakeEx(5,5,7,35,0,1536,"none",QF_SCALEDOWN|QF_WAVE,1.0,1.0,3.0);
				A_FireProjectile("SuperMeteorfistImpact",0,0,0,-48);
			}
		}
		TNT1 A 15;
		TNT1 A 15 SetPlayerProperty(0,0,PROP_FROZEN);
		Goto EndOfTheLine;
	}
}